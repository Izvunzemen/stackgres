#!/bin/sh

pod_logs() {
  local FILTERED_POD
  local FILTERED_CONTAINER
  local POD
  local CONTAINER
  local NAMESPACE
  local OWNER_KIND
  local PODS_FILE="$TARGET_PATH/pod-logs-$(shuf -i 0-65535 -n 1)"
  local LOG_IN_FILES=false
  local LOG_IN_PATH="$TARGET_PATH/pod-logs"
  while [ "$#" -gt 0 ]
  do
    case "$1" in
      -n|--namespace)
        shift
        NAMESPACE="$1"
        shift
        ;;
      -p|--pod)
        shift
        FILTERED_POD="$1"
        shift
        ;;
      -c|--container)
        shift
        FILTERED_CONTAINER="$1"
        shift
        ;;
      -o|--owner-kind)
        shift
        OWNER_KIND="$1"
        shift
        ;;
      -F|--log-in-files)
        shift
        LOG_IN_FILES=true
        ;;
      -P|--log-in-path)
        shift
        LOG_IN_PATH="$1"
        shift
        ;;
      *)
        echo >&2 "Unknown parameter $1 (use: --namespace <namespace>; --owner-kind <owner kind>; --container <container>; --pod <pod name>)"
        return 1
        ;;
    esac
  done
  rm -f "$PODS_FILE"
  trap_exec kubectl get pod $(if [ -z "$NAMESPACE" ]; then echo '--all-namespaces'; else echo '-n '"$NAMESPACE"; fi) -o json --watch \
    | jq --unbuffered -r '.metadata as $metadata
        | [.status.containerStatuses,.status.initContainerStatuses][]
        | select(. != null) | map(
            $metadata.namespace + "/" + $metadata.name + "/" + .name + "/" + $metadata.uid + "/" + (.restartCount | tostring)
              + "," + ($metadata.ownerReferences | select(. != null) | map(.kind) | .[] | tostring)
          )[]' \
    | while read CONTAINER_DESC
      do
        CONTAINER_ID="${CONTAINER_DESC%,*}"
        if ( [ -n "$FILTERED_POD" ] \
            && ! echo_raw "$CONTAINER_ID" | grep -q '^[^/]\+/'"$FILTERED_POD"'/[^,]\+/[^,]\+/[^,]\+$' ) \
          || ( [ -n "$FILTERED_CONTAINER" ] \
            && ! echo_raw "$CONTAINER_ID" | grep -q '^[^/]\+/[^,]\+/'"$FILTERED_CONTAINER"'/[^,]\+/[^,]\+$' ) \
          || ( [ -n "$OWNER_KIND" ] \
            && ! echo_raw "$CONTAINER_DESC" | grep -q '^[^,]\+/[^,]\+/[^,]\+/[^,]\+/[^,]\+,'"$OWNER_KIND"'$' ) \
          || ( [ -f "$PODS_FILE" ] && grep -q -F "$CONTAINER_ID" "$PODS_FILE" )
        then
          continue
        fi
        NAMESPACE="${CONTAINER_ID%%/*}"
        POD="${CONTAINER_ID#*/}"
        CONTAINER="${POD#*/}"
        POD="${POD%%/*}"
        CONTAINER="${CONTAINER%%/*}"
        if ! kubectl logs -n "$NAMESPACE" "$POD" -c "$CONTAINER" --limit-bytes=1 >/dev/null 2>&1
        then
          continue
        fi
        echo_raw "$CONTAINER_ID" >> "$PODS_FILE"
        echo_raw "[$NAMESPACE/$POD/$CONTAINER] Start logging container $NAMESPACE/$POD/$CONTAINER"
        if "$LOG_IN_FILES"
        then
          mkdir -p "$LOG_IN_PATH/$NAMESPACE/$POD"
        fi
        pod_logs_pod_container_in_trap $(if "$LOG_IN_FILES"; then printf '%s %s %s' '-F' '-P' "$LOG_IN_PATH"; fi) -n "$NAMESPACE" "$POD" -c "$CONTAINER"
      done
}

pod_logs_pod_container_in_trap() {
  local NAMESPACE
  local POD
  local CONTAINER
  local LOG_IN_FILES=false
  local LOG_IN_PATH="$TARGET_PATH/pod-logs"
  while [ "$#" -gt 0 ]
  do
    case "$1" in
      -n|--namespace)
        shift
        NAMESPACE="$1"
        shift
        ;;
      -c|--container)
        shift
        CONTAINER="$1"
        shift
        ;;
      -F|--log-in-files)
        shift
        LOG_IN_FILES=true
        ;;
      -P|--log-in-path)
        shift
        LOG_IN_PATH="$1"
        shift
        ;;
      *)
        POD="$1"
        shift
        ;;
    esac
  done
  trap_exec kubectl logs -n "$NAMESPACE" "$POD" -c "$CONTAINER" --timestamps -f \
    | (
      set +x
      while IFS="$(printf '\n')" read LINE
      do
        if "$LOG_IN_FILES"
        then
          printf '%s\n' "$LINE" >> "$LOG_IN_PATH/$NAMESPACE/$POD/$CONTAINER.log"
        else
          printf '%s\n' "[$NAMESPACE/$POD/$CONTAINER] $LINE"
        fi
      done
      ) &
}