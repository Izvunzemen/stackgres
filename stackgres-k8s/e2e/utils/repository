#!/bin/sh

export E2E_PULLED_IMAGES_PATH="${E2E_PULLED_IMAGES_PATH:-$TARGET_PATH/pulled-images}"
export E2E_USE_INTERMIDIATE_PRIVATE_REPO="${E2E_USE_INTERMIDIATE_PRIVATE_REPO:-false}"

setup_cache() {
  if [ "$E2E_DISABLE_CACHE" = "true" ]
  then
    return
  fi
  load_cached_images_from_local_repository
  cache_pulled_images_to_local_repository &
  trap_kill "$!"
  load_failed_to_pull_images_from_local_repository &
  trap_kill "$!"
}

set_up_private_repository() {
  if ! aws ecr describe-repositories --repository-name "stackgres/operator" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/operator" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/restapi" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/restapi" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/admin-ui" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/admin-ui" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/admin-ui" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/admin-ui" 
  fi  


  export PRIVATE_REPO_URI=$(get_private_repository_uri)
  export PRIVATE_OPERATOR_IMAGE_NAME="$PRIVATE_REPO_URI/$OPERATOR_IMAGE_NAME"
  export PRIVATE_RESTAPI_IMAGE_NAME="$PRIVATE_REPO_URI/$RESTAPI_IMAGE_NAME"
  export PRIVATE_ADMINUI_IMAGE_NAME="$PRIVATE_REPO_URI/$ADMINUI_IMAGE_NAME"

  get_private_repository_password | docker login --username AWS --password-stdin "$PRIVATE_REPO_URI"
  
  docker tag "$OPERATOR_IMAGE_NAME" "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker tag "$RESTAPI_IMAGE_NAME" "$PRIVATE_RESTAPI_IMAGE_NAME"
  docker tag "$ADMINUI_IMAGE_NAME" "$PRIVATE_ADMINUI_IMAGE_NAME"

  docker push "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker push "$PRIVATE_RESTAPI_IMAGE_NAME"
  docker push "$PRIVATE_ADMINUI_IMAGE_NAME"

  if kubectl get namespace "$OPERATOR_NAMESPACE" > /dev/null
  then  
    kubectl get secret -n "$OPERATOR_NAMESPACE" regcred > /dev/null && kubectl delete secret -n "$OPERATOR_NAMESPACE" regcred
    kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" regcred \
      --docker-server="$PRIVATE_REPO_URI" \
      --docker-username="AWS" \
      --docker-password="$(get_private_repository_password)"
  else
    kubectl create namespace "$OPERATOR_NAMESPACE"
    kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" regcred \
    --docker-server="$PRIVATE_REPO_URI" \
    --docker-username="AWS" \
    --docker-password="$(get_private_repository_password)"
  fi

  if kubectl get serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-operator > /dev/null
  then
    kubectl delete serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-operator
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stackgres-operator
  namespace: $OPERATOR_NAMESPACE
imagePullSecrets:
- name: regcred
EOF
  fi

  if kubectl get serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-restapi > /dev/null
  then
    kubectl delete serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-restapi
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stackgres-restapi
  namespace: $OPERATOR_NAMESPACE
imagePullSecrets:
- name: regcred
EOF
  fi

}

get_private_repository_uri() {
  local AWS_ACCOUNT_ID=$(aws --output=text sts get-caller-identity | awk '{print $1}')
  local AWS_REGION=$(aws configure get region)

  echo "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
}

get_private_repository_password() {
  echo "$(aws ecr get-login-password)"
}

load_cached_images_from_local_repository() {
  cat "$E2E_PULLED_IMAGES_PATH" \
    | cut -d : -f 2-3 | sort | uniq \
    | xargs -r -n 1 -I % -P 0 \
      "$SHELL" $SHELL_XTRACE "$(dirname "$0")/e2e" load_cached_image_from_local_repository '%'
}

load_cached_image_from_local_repository() {
  if docker image inspect "$1" >/dev/null 2>&1
  then
    load_image_k8s "$1"
  else
    echo "Image $1 not found in cache!"
  fi
}

cache_pulled_images_to_local_repository() {
  event_watch \
    | stdbuf -o0 grep '\sSuccessfully pulled image "[^"]\+"$' \
    | stdbuf -o0 sed 's/.*\sSuccessfully pulled image "\([^"]\+\)"$/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected pulled image $IMAGE_NAME to k8s env $E2E_ENV"
        if [ ! -f "$E2E_PULLED_IMAGES_PATH" ]
        then
          rm -f "$E2E_PULLED_IMAGES_PATH"
          touch "$E2E_PULLED_IMAGES_PATH"
        fi
        if [ "$(grep -F "$IMAGE_NAME" "$E2E_PULLED_IMAGES_PATH" \
          | sort | tail -n 1 | cut -d : -f 1 | grep '\d+' || echo 0)" \
          -lt "$(($(date +%s)-30))" ]
        then
          echo "Pulling image $IMAGE_NAME to cache"
          if docker pull -q "$IMAGE_NAME"
          then
            echo "$(date +%s):$IMAGE_NAME" >> "$E2E_PULLED_IMAGES_PATH"
          else
            echo "Pulling image $IMAGE_NAME to cache failed!"
          fi
        fi
      done
      )
}

load_failed_to_pull_images_from_local_repository() {
  event_watch \
    | stdbuf -o0 grep '\sFailed to pull image "[^"]\+":.*$' \
    | stdbuf -o0 sed 's/.*\sFailed to pull image "\([^"]\+\)":.*/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected failed to pull image $IMAGE_NAME to k8s env $E2E_ENV"
        if docker image inspect "$IMAGE_NAME" >/dev/null 2>&1
        then
          load_image_k8s "$IMAGE_NAME"
        else
          echo "Image $IMAGE_NAME not found in cache!"
        fi
      done
      )
}
