#!/bin/sh

export E2E_PULLED_IMAGES_PATH="${E2E_PULLED_IMAGES_PATH:-$TARGET_PATH/pulled-images}"
export E2E_USE_INTERMIDIATE_PRIVATE_REPO="${E2E_USE_INTERMIDIATE_PRIVATE_REPO:-false}"

setup_cache() {
  notrace_function traceable_setup_cache "$@"
}

traceable_setup_cache() {
  if [ "$E2E_DISABLE_CACHE" = "true" ]
  then
    return
  fi
  load_cached_images_from_local_repository
  cache_pulled_images_to_local_repository &
  trap_kill "$!"
  load_failed_images_pull_from_local_repository &
  trap_kill "$!"
}

set_up_private_repository() {
  if ! aws ecr describe-repositories --repository-name "stackgres/operator" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/operator" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/restapi" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/restapi" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/admin-ui" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/admin-ui" 
  fi

  if ! aws ecr describe-repositories --repository-name "stackgres/admin-ui" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/admin-ui" 
  fi  


  export PRIVATE_REPO_URI="$(get_private_repository_uri)"
  export PRIVATE_OPERATOR_IMAGE_NAME="$PRIVATE_REPO_URI/$OPERATOR_IMAGE_NAME"
  export PRIVATE_RESTAPI_IMAGE_NAME="$PRIVATE_REPO_URI/$RESTAPI_IMAGE_NAME"
  export PRIVATE_JOBS_IMAGE_NAME="$PRIVATE_REPO_URI/$JOBS_IMAGE_NAME"
  export PRIVATE_ADMINUI_IMAGE_NAME="$PRIVATE_REPO_URI/$ADMINUI_IMAGE_NAME"

  get_private_repository_password | docker login --username AWS --password-stdin "$PRIVATE_REPO_URI"
  
  docker tag "$OPERATOR_IMAGE_NAME" "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker tag "$RESTAPI_IMAGE_NAME" "$PRIVATE_RESTAPI_IMAGE_NAME"
  docker tag "$JOBS_IMAGE_NAME" "$PRIVATE_JOBS_IMAGE_NAME"
  docker tag "$ADMINUI_IMAGE_NAME" "$PRIVATE_ADMINUI_IMAGE_NAME"

  docker push "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker push "$PRIVATE_RESTAPI_IMAGE_NAME"
  docker push "$JOBS_IMAGE_NAME"
  docker push "$PRIVATE_ADMINUI_IMAGE_NAME"  

  if kubectl get namespace "$OPERATOR_NAMESPACE" > /dev/null
  then  
    kubectl get secret -n "$OPERATOR_NAMESPACE" regcred > /dev/null && kubectl delete secret -n "$OPERATOR_NAMESPACE" regcred
    kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" regcred \
      --docker-server="$PRIVATE_REPO_URI" \
      --docker-username="AWS" \
      --docker-password="$(get_private_repository_password)"
  else
    kubectl create namespace "$OPERATOR_NAMESPACE"
    kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" regcred \
    --docker-server="$PRIVATE_REPO_URI" \
    --docker-username="AWS" \
    --docker-password="$(get_private_repository_password)"
  fi

  if kubectl get serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-operator > /dev/null
  then
    kubectl delete serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-operator
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stackgres-operator
  namespace: $OPERATOR_NAMESPACE
imagePullSecrets:
- name: regcred
EOF
  fi

  if kubectl get serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-restapi > /dev/null
  then
    kubectl delete serviceaccount -n "$OPERATOR_NAMESPACE" stackgres-restapi
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stackgres-restapi
  namespace: $OPERATOR_NAMESPACE
imagePullSecrets:
- name: regcred
EOF
  fi

}

get_private_repository_uri() {
  local AWS_ACCOUNT_ID AWS_REGION
  AWS_ACCOUNT_ID="$(aws --output=text sts get-caller-identity | awk '{print $1}')"
  AWS_REGION="$(aws configure get region)"

  echo "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
}

get_private_repository_password() {
  echo "$(aws ecr get-login-password)"
}

load_cached_images_from_local_repository() {
  echo "Loading cached images from local repository"
  if [ ! -f "$E2E_PULLED_IMAGES_PATH" ]
  then
    touch "$E2E_PULLED_IMAGES_PATH"
  fi
  cat "$E2E_PULLED_IMAGES_PATH" \
    | grep -v ":$OPERATOR_PUBLIC_REGISTRY$OPERATOR_PUBLIC_REGISTRY_PATH" \
    | if [ "$OPERATOR_PUBLIC_REGISTRY" = docker.io ]
      then
        grep -v ":${OPERATOR_PUBLIC_REGISTRY_PATH#/}"
      fi \
    | grep -v ":$COMPONENT_PUBLIC_REGISTRY$COMPONENT_PUBLIC_REGISTRY_PATH" \
    | if [ "$COMPONENT_PUBLIC_REGISTRY" = docker.io ]
      then
        grep -v ":${COMPONENT_PUBLIC_REGISTRY_PATH#/}"
      fi \
    | cut -d : -f 2-3 | sort | uniq \
    | xargs_parallel_shell % "$E2E_PATH/e2e" load_cached_image_from_local_repository '%'
}

load_cached_image_from_local_repository() {
  if docker image inspect "$1" >/dev/null 2>&1
  then
    try_function load_image_k8s "$1"
    if ! "$RESULT"
    then
      echo "Loading image $IMAGE_NAME to k8s failed!"
    fi
  else
    echo "Image $1 not found in cache!"
  fi
}

cache_pulled_images_to_local_repository() {
  echo "Looking for pulled images to cache to local repository"
  if [ ! -f "$E2E_PULLED_IMAGES_PATH" ]
  then
    touch "$E2E_PULLED_IMAGES_PATH"
  fi
  event_watch \
    | stdbuf -o0 grep '\sSuccessfully pulled image "[^"]\+"' \
    | stdbuf -o0 sed 's/^.*\sSuccessfully pulled image "\([^"]\+\)".*$/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected pulled image $IMAGE_NAME to k8s env $E2E_ENV"
        if [ "$(grep -F "$IMAGE_NAME" "$E2E_PULLED_IMAGES_PATH" \
          | sort | tail -n 1 | cut -d : -f 1 | grep '\d+' || echo 0)" \
          -lt "$(($(date +%s)-30))" ]
        then
          echo "Pulling image $IMAGE_NAME to cache"
          if docker pull -q "$IMAGE_NAME"
          then
            echo "$(date +%s):$IMAGE_NAME" >> "$E2E_PULLED_IMAGES_PATH"
          else
            echo "Pulling image $IMAGE_NAME to cache failed!"
          fi
        fi
      done
      )
}

load_failed_images_pull_from_local_repository() {
  echo "Looking for failed images pull to load from local repository"
  event_watch \
    | stdbuf -o0 grep '\sFailed to pull image "[^"]\+"' \
    | stdbuf -o0 sed 's/^.*\sFailed to pull image "\([^"]\+\)".*$/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected failed to pull image $IMAGE_NAME to k8s env $E2E_ENV"
        if docker image inspect "$IMAGE_NAME" >/dev/null 2>&1
        then
          load_image_k8s "$IMAGE_NAME"
        else
          echo "Image $IMAGE_NAME not found in cache!"
        fi
      done
      )
}

docker_pull() {
  local IMAGE_NAME="$1"
  local MAPPED_IMAGE_NAME="$(printf '%s' "$IMAGE_NAME" | eval "$(
    printf '%s\n' "$E2E_IMAGE_MAP" | tr ' ' '\n' \
      | grep -v '^$' | sed 's/=/#/g' \
      | {
        printf 'cat'
        while read -r SED_EXPR
        do
          printf " | sed 's#%s#'" "$SED_EXPR"
        done
        }
    )")"
  if [ "$MAPPED_IMAGE_NAME" != "$IMAGE_NAME" ]
  then
    echo "Using $MAPPED_IMAGE_NAME as $IMAGE_NAME"
  fi
  docker pull -q "$MAPPED_IMAGE_NAME"
  if [ "$K8S_USE_INTERNAL_REPOSITORY" = true ]
  then
    pull_image_k8s "$MAPPED_IMAGE_NAME"
  fi
  if [ "$MAPPED_IMAGE_NAME" != "$IMAGE_NAME" ]
  then
    docker_tag "$MAPPED_IMAGE_NAME" "$IMAGE_NAME"
  fi
}

docker_push() {
  local IMAGE_NAME="$1"
  docker push -q "$IMAGE_NAME"
}

docker_tag() {
  docker_local_tag "$1" "$2"
  if [ "$K8S_USE_INTERNAL_REPOSITORY" = true ]
  then
    tag_image_k8s "$1" "$2"
  fi
}

docker_local_tag() {
  docker tag "$1" "$2"
}
