#!/bin/sh

export E2E_ENV="${E2E_ENV:-kind}"
export KUBECONFIG="${KUBECONFIG:-$HOME/.kube/config}"
export DEFAULT_K8S_VERSION="1.16.15"
export K8S_VERSION="${K8S_VERSION:-$DEFAULT_K8S_VERSION}"
export KUBERNETES_VERSION_NUMBER

e2e_add_source "envs/$E2E_ENV"

setup_k8s() {
  mkdir -p "$TARGET_PATH/logs"

  if [ "$E2E_SKIP_SETUP" = true ]
  then
    return
  fi

  if [ "$K8S_REUSE" != true ]
  then
    reset_k8s
  else
    reuse_k8s
  fi

  echo "Kubernetes version set is $K8S_VERSION (on $E2E_ENV environment) [kubectl:$(kubectl version | head -n 1 | cut -d , -f 3 | cut -d '"' -f 2) kubernetes:$(kubectl version | tail -n 1 | cut -d , -f 3 | cut -d '"' -f 2)]."
  echo
  get_k8s_env_version

  KUBERNETES_VERSION_NUMBER="$(kubectl version -o json 2>/dev/null)"
  KUBERNETES_VERSION_NUMBER="$(printf '%s' "$KUBERNETES_VERSION_NUMBER" \
    | jq '(.serverVersion.major | tonumber) * 100 + (.serverVersion.minor | tonumber)')"
}

create_namespace_if_not_exists() {
  if ! kubectl get namespace "$1" > /dev/null
  then
    kubectl create namespace "$1"
  fi
}

delete_namespace_if_exists() {
  local NAMESPACE="$1"

  if kubectl get namespaces "$NAMESPACE" > /dev/null 2>&1
  then
    kubectl delete namespace "$NAMESPACE"
  fi
}
