#!/bin/sh

K8S_GKE_NAME="${K8S_GKE_NAME:-stackgres-e2e}"
K8S_VERSION="${K8S_VERSION:-1.14.10-gke.50}"
if [ "$K8S_VERSION" = "$DEFAULT_K8S_VERSION" ]
then
  >&2 echo "Warning: using kubernetes version 1.13.11 since e2e default $DEFAULT_K8S_VERSION is not available for gke"
  K8S_VERSION=1.14.10-gke.50
fi
K8S_GKE_REGION="${K8S_GKE_REGION:-us-west1}"
K8S_GKE_NODE_LOCATIONS="${K8S_GKE_NODE_LOCATIONS:-us-west1-a,us-west1-b,us-west1-c}"
K8S_GKE_MACHINE_TYPE="${K8S_GKE_MACHINE_TYPE:-n1-standard-1}"
K8S_GKE_DISK_SIZE="${K8S_GKE_DISK_SIZE:-20}"
K8S_GKE_PROJECT="${K8S_GKE_PROJECT:-default}"
K8S_GKE_OPTS="$K8S_GKE_OPTS"
K8S_GKE_SERVICEACCOUNT="${K8S_GKE_SERVICEACCOUNT:-stackgres-e2e}"
K8S_GKE_ACCOUNT_EMAIL=$K8S_GKE_SERVICEACCOUNT@$K8S_GKE_PROJECT.iam.gserviceaccount.com
K8S_GKE_ACCOUNT_MEMBER="serviceAccount:$K8S_GKE_ACCOUNT_EMAIL"

export E2E_USE_INTERMIDIATE_PRIVATE_REPO=true

export K8S_GKE_NAME K8S_VERSION K8S_GKE_REGION K8S_GKE_NODE_LOCATIONS K8S_GKE_MACHINE_TYPE K8S_GKE_DISK_SIZE K8S_GKE_PROJECT K8S_GKE_OPTS USE_INTERMIDIATE_PRIVATE_REPO

get_k8s_env_version() {
  echo "gcloud version $(gcloud version | tr '\n' ' ')"
  echo
}

reuse_k8s() {
  if ! gcloud -q beta container --project "$K8S_GKE_PROJECT" clusters describe "$K8S_GKE_NAME" --region "$K8S_GKE_REGION" 2>&1 \
    | grep -q "status: RUNNING"
  then
    echo "Can not reuse gke environment $K8S_GKE_NAME"
    exit 1
  fi

  echo "Reusing gke environment $K8S_GKE_NAME"

  gcloud -q beta container --project "$K8S_GKE_PROJECT" clusters get-credentials "$K8S_GKE_NAME" --region "$K8S_GKE_REGION"
}

reset_k8s() {
  echo "Setting up gke environment $K8S_GKE_NAME..."

  delete_k8s
  gcloud -q beta container --project "$K8S_GKE_PROJECT" clusters create "$K8S_GKE_NAME" \
    --region "$K8S_GKE_REGION" \
    --node-locations "$K8S_GKE_NODE_LOCATIONS" \
    --machine-type "$K8S_GKE_MACHINE_TYPE" \
    --disk-size "$K8S_GKE_DISK_SIZE" \
    --num-nodes 1 \
    --cluster-version "$K8S_VERSION" \
    --no-enable-autoupgrade \
    --workload-pool="$K8S_GKE_PROJECT.svc.id.goog" \
    $K8S_GKE_OPTS

  if [ ! -f "$TARGET_PATH/gke-service-account.json" ]
  then
    gcloud --project "$K8S_GKE_PROJECT" iam service-accounts create "$K8S_GKE_SERVICEACCOUNT" || true

    gcloud projects add-iam-policy-binding "$K8S_GKE_PROJECT" --member="$K8S_GKE_ACCOUNT_MEMBER" --role=roles/storage.admin || true

    gcloud iam service-accounts keys create "$TARGET_PATH/gke-service-account.json" --iam-account "$K8S_GKE_ACCOUNT_EMAIL"
  fi

  echo "...done"
}

delete_k8s() {
  echo "Deleting gke environment $K8S_GKE_NAME..."

  if gcloud -q beta container --project "$K8S_GKE_PROJECT" clusters describe "$K8S_GKE_NAME" --region "$K8S_GKE_REGION" 2>&1 \
    | grep -q "status: RUNNING"
  then
    gcloud -q beta container --project "$K8S_GKE_PROJECT" clusters delete "$K8S_GKE_NAME" --region "$K8S_GKE_REGION" || true
  fi
  gcloud -q compute disks list --project "$K8S_GKE_PROJECT" --filter "zone:($K8S_GKE_REGION)" \
    | tail -n+2 | sed 's/ \+/|/g' | cut -d '|' -f 1-2 \
    | grep '^gke-'"$K8S_GKE_NAME"'-[0-9a-f]\{4\}-pvc-[0-9a-f]\{8\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{12\}|' \
    | xargs -r -n 1 -I % "$SHELL" $SHELL_XTRACE -ec "gcloud -q compute disks delete --project '$K8S_GKE_PROJECT' --zone \"\$(echo '%' | cut -d '|' -f 2)\" \"\$(echo '%' | cut -d '|' -f 1)\""

  echo "...done"
}

load_image_k8s() {
  echo "Cannot load images directly to k8s in a gke environment."
  exit 1
}

operator_pull_policy() {
  echo Always
}

excluded_mutatingwebhookconfigurations() {
  echo ".*.gke.io"
  echo ".*.google.com"
}

excluded_validatingwebhookconfigurations() {
  echo ".*.gke.io"
  echo ".*.google.com"
}

excluded_clusterrolebindings() {
  echo "configconnector-operator-rolebinding"
  echo "cluster-autoscaler"
  echo "master-monitoring-role-binding"
  echo "event-exporter-rb"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "gce:gke-metadata-server-reader"
  echo "stackdriver:metadata-agent"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "kubelet-bootstrap-certificate-bootstrap"
  echo "npd-binding"
  echo "stackdriver:fluentd-gke"
  echo "kube-apiserver-kubelet-api-admin"
  echo "metrics-server:system:auth-delegator"
  echo "uas-hpa-external-metrics-reader"
  echo "gke-metrics-agent"
  echo "netd"
  echo "kubelet-user-npd-binding"
  echo "gce:cloud-provider"
  echo "cluster-autoscaler-updateinfo"
  echo "kubelet-bootstrap"
  echo "ca-cr"
  echo "kubelet-bootstrap-node-bootstrapper"
  echo "kubelet-cluster-admin"
  echo "cluster-autoscaler-updateinfo"
  echo "netd"
  echo "ca-cr"
  echo "gce:cloud-provider"
  echo "kube-apiserver-kubelet-api-admin"
  echo "uas-hpa-external-metrics-reader"
  echo "gke-metrics-agent"
  echo "event-exporter-rb"
  echo "kubelet-cluster-admin"
  echo "master-monitoring-role-binding"
  echo "npd-binding"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "cluster-autoscaler"
  echo "stackdriver:fluentd-gke"
  echo "kubelet-bootstrap-certificate-bootstrap"
  echo "configconnector-operator-rolebinding"
  echo "kubelet-bootstrap"
  echo "gce:gke-metadata-server-reader"
  echo "kubelet-bootstrap-node-bootstrapper"
  echo "kubelet-user-npd-binding"
  echo "metrics-server:system:auth-delegator"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "stackdriver:metadata-agent"
  echo "ca-cr"
  echo "kubelet-bootstrap"
  echo "kubelet-user-npd-binding"
  echo "kubelet-bootstrap-node-bootstrapper"
  echo "kube-apiserver-kubelet-api-admin"
  echo "kubelet-bootstrap-certificate-bootstrap"
  echo "cluster-autoscaler"
  echo "kubelet-cluster-admin"
  echo "gce:cloud-provider"
  echo "cluster-autoscaler-updateinfo"
  echo "gce:gke-metadata-server-reader"
  echo "metrics-server:system:auth-delegator"
  echo "stackdriver:metadata-agent"
  echo "uas-hpa-external-metrics-reader"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "event-exporter-rb"
  echo "configconnector-operator-rolebinding"
  echo "master-monitoring-role-binding"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "npd-binding"
  echo "stackdriver:fluentd-gke"
  echo "gke-metrics-agent"
  echo "netd"
  echo "cnrm-admin-binding"
  echo "ca-cr"
  echo "cluster-autoscaler-updateinfo"
  echo "cnrm-deletiondefender-binding"
  echo "stackdriver:metadata-agent"
  echo "configconnector-operator-rolebinding"
  echo "cluster-autoscaler"
  echo "master-monitoring-role-binding"
  echo "gke-metrics-agent"
  echo "kubelet-bootstrap-node-bootstrapper"
  echo "gce:cloud-provider"
  echo "metrics-server:system:auth-delegator"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "kube-apiserver-kubelet-api-admin"
  echo "kubelet-user-npd-binding"
  echo "uas-hpa-external-metrics-reader"
  echo "netd"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "cnrm-webhook-binding"
  echo "stackdriver:fluentd-gke"
  echo "cnrm-recorder-binding"
  echo "kubelet-bootstrap-certificate-bootstrap"
  echo "event-exporter-rb"
  echo "npd-binding"
  echo "kubelet-cluster-admin"
  echo "gce:gke-metadata-server-reader"
  echo "kubelet-bootstrap"
}

excluded_clusterroles() {
  echo "external-metrics-reader"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "cluster-autoscaler"
  echo "gce:cloud-provider"
  echo "gke-metrics-agent"
  echo "cloud-provider"
  echo "stackdriver:metadata-agent"
  echo "read-updateinfo"
  echo "kubelet-api-admin"
  echo "netd"
  echo "ca-cr-actor"
  echo "configconnector-operator-manager-role"
  echo "stackdriver:fluentd-gke"
  echo "gce:gke-metadata-server-reader"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "gce:cloud-provider"
  echo "cloud-provider"
  echo "gce:gke-metadata-server-reader"
  echo "gke-metrics-agent"
  echo "kubelet-api-admin"
  echo "read-updateinfo"
  echo "ca-cr-actor"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "configconnector-operator-manager-role"
  echo "stackdriver:fluentd-gke"
  echo "external-metrics-reader"
  echo "gce:beta:kubelet-certificate-rotation"
  echo "netd"
  echo "cluster-autoscaler"
  echo "stackdriver:metadata-agent"
  echo "gce:beta:kubelet-certificate-bootstrap"
  echo "external-metrics-reader"
}

excluded_customresourcedefinitions() {
  echo ".*.google.com"
  echo ".*.gke.io"
  echo ".*.k8s.io"
  echo ".*.kope.io"
}

excluded_podsecuritypolicies() {
  echo "gce.gke-metrics-agent"
}

get_k8s_versions() {
  cat << EOF
1.16.13-gke.1
1.16.9-gke.6
1.16.9-gke.2
1.16.8-gke.15
1.15.12-gke.3
1.15.12-gke.2
1.15.11-gke.17
1.15.11-gke.15
1.15.9-gke.24
1.14.10-gke.42
1.14.10-gke.41
1.14.10-gke.40
1.14.10-gke.37
1.14.10-gke.36
EOF
}
