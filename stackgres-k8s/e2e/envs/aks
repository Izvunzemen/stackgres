#!/bin/sh

K8S_AZ_LOCATION="${K8S_AZ_LOCATION:-northeurope}"
K8S_AZ_RESOURCE_GROUP="${K8S_AZ_RESOURCE_GROUP:-stackgres-e2e}"
K8S_AZ_K8S_NAME="${K8S_AZ_K8S_NAME:-stackgres}"
K8S_VERSION="${K8S_VERSION:-1.15.10}"
K8S_AZ_NODE_SIZE="${K8S_AZ_NODE_SIZE:-Standard_F2}"
K8S_AZ_NODE_COUNT="${K8S_AZ_NODE_COUNT:-3}"
K8S_AZ_REGISTRY="${K8S_AZ_REGISTRY:-stackgrese2e}"
export E2E_USE_INTERMIDIATE_PRIVATE_REPO=true

if [ "$K8S_AZ_NODE_SIZE" = "Standard_F2" ] && [ "$E2E_PARALLELISM" -gt "$K8S_AZ_NODE_COUNT" ]
then
  echo "Warning: to avoid false failures is recommended to match the E2E_PARALLELISM with K8S_AZ_NODE_COUNT"
fi

if [ "$K8S_VERSION" = "$DEFAULT_K8S_VERSION" ]
then
  >&2 echo "Warning: using kubernetes version 1.13.11 since e2e default $DEFAULT_K8S_VERSION is not available for eks"
  K8S_VERSION=1.13.11
fi

set_up_resource_group(){
  RS_EXISTS=$(az group exists --name "$K8S_AZ_RESOURCE_GROUP")
  if [ "$RS_EXISTS" = true ]
  then
    echo "Deleting previous resource group"
    az group delete --name "$K8S_AZ_RESOURCE_GROUP" --yes
  fi
  echo "creating resource group $K8S_AZ_RESOURCE_GROUP"

  az group create --name "$K8S_AZ_RESOURCE_GROUP" --location "$K8S_AZ_LOCATION"
}

reset_k8s() {
  set_up_resource_group

  if [ -z "$SP_APP_ID" ] || [ -z "$SP_PASSWORD" ]
  then
    az aks create --name "$K8S_AZ_K8S_NAME" --resource-group "$K8S_AZ_RESOURCE_GROUP" \
      --kubernetes-version "$K8S_VERSION" --node-count "$K8S_AZ_NODE_COUNT" \
      --node-vm-size "$K8S_AZ_NODE_SIZE" \
      --generate-ssh-keys
  else
    az aks create --name "$K8S_AZ_K8S_NAME" --resource-group "$K8S_AZ_RESOURCE_GROUP" \
      --kubernetes-version "$K8S_VERSION" --node-count "$K8S_AZ_NODE_COUNT" \
      --node-vm-size "$K8S_AZ_NODE_SIZE" \
      --service-principal "$SP_APP_ID" \
      --client-secret "$SP_PASSWORD" \
      --generate-ssh-keys
  fi    

  az aks get-credentials --name "$K8S_AZ_K8S_NAME" --resource-group "$K8S_AZ_RESOURCE_GROUP" --overwrite-existing

  az storage account create --name "$K8S_AZ_K8S_NAME" -g "$K8S_AZ_RESOURCE_GROUP" --sku Standard_LRS
}

reuse_k8s() {
  if az aks show --name "$K8S_AZ_K8S_NAME" --resource-group "$K8S_AZ_RESOURCE_GROUP" > /dev/null
  then
    echo "Reusing aks environment $K8S_AZ_K8S_NAME"
    az aks get-credentials --name "$K8S_AZ_K8S_NAME" --resource-group "$K8S_AZ_RESOURCE_GROUP"
  else
    echo "Cannot resuse ask environment $AWS_NAME"
    reset_k8s
  fi
}

delete_k8s(){
   az group delete --name "$K8S_AZ_RESOURCE_GROUP" --yes
}

load_operator_k8s() {
  echo "Loading operator image $IMAGE_NAME in aks environemnt $K8S_AZ_K8S_NAME..."
  echo "Cannot load images to $K8S_AZ_K8S_NAME.  Using public images :("  
}

operator_pull_policy() {
  echo Always
}

get_k8s_versions() {
  az aks get-versions --location "$K8S_AZ_LOCATION" | jq '.orchestrators[].orchestratorVersion' -r
}
