#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY="$(ramdom_string)"
  NODE_LABEL_VALUE="$(ramdom_string)"

  kubectl create namespace "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set-string cluster.distributedLogs.sgDistributedLogs=distributedlogs \
    --set distributedLogs.enabled=true \
    --set-string "distributedLogs.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"
}

e2e_test() {
  run_test "Creating a cluster with distributed logs services enabled using default parameters" distributedlogs_services_enabled_by_default

  run_test "Creating a cluster with distributed logs services disabled" distributedlogs_services_full_enabled

  run_test "Creating a cluster with services enabled with specific annotations" services_annotations
}

distributedlogs_services_enabled_by_default(){
  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.primary.type }}")" \
    = "ClusterIP" ]
  then
    echo "SUCCESS. Distributed logs primary postgres service was created correctly and with type ClusterIP by default"
  else
    echo "FAIL. Distributed logs primary postgres service was not created correctly and with type ClusterIP by default"
    return 1
  fi

  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.replicas.enabled }}")" \
    = "true" ]
  then
    echo "SUCCESS. Distributed logs replicas are enabled"
  else
    echo "FAIL. Distributed logs replicas are not enabled"
    return 1
  fi

  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.replicas.type }}")" \
    = "ClusterIP" ]
  then
    echo "SUCCESS. Distributed logs posgtres service replicas was created correctly and with type ClusterIP by default"
  else
    echo "FAIL. Distributed logs posgtres service replicas was not created correctly and with type ClusterIP by default"
    return 1
  fi

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

distributedlogs_services_full_enabled(){
  NODE_LABEL_KEY="$(ramdom_string)"
  NODE_LABEL_VALUE="$(ramdom_string)"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set-string cluster.distributedLogs.sgDistributedLogs=distributedlogs \
    --set distributedLogs.enabled=true \
    --set distributedLogs.postgresServices.primary.type="NodePort" \
    --set distributedLogs.postgresServices.replicas.enabled="true" \
    --set distributedLogs.postgresServices.replicas.type="NodePort" \
    --set-string "distributedLogs.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"

  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.primary.type }}")" \
    = "NodePort" ]
  then
    echo "SUCCESS. Distributed logs primary service was created correctly and with type NodePort"
  else
    echo "FAIL. Distributed logs primary service was not created with correct type NodePort"
    return 1
  fi

  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.replicas.enabled }}")" \
    = "true" ]
  then
    echo "SUCCESS. Distributed logs replicas are enabled"
  else
    echo "FAIL. Distributed logs replicas are not enabled"
    return 1
  fi

  if [ "$(kubectl get sgdistributedlogs -n "$CLUSTER_NAMESPACE" \
    --template "{{ (index .items 0).spec.postgresServices.replicas.type }}")" \
    = "NodePort" ]
  then
    echo "SUCCESS. Distributed logs replica has the type NodePort"
  else
    echo "FAIL. Distributed logs replica has not the type NodePort"
    return 1
  fi

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

services_annotations(){
  local KEY_ANNOTATION="sgdistributedlog-key"
  local PRIMARY_ANNOTATION_VALUE=$(ramdom_string)
  local REPLICA_ANNOTATION_RANDOM_VALUE=$(ramdom_string)
  
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set-string cluster.distributedLogs.sgDistributedLogs=distributedlogs \
    --set distributedLogs.enabled=true \
    --set distributedLogs.postgresServices.replicas.enabled="true" \
    --set distributedLogs.postgresServices.primary.annotations."$KEY_ANNOTATION"="$PRIMARY_ANNOTATION_VALUE" \
    --set distributedLogs.postgresServices.replicas.annotations."$KEY_ANNOTATION"="$REPLICA_ANNOTATION_RANDOM_VALUE"

  check_distributed_logs_annotation "primary" "$KEY_ANNOTATION" "$PRIMARY_ANNOTATION_VALUE"

  check_distributed_logs_annotation "replicas" "$KEY_ANNOTATION" "$REPLICA_ANNOTATION_RANDOM_VALUE"

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}
