#!/bin/sh

e2e_test_install() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

e2e_test() {
  run_test "Checking that repack is working" check_repack_is_working

  run_test "Checking that repack is working using API" check_repack_is_working_using_api

  run_test "Checking that repack no order is working" check_repack_no_order_is_working

  run_test "Checking that repack wait timeout is working" check_repack_wait_timeout_is_working

  run_test "Checking that repack no kill backend is working" check_repack_no_kill_backend_is_working

  run_test "Checking that repack no analyze is working" check_repack_no_analyze_is_working

  run_test "Checking that repack exclude extension is working" check_repack_exclude_extension_is_working

  run_test "Checking that repack is working for specific databases" check_repack_specific_databases_is_working

  run_test "Checking that repack timeout works correctly" check_repack_timed_out
}

check_repack_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
EOF

  DBOPS_CR="$(kubectl get sgdbops.stackgres.io -n "$CLUSTER_NAMESPACE" "repack" -o json \
    | jq 'del(.metadata.creationTimestamp) | del(.metadata.generation)
      | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')"
  
  echo_raw "$DBOPS_CR" > "$LOG_PATH/dbops-cr.json"

  DBOPS=$(cat "$LOG_PATH/dbops-cr.json" \
    | jq 'del(.apiVersion) | del(.kind) | del(.status) | del(.metadata.annotations)' )

  echo_raw "$DBOPS" > "$LOG_PATH/dbops.json"

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_is_working_using_api() {
  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi

  check_repack

  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X DELETE')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

check_repack_no_order_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    noOrder: true
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_wait_timeout_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    waitTimeout: PT1S
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_no_kill_backend_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    noKillBackend: true
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_no_analyze_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    noAnalyze: true
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_exclude_extension_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    excludeExtension: true
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack_specific_databases_is_working() {
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'template1' AND pid != pg_backend_pid()"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "CREATE DATABASE test1"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "CREATE DATABASE test2;"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
     -d "test1" -q "CREATE EXTENSION pg_repack"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
     -d "test2" -q "CREATE EXTENSION pg_repack"
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  repack:
    databases:
    - name: test1
      noOrder: true
    - name: test2
      noKillBackend: true
EOF

  check_repack

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack
}

check_repack() {
  if kubectl wait --timeout "${E2E_TIMEOUT}s" -n "$CLUSTER_NAMESPACE" sgdbops "repack" \
    --for condition=Completed
  then
    echo "SUCCESS. repack completed."
  else
    echo "FAILED. repack failed."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. repack job was not removed after completion."
  else
    echo "FAILED. repack job was removed after completion."
    return 1
  fi
}

check_repack_timed_out() {
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
     -q "CREATE TABLE public.test(i int PRIMARY KEY)"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
     -q "$(cat << 'EOF'
DO $$BEGIN
  LOCK TABLE public.test;
  PERFORM pg_sleep(600);
END$$;
EOF
      )" &
  trap_kill "$!"
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: repack
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: repack
  timeout: PT1S
EOF

  if kubectl wait --timeout "${E2E_TIMEOUT}s" -n "$CLUSTER_NAMESPACE" sgdbops "repack" \
    --for condition=Failed
  then
    echo "SUCCESS. repack failed."
  else
    echo "FAILED. repack did not fail."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. repack job was not removed after failure."
  else
    echo "FAILED. repack job was removed after failure."
    return 1
  fi

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" repack

  if wait_until eval '[ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 0 ]'
  then
    echo "SUCCESS. repack job was removed after sgdbops was removed."
  else
    echo "FAILED. repack job was not removed after sgdbops was removed."
    return 1
  fi
}
