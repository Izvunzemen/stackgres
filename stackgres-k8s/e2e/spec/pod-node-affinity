#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY=$(ramdom_string)
  NODE_LABEL_VALUE=$(ramdom_string)
  NODE_AFFINITY_VALUE=$(ramdom_string)
  NODE_AFFINITY_OPERATOR=$(ramdom_string)
  NODE_AFFINITY_KEY=$(ramdom_string)

  kubectl create namespace "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set-string "cluster.pods.scheduling.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.0.matchExpressions.0.key=$NODE_AFFINITY_KEY" \
    --set-string "cluster.pods.scheduling.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.0.matchExpressions.0.operator=$NODE_AFFINITY_OPERATOR" \
    --set-string "cluster.pods.scheduling.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.0.matchExpressions.0.values.0=$NODE_AFFINITY_VALUE" \
    --set-string "cluster.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.0.weight=1"\
    --set-string "cluster.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.0.preference.matchExpressions.0.key=$NODE_AFFINITY_KEY" \
    --set-string "cluster.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.0.preference.matchExpressions.0.operator=$NODE_AFFINITY_OPERATOR" \
    --set-string "cluster.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.0.preference.matchExpressions.0.values.0=$NODE_AFFINITY_VALUE"
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "sgcluster has specified node affinity required during scheduling" check_sgcluster_has_node_affinity_required_during_scheduling
  run_test "sgcluster's StatefulSet has specified required node affinity" check_sts_has_node_affinity_required_during_scheduling

  run_test "sgcluster has specified node affinity preferred during scheduling" check_sgcluster_has_node_affinity_preferred_during_scheduling
  run_test "sgcluster's StatefulSet has specified preferred node affinity" check_sts_has_node_affinity_preferred_during_scheduling
}

assert_sts_node_affinity_required_match_property(){
  PROPERTY=$1
  PROPERTY_VALUE=$2

  case $PROPERTY in

    values)
      TEMPLATE="{{ (index (index (index .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms 0).matchExpressions 0).values 0) }}"        
      ;;
  
    *)
      TEMPLATE="{{ (index (index .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms 0).matchExpressions 0).$PROPERTY }}"          
      ;;
  esac
  echo "Waiting for sts with node affinity "$CLUSTER_NAMESPACE" "$CLUSTER_NAME""
  if [ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "$TEMPLATE")" \
    = "$PROPERTY_VALUE" ]
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity required during execution $PROPERTY match"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity required during execution $PROPERTY match"
    return 1
  fi
}

assert_sgcluster_node_affinity_required_match_property(){
  PROPERTY=$1
  PROPERTY_VALUE=$2

  case $PROPERTY in

    values)
      TEMPLATE="{{ (index (index (index .spec.pods.scheduling.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms 0).matchExpressions 0).values 0) }}"        
      ;;
  
    *)
      TEMPLATE="{{ (index (index .spec.pods.scheduling.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms 0).matchExpressions 0).$PROPERTY }}"          
      ;;
  esac

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "$TEMPLATE")" \
    = "$PROPERTY_VALUE" ]
  then
    echo "SUCCESS. sgcluster has the configured node affinity required during execution $PROPERTY match"
  else
    echo "FAIL. sgcluster has not the configured node affinity required during execution $PROPERTY match"
    return 1
  fi
}

check_sgcluster_has_node_affinity_required_during_scheduling() {
  assert_sgcluster_node_affinity_required_match_property "key" $NODE_AFFINITY_KEY
  assert_sgcluster_node_affinity_required_match_property "operator" $NODE_AFFINITY_OPERATOR
  assert_sgcluster_node_affinity_required_match_property "values" $NODE_AFFINITY_VALUE
}

check_sgcluster_has_node_affinity_preferred_during_scheduling(){
  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index (index .spec.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).key }}")" \
    = "$NODE_AFFINITY_KEY" ]
  then
    echo "SUCCESS. sgcluster has the configured node affinity preferred during execution key match"
  else
    echo "FAIL. sgcluster has not the configured node affinity preferred during execution key match"
    return 1
  fi  

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index (index .spec.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).operator }}")" \
    = "$NODE_AFFINITY_OPERATOR" ]
  then
    echo "SUCCESS. sgcluster has the configured node affinity preferred during execution operator match"
  else
    echo "FAIL. sgcluster has not the configured node affinity preferred during execution operator match"
    return 1
  fi  

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index (index (index .spec.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).values 0) }}")" \
    = "$NODE_AFFINITY_VALUE" ]
  then
    echo "SUCCESS. sgcluster has the configured node affinity preferred during execution values match"
  else
    echo "FAIL. sgcluster has not the configured node affinity preferred during execution values match"
    return 1
  fi  

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index .spec.pods.scheduling.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).weight }}")" \
    = "1" ]
  then
    echo "SUCCESS. sgcluster has the configured node affinity preferred during execution weight property"
  else
    echo "FAIL. sgcluster has not the configured node affinity preferred during execution weight property"
    return 1
  fi
}

check_sts_has_node_affinity_required_during_scheduling(){  
  echo "Waiting for sts with node affinity "$CLUSTER_NAMESPACE" "$CLUSTER_NAME""
  try_function wait_until eval "$(cat << 'EOF'
[ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
  --template "{{ (index (index .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms 0).matchExpressions 0).key }}")" \
  = "$NODE_AFFINITY_KEY" ]
EOF
    )"
  if "$RESULT"
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity required during execution key match"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity required during execution key match"
    return 1
  fi

#  assert_sts_node_affinity_required_match_property "key" $NODE_AFFINITY_KEY
  assert_sts_node_affinity_required_match_property "operator" $NODE_AFFINITY_OPERATOR
  assert_sts_node_affinity_required_match_property "values" $NODE_AFFINITY_VALUE
}

check_sts_has_node_affinity_preferred_during_scheduling(){
  echo "Waiting for sts with preferred node affinity "$CLUSTER_NAMESPACE" "$CLUSTER_NAME""
  try_function wait_until eval "$(cat << 'EOF'
[ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
  --template "{{ (index (index .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).key }}")" \
  = "$NODE_AFFINITY_KEY" ]
EOF
    )"
  if "$RESULT"
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity preferred during execution key match"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity preferred during execution key match"
    return 1
  fi

  if [ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index (index .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).operator }}")" \
    = "$NODE_AFFINITY_OPERATOR" ]
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity preferred during execution operator match"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity preferred during execution operator match"
    return 1
  fi

  if [ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index (index (index .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).preference.matchExpressions 0).values 0) }}")" \
    = "$NODE_AFFINITY_VALUE" ]
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity preferred during execution value match"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity preferred during execution value match"
    return 1
  fi

  if [ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution 0).weight }}")" \
    = "1" ]
  then
    echo "SUCCESS. sgcluster's StatefulSet has the configured node affinity preferred during execution weight property"
  else
    echo "FAIL. sgcluster's StatefulSet has not the configured node affinity preferred during execution weight property"
    return 1
  fi
}