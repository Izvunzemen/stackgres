#!/bin/sh

. "$SPEC_PATH/abstract/patroni"

e2e_test_extra_hash() {
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/abstract/patroni")"
}

e2e_test_install() {
  kubectl create namespace "$CLUSTER_NAMESPACE"
  kubectl get secret -n "$OPERATOR_NAMESPACE" stackgres-operator-certs -o json \
    | jq ".metadata.namespace = \"$CLUSTER_NAMESPACE\" | .metadata.name = \"ssl-postgres\"" \
    | kubectl create -f -
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --set cluster.postgres.ssl.enabled=false

  wait_pods_running "$CLUSTER_NAMESPACE" 2
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Checking that SSL is generated and is possible to connect using SSL is working" generated_service_ssl_check

  run_test "Checking that is possible to connect using SSL is working" service_ssl_check

  run_test "Checking that is possible to connect not using SSL is working" service_no_ssl_check
}

generated_service_ssl_check() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --set cluster.postgres.ssl.enabled=true \
    --set cluster.postgres.ssl.certificateSecretKeySelector=null \
    --set cluster.postgres.ssl.privateKeySecretKeySelector=null

  RESPONSE_PRIMARY="$(wait_until run_query -m require -h "$CLUSTER_NAME"-primary -i 1 -p 5432)"

  if [ "$RESPONSE_PRIMARY" = "1" ]
  then
    RESPONSE_REPLICA="$(run_query -m require -h "$CLUSTER_NAME"-replicas -i 0 -p 5432)"
    if [ "$RESPONSE_REPLICA" = "1" ]
    then
      echo "SUCCESS: Connections are possible using SSL"
    else
      echo "FAIL: Cannot connect to replica db using SSL"
      return 1
    fi
  else
    echo "FAIL: Cannot connect to primary db using SSL"
    return 1
  fi
}

service_ssl_check() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --set cluster.postgres.ssl.enabled=true \
    --set-string cluster.postgres.ssl.certificateSecretKeySelector.name=ssl-postgres \
    --set-string cluster.postgres.ssl.certificateSecretKeySelector.key=tls.crt \
    --set-string cluster.postgres.ssl.privateKeySecretKeySelector.name=ssl-postgres \
    --set-string cluster.postgres.ssl.privateKeySecretKeySelector.key=tls.key

  wait_until eval '[ "$(kubectl get secret -n "$CLUSTER_NAME" ssl-postgres --template "{{ .data \"tls.crt\" }}")" = \
    "$(kubectl get secret -n "$CLUSTER_NAME" ssl-ssl --template "{{ .data \"tls.crt\" }}")" ]'
  wait_until eval '[ "$(kubectl get secret -n "$CLUSTER_NAME" ssl-postgres --template "{{ .data \"tls.key\" }}")" = \
    "$(kubectl get secret -n "$CLUSTER_NAME" ssl-ssl --template "{{ .data \"tls.key\" }}")" ]'

  RESPONSE_PRIMARY="$(run_query -m require -h "$CLUSTER_NAME"-primary -i 1 -p 5432)"

  if [ "$RESPONSE_PRIMARY" = "1" ]
  then
    RESPONSE_REPLICA="$(run_query -m require -h "$CLUSTER_NAME"-replicas -i 0 -p 5432)"
    if [ "$RESPONSE_REPLICA" = "1" ]
    then
      echo "SUCCESS: Connections are possible using SSL"
    else
      echo "FAIL: Cannot connect to replica db using SSL"
      return 1
    fi
  else
    echo "FAIL: Cannot connect to primary db using SSL"
    return 1
  fi
}

service_no_ssl_check() {
  RESPONSE_PRIMARY="$(run_query -m disable -h "$CLUSTER_NAME"-primary -i 1 -p 5432)"

  if [ "$RESPONSE_PRIMARY" = "1" ]
  then
    RESPONSE_REPLICA="$(run_query -m disable -h "$CLUSTER_NAME"-replicas -i 0 -p 5432)"
    if [ "$RESPONSE_REPLICA" = "1" ]
    then
      echo "SUCCESS: Connections are possible without SSL"
    else
      echo "FAIL: Cannot connect to replica db without SSL"
      return 1
    fi
  else
    echo "FAIL: Cannot connect to primary db without SSL"
    return 1
  fi
}
