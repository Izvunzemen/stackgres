#!/bin/sh

. "$SPEC_PATH/abstract/dbops-major-version-upgrade"

e2e_test() {
  run_test "Checking that major version upgrade is working" check_major_version_upgrade_is_working

  run_test "Checking that major version upgrade is working using API" check_major_version_upgrade_is_working_using_api

  run_test "Checking that major version upgrade check is working" check_major_version_upgrade_check_is_working
}

check_major_version_upgrade_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: major-version-upgrade
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: majorVersionUpgrade
EOF

  DBOPS_CR="$(kubectl get sgdbops.stackgres.io -n "$CLUSTER_NAMESPACE" "major-version-upgrade" -o json \
    | jq 'del(.metadata.creationTimestamp) | del(.metadata.generation)
      | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')"
  
  echo_raw "$DBOPS_CR" > "$LOG_PATH/dbops-cr.json"

  DBOPS=$(cat "$LOG_PATH/dbops-cr.json" \
    | jq 'del(.apiVersion) | del(.kind) | del(.status) | del(.metadata.annotations)' )

  echo_raw "$DBOPS" > "$LOG_PATH/dbops.json"

  check_major_version_upgrade

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" major-version-upgrade
}

check_major_version_upgrade_is_working_using_api() {
  reset_cluster

  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi

  check_major_version_upgrade

  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X DELETE')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

check_major_version_upgrade_check_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: major-version-upgrade
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: majorVersionUpgrade
  majorVersionUpgrade:
    check: true
EOF

  check_major_version_upgrade

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" major-version-upgrade
}
