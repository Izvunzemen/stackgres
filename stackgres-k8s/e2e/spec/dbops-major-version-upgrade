#!/bin/sh

. "$SPEC_PATH/abstract/dbops-major-version-upgrade"

e2e_test() {
  run_test "Checking that major version upgrade is working" check_major_version_upgrade_is_working

  run_test "Checking that major version upgrade check is working" check_major_version_upgrade_check_is_working
}

check_major_version_upgrade_is_working() {
  reset_cluster

  install_minio

  wait_pods_running "$CLUSTER_NAMESPACE" 3

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string cluster.postgres.version="$E2E_MAJOR_SOURCE_POSTGRES_VERSION" \
    --set configurations.backupconfig.create=true \
    --set configurations.backupconfig.baseBackups.retention=2 \
    --set-string configurations.backupconfig.baseBackups.cronSchedule='0 5 31 2 *' \
    --set-string cluster.configurations.sgBackupConfig=backupconf

  local BACKUP_NAME_PRE BACKUP_NAME_POST
  BACKUP_NAME_PRE="$(get_sgbackup_name "$CLUSTER_NAME-pre")"
  BACKUP_NAME_POST="$(get_sgbackup_name "$CLUSTER_NAME-post")"

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE"
  name: "$BACKUP_NAME_POST"
spec:
  sgCluster: "$CLUSTER_NAME"
  managedLifecycle: false
EOF

  if wait_until eval '[ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME_POST" \
    --template "{{ .status.process.status }}")" = Completed ]'
  then
    echo "SUCCESS. The backup has completed"
  else
    echo "FAIL. The backup has failed"
    return 1
  fi

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: majorVersionUpgrade
  majorVersionUpgrade:
    postgresVersion: "$E2E_MAJOR_TARGET_POSTGRES_VERSION"
    sgPostgresConfig: postgresconf-for-major-version-upgrade
EOF

  wait_until eval '[ "$(kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME" \
    --template "{{ .status.opRetries }}")" = "0" ]'
  kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME" -o yaml > "$LOG_PATH/sgdbops.yaml"
  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
  kubectl create -f "$LOG_PATH/sgdbops.yaml"

  if [ "$(kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME" --template "{{ .spec.majorVersionUpgrade.backupPath }}")" \
    = "sgbackups.stackgres.io/$CLUSTER_NAMESPACE/$CLUSTER_NAME/${E2E_MAJOR_TARGET_POSTGRES_VERSION%.*}" ]
  then
    echo "SUCCESS. DbOps path was added to spec"
  else
    echo "FAIL. DbOps path was not added to spec"
    return 1
  fi

  check_major_version_upgrade

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --template '{{ .spec.configurations.backupPath }}')" \
    = "sgbackups.stackgres.io/$CLUSTER_NAMESPACE/$CLUSTER_NAME/${E2E_MAJOR_TARGET_POSTGRES_VERSION%.*}" ]
  then
    echo "SUCCESS. Backup path was added to cluster backup configuration after major version upgrade"
  else
    echo "FAIL. Backup path was not added to cluster backup configuration after major version upgrade"
    return 1
  fi

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE"
  name: "$BACKUP_NAME_PRE"
spec:
  sgCluster: "$CLUSTER_NAME"
  managedLifecycle: false
EOF

  if wait_until eval '[ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME_PRE" \
    --template "{{ .status.process.status }}")" = Completed ]'
  then
    echo "SUCCESS. The backup has completed"
  else
    echo "FAIL. The backup has failed"
    return 1
  fi

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
  helm delete --namespace "$MINIO_NAMESPACE" "$MINIO_NAME"
}

check_major_version_upgrade_check_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: majorVersionUpgrade
  majorVersionUpgrade:
    postgresVersion: "$E2E_MAJOR_TARGET_POSTGRES_VERSION"
    sgPostgresConfig: postgresconf-for-major-version-upgrade
    check: true
EOF

  check_major_version_upgrade

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}
