#!/bin/sh

. "$SPEC_PATH/dbops-security-upgrade"

e2e_test_extra_hash() {
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "stackgres-k8s/install/operator-sdk"
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/abstract/metrics")"
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/dbops-security-upgrade")"
}

e2e_skip_dbops_secutiry_upgrade() {
  [ "$(uname -m)" = "aarch64" ] || ! can_install_operator_version "$STACKGRES_PREVIOUS_VERSION"
}

e2e_load_images() {
  BUNDLE_STACKGRES_VERSION="$(printf %s "$STACKGRES_VERSION" | tr A-Z a-z)"
  BUNDLE_STACKGRES_PREVIOUS_VERSION="$(printf %s "$STACKGRES_PREVIOUS_VERSION" | tr A-Z a-z)"

  HELM_OPERATOR_IMAGE_TAG_SUFFIX=""
  if [ "$E2E_ENV" = "minishift" ] || [ "$E2E_ENV" = "crc" ] || [ "$E2E_ENV" = "microshift" ]
  then
    HELM_OPERATOR_IMAGE_TAG_SUFFIX="-openshift"
  fi
  HELM_OPERATOR_IMAGE_TAG="${IMAGE_TAG%-jvm}$HELM_OPERATOR_IMAGE_TAG_SUFFIX"
  HELM_OPERATOR_IMAGE_TAG="$(printf %s "$HELM_OPERATOR_IMAGE_TAG" | tr A-Z a-z)"

  HELM_OPERATOR_PUBLIC_REGISTRY="${HELM_OPERATOR_PUBLIC_REGISTRY:-quay.io}"
  HELM_OPERATOR_PUBLIC_REGISTRY_PATH="${HELM_OPERATOR_PUBLIC_REGISTRY_PATH:-/stackgres}"
  HELM_OPERATOR_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator:$HELM_OPERATOR_IMAGE_TAG"
  HELM_OPERATOR_BUNDLE_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator-bundle:$HELM_OPERATOR_IMAGE_TAG"
  HELM_OPERATOR_CATALOG_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator-catalog:$HELM_OPERATOR_IMAGE_TAG"

  # The operator-registry check the images from the remote repository
  BUNDLE_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_BUNDLE_IMAGE_NAME##*/}"
  BUNDLE_OPERATOR_IMAGE_NAME="${OPERATOR_IMAGE_NAME%%:*}:$BUNDLE_STACKGRES_VERSION"

  if [ "$E2E_FORCE_IMAGE_PULL" != "true" ] \
    && test -f stackgres-k8s/ci/build/target/image-hashes \
    && docker inspect "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-image)" >/dev/null 2>&1 \
    && docker inspect "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)" >/dev/null 2>&1
  then
    docker tag "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-image)" "$HELM_OPERATOR_IMAGE_NAME"
    docker tag "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)" "$HELM_OPERATOR_BUNDLE_IMAGE_NAME"
    docker tag "$HELM_OPERATOR_BUNDLE_IMAGE_NAME" "$BUNDLE_IMAGE_NAME"
    docker tag "$OPERATOR_IMAGE_NAME" "$BUNDLE_OPERATOR_IMAGE_NAME"
    load_image_k8s "$HELM_OPERATOR_IMAGE_NAME"
    load_image_k8s "$HELM_OPERATOR_BUNDLE_IMAGE_NAME"
    load_image_k8s "$BUNDLE_IMAGE_NAME"
    load_image_k8s "$BUNDLE_OPERATOR_IMAGE_NAME"
    BUNDLE_IMAGE_DIGEST="$(docker manifest inspect "$BUNDLE_IMAGE_NAME" 2>/dev/null | jq -r .config.digest 2>/dev/null || true)"
    if [ -z "$BUNDLE_IMAGE_DIGEST" ] \
      || [ "$BUNDLE_IMAGE_DIGEST" \
        != "$(docker inspect "$BUNDLE_IMAGE_NAME" 2>/dev/null | jq -r '.[0].RepoDigests[0]|split("@")[1]' 2>/dev/null)" ]
    then
      docker push "$BUNDLE_IMAGE_NAME"
    fi
  fi
}

e2e_install_previous_operator() {
  if [ "$E2E_ENV" != "minishift" ] && [ "$E2E_ENV" != "crc" ] && [ "$E2E_ENV" != "microshift" ]
  then
    e2e_properly_tag_not_found_import_images &
    trap_kill "$!"
    kubectl delete clusterrole system:controller:operator-lifecycle-manager 2>/dev/null \
      || ! kubectl get clusterrole system:controller:operator-lifecycle-manager 2>/dev/null
    wait_until eval '! kubectl get namespace olm > /dev/null 2>&1'
    operator-sdk olm install \
      --timeout "${E2E_TIMEOUT}s"
  fi

  PREVIOUS_BUNDLE_IMAGE_NAME="$(wait_until eval \
    'kubectl exec -n olm "$(kubectl get pod -n olm -l olm.catalogSource=operatorhubio-catalog -o name | grep "^pod/")" \
    -- cat configs/stackgres/catalog.yaml \
    | yq -sr ".[]|select(.name == \"stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION\").image" | grep .')"

  CATALOG_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_CATALOG_IMAGE_NAME##*/}"
  mkdir -p "$LOG_PATH/helm-operator-catalog"
  opm generate dockerfile "$LOG_PATH/helm-operator-catalog"
  echo > "$LOG_PATH/README.md"
  opm init stackgres \
    --default-channel=stable \
    --description="$LOG_PATH/README.md" \
    --output yaml > "$LOG_PATH/helm-operator-catalog/operator.yaml"
  opm render "$PREVIOUS_BUNDLE_IMAGE_NAME" \
    --output=yaml >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
  opm render "$BUNDLE_IMAGE_NAME" \
    --output=yaml >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
  cat << EOF >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
---
schema: olm.channel
package: stackgres
name: stable
entries:
  - name: stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
  - name: stackgres.v$BUNDLE_STACKGRES_VERSION
    replaces: stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
EOF
  sed -i "s/^name: stackgres.v${BUNDLE_STACKGRES_VERSION%-*}.*$/name: stackgres.v$BUNDLE_STACKGRES_VERSION/" "$LOG_PATH/helm-operator-catalog/operator.yaml"
  sed -i "s/^    version: ${BUNDLE_STACKGRES_VERSION%-*}.*$/    version: $BUNDLE_STACKGRES_VERSION/" "$LOG_PATH/helm-operator-catalog/operator.yaml"
  sed -i "s/^- image: \([^:]\+\):${BUNDLE_STACKGRES_VERSION%-*}.*$/- image: \1:$BUNDLE_STACKGRES_VERSION/" "$LOG_PATH/helm-operator-catalog/operator.yaml"
  opm validate "$LOG_PATH/helm-operator-catalog"
  (
  cd "$LOG_PATH"
  docker build . \
    -f "helm-operator-catalog.Dockerfile" \
    -t "$CATALOG_IMAGE_NAME"
  )
  docker push "$CATALOG_IMAGE_NAME"

  if [ "$E2E_SKIP_LOAD_HELM_OPERATOR" != true ]
  then
    if [ "$E2E_FORCE_IMAGE_PULL" = "true" ]
    then
      echo "Loading helm operator images from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
      e2e_load_helm_operator_images_from "$E2E_OPERATOR_REGISTRY" "$E2E_OPERATOR_REGISTRY_PATH"
    fi
    IMAGES="$(e2e_get_helm_operator_images "$STACKGRES_VERSION")"
    for IMAGE in $IMAGES
    do
      docker_tag "$IMAGE" "${IMAGE%:*}:$(printf %s "$STACKGRES_VERSION$HELM_OPERATOR_IMAGE_TAG_SUFFIX" | tr A-Z a-z)"
    done
    OPERATOR_IMAGES="$(get_operator_images "$STACKGRES_VERSION")"
    for IMAGE in $OPERATOR_IMAGES
    do
      docker_tag "$IMAGE" "${IMAGE%:*}:$BUNDLE_STACKGRES_VERSION"
    done
    echo "All helm operator images loaded from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
  fi

  OPERATOR_NAMESPACE="$(generate_operator_namespace)"
  kubectl create namespace "${OPERATOR_NAMESPACE}"

  cat << EOF > "$LOG_PATH/helm-operator-catalog-source.yaml"
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: helm-operator-catalog
  namespace: $OPERATOR_NAMESPACE
spec:
  sourceType: grpc
  image: $CATALOG_IMAGE_NAME
  displayName: Helm Operator Catalog
  publisher: OnGres
  updateStrategy:
    registryPoll:
      interval: 10m
EOF
  kubectl create -f "$LOG_PATH/helm-operator-catalog-source.yaml"

  echo "Installing previous version of operator bundle ($STACKGRES_PREVIOUS_VERSION)"
  cat << EOF > "$LOG_PATH/stackgres-operator-group.yaml"
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: stackgres
  namespace: $OPERATOR_NAMESPACE
EOF
  kubectl create -f "$LOG_PATH/stackgres-operator-group.yaml"
  cat << EOF > "$LOG_PATH/stackgres-subscription-$STACKGRES_PREVIOUS_VERSION.yaml"
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: stackgres
  namespace: $OPERATOR_NAMESPACE
spec:
  channel: stable
  name: stackgres
  source: helm-operator-catalog
  sourceNamespace: $OPERATOR_NAMESPACE
  installPlanApproval: Manual
  startingCSV: stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
EOF
  kubectl create -f "$LOG_PATH/stackgres-subscription-$STACKGRES_PREVIOUS_VERSION.yaml"
  INSTALL_PLAN="$(wait_until eval 'kubectl get installplan -n "$OPERATOR_NAMESPACE" \
    --template "{{ range .items }}{{ if and .status (eq (index .spec.clusterServiceVersionNames 0) \"stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION\") }}{{ printf \"%s\n\" .metadata.name }}{{ end }}{{ end }}" \
    | grep .')"
  kubectl patch -n "$OPERATOR_NAMESPACE" installplan "$INSTALL_PLAN" --type merge -p '{"spec":{"approved":true}}'
  PREVIOUS_RELEASE_NAME="$(wait_until eval 'kubectl get sgconfig -n "$OPERATOR_NAMESPACE" -o name | grep "^sgconfig.stackgres.io/"')"
  PREVIOUS_RELEASE_NAME="${PREVIOUS_RELEASE_NAME#*/}"
  kubectl patch -n "$OPERATOR_NAMESPACE" sgconfig "$PREVIOUS_RELEASE_NAME" --type merge \
    -p '{"spec":{"grafana":{"autoEmbed": true, "webHost":"'"prometheus-grafana.$(prometheus_namespace)"'"}}}'

  wait_until eval \
    'helm list -n "$OPERATOR_NAMESPACE" -o json | jq -r ".[].name" | grep -qxF "$PREVIOUS_RELEASE_NAME"
    sleep 20
    helm list -n "$OPERATOR_NAMESPACE" -o json | jq -r ".[].name" | grep -qxF "$PREVIOUS_RELEASE_NAME"'

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^$PREVIOUS_RELEASE_NAME$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  if [ "$(helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator -o json | jq .extensions.cache.enabled)" = true ]
  then
    if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator-extensions-cache$"
    then
      echo "FAILED. The demo StackGres extensions cache service was not available."
      return 1
    else
      echo "SUCCESS. The demo StackGres extensions cache service was available."
    fi
  fi
}

e2e_upgrade_operator() {
  echo "Upgrading operator bundle ($STACKGRES_VERSION)"
  # The operator-sdk does not allow to load a bundle with IfNotPresent so we have to pull it from the remote repository
  BUNDLE_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_BUNDLE_IMAGE_NAME##*/}"
  kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" helm-operator-bundle \
    --from-file=.dockerconfigjson="$HOME"/.docker/config.json

  INSTALL_PLAN="$(wait_until eval 'kubectl get installplan -n "$OPERATOR_NAMESPACE" \
    --template "{{ range .items }}{{ if eq (index .spec.clusterServiceVersionNames 0) \"stackgres.v$BUNDLE_STACKGRES_VERSION\" }}{{ printf \"%s\n\" .metadata.name }}{{ end }}{{ end }}" \
    | grep .')"
  kubectl patch -n "$OPERATOR_NAMESPACE" installplan "$INSTALL_PLAN" --type merge -p '{"spec":{"approved":true}}'

  wait_until eval 'kubectl get -n "$OPERATOR_NAMESPACE" deployment -l olm.owner="stackgres.v$BUNDLE_STACKGRES_VERSION" -o name | grep -q .'

  wait_until kubectl rollout status --timeout=1s -n "$OPERATOR_NAMESPACE" deployment -l olm.owner="stackgres.v$BUNDLE_STACKGRES_VERSION"

  wait_until kubectl wait --timeout 0s -n "$OPERATOR_NAMESPACE" sgconfig stackgres-operator --for condition=Deployed

  cat << EOF > "$LOG_PATH/sgconfig-patch.yaml"
apiVersion: stackgres.io/v1
kind: SGConfig
spec:
  operator:
    image:
      tag: "$IMAGE_TAG"
  restapi:
    image:
      tag: "$IMAGE_TAG"
  adminui:
    image:
      tag: "$ADMINUI_IMAGE_TAG"
  jobs:
    image:
      tag: "$IMAGE_TAG"
  developer:
    version: $STACKGRES_VERSION
EOF
  kubectl patch -n "$OPERATOR_NAMESPACE" subscription stackgres --type merge \
    -p '{"spec":{"config":{"env":[{"name":"SGCONFIG","value":'"$(yq '. | tostring' "$LOG_PATH/sgconfig-patch.yaml")"'}]}}}'

  wait_until eval 'kubectl get pod -n "$OPERATOR_NAMESPACE" -l app=stackgres-operator \
    --template "{{ range .items }}{{ range .spec.containers }}{{ printf \"%s\n\" .image }}{{ end }}{{ end }}" \
    | grep -qF "'"/${EXPECTED_OPERATOR_IMAGE##*/}"'"'

  wait_until eval \
    'helm list -n "$OPERATOR_NAMESPACE" -o json | jq -r ".[].name" | grep -qxF stackgres-operator
    sleep 20
    helm list -n "$OPERATOR_NAMESPACE" -o json | jq -r ".[].name" | grep -qxF stackgres-operator'

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  if [ "$(helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator -o json | jq .extensions.cache.enabled)" = true ]
  then
    if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator-extensions-cache$"
    then
      echo "FAILED. The demo StackGres extensions cache service was not available."
      return 1
    else
      echo "SUCCESS. The demo StackGres extensions cache service was available."
    fi
  fi
}

e2e_load_helm_operator_images_from() {
  local REPOSITORY="${1:-$HELM_OPERATOR_PUBLIC_REGISTRY}"
  local IMAGE_PATH="${2:-$HELM_OPERATOR_PUBLIC_REGISTRY_PATH}"
  local VERSION="${3:-$STACKGRES_VERSION}"
  local IMAGES
  IMAGES="$(e2e_get_helm_operator_images "$VERSION")"
  printf '%s' "$IMAGES" \
    | xargs_parallel_shell % "$E2E_PATH/e2e" \
      pull_image_from "$REPOSITORY" "${IMAGE_PATH%/}/stackgres" "%"
}

e2e_get_helm_operator_images() {
  [ -n "$1" ]
  local VERSION="$1"
  local NATIVE_TAG="$VERSION"
  if [ "$VERSION" = "$STACKGRES_VERSION" ]
  then
    NATIVE_TAG="${IMAGE_TAG%-jvm}"
  fi
  local TAG="$NATIVE_TAG-jvm"
  if [ "$VERSION" = "$STACKGRES_VERSION" ] \
    && [ "${IMAGE_TAG%-jvm}" = "$IMAGE_TAG" ]
  then
    TAG="$NATIVE_TAG"
  fi
  echo "${HELM_OPERATOR_IMAGE_NAME%:*}:$NATIVE_TAG"
  echo "${HELM_OPERATOR_BUNDLE_IMAGE_NAME%:*}:$NATIVE_TAG"
}

e2e_properly_tag_not_found_import_images() {
  echo "Looking for import-* images to tag properly"
  event_watch  --follow \
    | stdbuf -o0 grep '\simage "\(.*library/import-[^@]\+@sha256:[^"]\+\)": not found' \
    | stdbuf -o0 sed 's#^.*\simage "\(.*library/import-[^@]\+@sha256:[^"]\+\)": not found.*$#\1#' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected import-* image $IMAGE_NAME to tag properly into k8s env $E2E_ENV"
        tag_image_k8s "${IMAGE_NAME#*library/}" "$IMAGE_NAME"
      done
      )
}

e2e_cleanup() {
  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_unnamespaced_cleanup
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup || true
}
