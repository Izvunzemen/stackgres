#!/bin/sh

e2e_test_install() {
  INTAGG_VERSION="$(get_latest_version_of_extension intagg)"
  PAGEINSPECT_VERSION="$(get_latest_version_of_extension pageinspect)"
  PG_REPACK_VERSION="$(get_latest_version_of_extension pg_repack)"
  POSTGIS_VERSION="$(get_latest_version_of_extension postgis)"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --set-string 'cluster.postgresExtensions[0].name=timescaledb' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=timescaledb

  wait_pods_running "$CLUSTER_NAMESPACE" "2"
}

e2e_test() {
  run_test "Check extension is installed and available after booting" check_extension_installed_after_booting

  run_test "Check extension is not uninstalled and still available when removed" check_extension_not_uninstalled_when_removed

  run_test "Check extension without shared library is installed and available when added" check_extension_without_shared_library_installed_when_added

  #TODO: require to implement a mock to add modified intagg extension from another publisher
  #run_test "Check extension without shared library is installed and available when upgraded" check_extension_without_shared_library_installed_when_upgraded

  run_test "Check extension with shared library is installed and available when added" check_extension_with_shared_library_installed_when_added

  #TODO: require to implement a mock to add modified pageinspect extension from another publisher
  #run_test "Check extension with shared library is installed when added and available after restart" check_extension_with_shared_library_installed_when_upgraded

  run_test "Check extension with executable is installed and available when added" check_extension_with_executable_installed_when_added

  run_test "Check extension with extra mount is installed and available when added but requires restart" check_extension_with_extra_mount_installed_when_added
}

check_extension_installed_after_booting() {
  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"timescaledb\" and .requiresRestart != true) | length" \
    | jq -s "length")" = 2 ]
  then
    echo "SUCCESS. Extension was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION timescaledb;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was created"
  else
    echo "FAIL. Extension was not created"
    return 1
  fi
  try_function run_query -i 0 -q 'DROP EXTENSION timescaledb;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was dropped"
  else
    echo "FAIL. Extension was not dropped"
    return 1
  fi
}

check_extension_not_uninstalled_when_removed() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set 'cluster.postgresExtensions=null' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  if wait_until eval 'kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0'
  then
    echo "SUCESS. Cluster is pending restart"
  else
    echo "FAIL. Cluster is not pending restart"
    return 1
  fi

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"timescaledb\" and .requiresRestart != true) | length" \
    | jq -s "length")" = 2 ]
  then
    echo "SUCESS. Extension was not uninstalled"
  else
    echo "FAIL. Extension was uninstalled"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION timescaledb;' > /dev/null 2>&1
  if "$RESULT"
  then
    echo "SUCESS. Extension was created after being uninstalled"
  else
    echo "FAIL. Extension was not created after being uninstalled"
    return 1
  fi

  try_function run_query -i 0 -q 'DROP EXTENSION timescaledb;' > /dev/null 2>&1
  if "$RESULT"
  then
    echo "SUCESS. Extension was dropped after being uninstalled"
  else
    echo "FAIL. Extension was not dropped after being uninstalled"
    return 1
  fi

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  try_function run_query -i 0 -q 'CREATE EXTENSION timescaledb;' > /dev/null 2>&1
  if "$RESULT"
  then
    echo "FAIL. Extension was created after being uninstalled and after restart"
    return 1
  else
    echo "SUCESS. Extension was not created after being uninstalled and after restart"
  fi
}

check_extension_without_shared_library_installed_when_added() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set 'cluster.postgresExtensions=null' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=intagg' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"intagg\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. Extension was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION intagg;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was created"
  else
    echo "FAIL. Extension was not created"
    return 1
  fi

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}

check_extension_without_shared_library_installed_when_upgraded() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=intagg' \
    --set-string 'cluster.postgresExtensions[0].version='"$INTAGG_NEW_VERSION" \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"intagg\" and .version == \"'"$INTAGG_NEW_VERSION"'\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. New version of extension was installed"
  else
    echo "FAIL. New version of extension was not installed"
    return 1
  fi

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"intagg\" and .version == \"'"$INTAGG_VERSION"'\") | length" \
    | jq -s "length")" = 0 ]
  then
    echo "SUCESS. Previous version of extension was upgraded"
  else
    echo "FAIL. Previous version of extension was not upgraded"
    return 1
  fi

  try_function run_query -i 0 -q "ALTER EXTENSION intagg UPDATE TO '$INTAGG_NEW_VERSION';"
  if "$RESULT"
  then
    echo "SUCESS. Extension was upgraded"
  else
    echo "FAIL. Extension was not upgraded"
    return 1
  fi

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}

check_extension_with_shared_library_installed_when_added() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set 'cluster.postgresExtensions=null' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=pageinspect' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"pageinspect\" and .version == \"'"$PAGEINSPECT_VERSION"'\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. Extension was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION pageinspect;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was created"
  else
    echo "FAIL. Extension was not created"
    return 1
  fi

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}

check_extension_with_shared_library_installed_when_upgraded() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=pageinspect' \
    --set-string 'cluster.postgresExtensions[0].version='"$PAGEINSPECT_NEW_VERSION" \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"pageinspect\" and .version == \"'"$PAGEINSPECT_NEW_VERSION"'\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. New version of extension was installed"
  else
    echo "FAIL. New version of extension was not installed"
    return 1
  fi

  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"pageinspect\" and .version == \"'"$PAGEINSPECT_VERSION"'\") | length" \
    | jq -s "length")" = 0 ]
  then
    echo "SUCESS. Previous version of extension was upgraded"
  else
    echo "FAIL. Previous version of extension was not upgraded"
    return 1
  fi

  if wait_until eval 'kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0'
  then
    echo "SUCESS. Cluster is pending restart"
  else
    echo "FAIL. Cluster is not pending restart"
    return 1
  fi

  try_function run_query -i 0 -q "ALTER EXTENSION pageinspect UPDATE TO '$PAGEINSPECT_NEW_VERSION';"
  if "$RESULT"
  then
    echo "FAIL. Extension was upgraded"
    return 1
  else
    echo "SUCESS. Extension was not upgraded"
  fi

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  try_function run_query -i 0 -q "ALTER EXTENSION pageinspect UPDATE TO '$PAGEINSPECT_NEW_VERSION';"
  if "$RESULT"
  then
    echo "SUCESS. Extension was upgraded"
  else
    echo "FAIL. Extension was not upgraded"
    return 1
  fi

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}

check_extension_with_executable_installed_when_added() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set 'cluster.postgresExtensions=null' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=pg_repack' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"pg_repack\" and .version == \"'"$PG_REPACK_VERSION"'\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. Extension was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION pg_repack;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was created"
  else
    echo "FAIL. Extension was not created"
    return 1
  fi

  if kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-0" -c patroni -- sh -c 'pg_repack --help > /dev/null'
  then
    echo "SUCESS. Extension executable was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}

check_extension_with_extra_mount_installed_when_added() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set 'cluster.postgresExtensions=null' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set-string 'cluster.postgresExtensions[0].name=postgis' \
    --set-string configurations.postgresconfig.postgresql\\.conf.shared_preload_libraries=

  try_function wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "select(.status != null and .status.podStatuses != null) | .status.podStatuses[] | select(.installedPostgresExtensions != null) | .installedPostgresExtensions[] | select(.name == \"postgis\" and .version == \"'"$POSTGIS_VERSION"'\") | length" \
    | jq -s "length")" = 2 ]'
  if "$RESULT"
  then
    echo "SUCESS. Extension was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  try_function run_query -i 0 -q 'CREATE EXTENSION postgis;'
  if "$RESULT"
  then
    echo "SUCESS. Extension was created"
  else
    echo "FAIL. Extension was not created"
    return 1
  fi

  if kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-0" -c patroni -- sh -c 'pg_repack --help > /dev/null'
  then
    echo "SUCESS. Extension executable was installed"
  else
    echo "FAIL. Extension was not installed"
    return 1
  fi

  if wait_until eval '! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0'
  then
    echo "FAIL. Cluster is not pending restart"
    return 1
  else
    echo "SUCESS. Cluster is pending restart"
  fi

  kubectl delete pod -n "$CLUSTER_NAMESPACE" --all
  wait_pods_running "$CLUSTER_NAMESPACE" "2"

  if ! kubectl wait sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --for condition=PendingRestart --timeout 0
  then
    echo "SUCESS. Cluster is not pending restart"
  else
    echo "FAIL. Cluster is pending restart"
    return 1
  fi
}