#!/bin/sh

. "$SPEC_PATH/abstract/patroni"

e2e_test_extra_hash() {
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/abstract/patroni")"
}

e2e_test_install() {
  create_or_replace_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "3" "2"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 7
  wait_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Checking that is possible to connect using services is working" service_check

  run_test "Checking that sharded technology is working is working" sharded_check

  run_test "Check that pgbouncer database is accesible using the service" pgbouncer_database_check
}

service_check() {
  RESPONSE_PRIMARY="$(run_query -c "$CLUSTER_NAME-0" -h "$CLUSTER_NAME" -i 1 -p 5432)"

  if [ "$RESPONSE_PRIMARY" = "1" ]
  then
    echo "SUCCESS: Connections are possible using services"
  else
    echo "FAIL: Cannot connect to primary db using a kubernetes service"
    return 1
  fi
}

sharded_check() {
  local RESULT EXIT_CODE
  try_function wait_until eval 'run_query -c "$CLUSTER_NAME-0" -h "$CLUSTER_NAME" -i 1 -p 5432 \
    -d citus -q "SELECT COUNT(*) FROM master_get_active_worker_nodes()" | grep -xF 2'

  if [ "$EXIT_CODE" = 0 ]
  then
    echo "SUCCESS: Sharding is working"
  else
    echo "FAIL: Sharding is not working"
    return 1
  fi
}

pgbouncer_database_check() {
  if kubectl exec -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-0-0" -c "postgres-util" -- env \
    PGPASSWORD="$(kubectl -n "$CLUSTER_NAMESPACE" get secrets "$CLUSTER_NAME-0" \
      -o jsonpath='{.data.pgbouncer-admin-password}' | base64 -d)" \
    PGCONNECT_TIMEOUT="$((5 + E2E_TIMEOUT / 10))" \
    psql -t -A -U pgbouncer_admin -d pgbouncer -h "$CLUSTER_NAME" -c "SHOW FDS" >/dev/null
  then
    echo "SUCCESS: psql could connect to the pgbouncer database with pgobuncer_admin using service"
  else
    echo "FAIL: psql could not connect to the pgbouncer database with pgobuncer_admin using service"
    return 1
  fi

  if kubectl exec -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-0-0" -c "postgres-util" -- env \
    PGPASSWORD="$(kubectl -n "$CLUSTER_NAMESPACE" get secrets "$CLUSTER_NAME-0" \
      -o jsonpath='{.data.pgbouncer-stats-password}' | base64 -d)" \
    PGCONNECT_TIMEOUT="$((5 + E2E_TIMEOUT / 10))" \
    psql -t -A -U pgbouncer_stats -d pgbouncer -h "$CLUSTER_NAME" -c "SHOW VERSION" >/dev/null
  then
    echo "SUCCESS: psql could connect to the pgbouncer database with pgobuncer_stats using service"
  else
    echo "FAIL: psql could not connect to the pgbouncer database with pgobuncer_stats using service"
    return 1
  fi
}
