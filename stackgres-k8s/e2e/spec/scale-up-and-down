#!/bin/sh

e2e_test_install() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Checking scaledown is working" check_scaledown

  run_test "Checking that scaleup is working" check_scaleup

  run_test "Checking that switchover is working" check_switchover

  run_test "Checking scaledown is working when primary is the last pod" check_scaledown_when_primary_last_pod

  run_test "Checking delete primary when is beyond last pod" check_delete_primary_when_beyond_last_pod

  run_test "Checking that scaleup is working when primary is beyond last pod" check_scaleup_when_primary_beyond_last_pod
}

check_scaledown() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"

  check_cluster_pod_count 2

  local RESULT
  local EXIT_CODE
  try_function create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1
  if "$RESULT"
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  try_function wait_pods_terminated "$CLUSTER_NAMESPACE" 1 "$CLUSTER_NAME-[01]"
  if "$RESULT"
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "FAIL. The secondary instance was not disposed :("
    return 1
  else
    echo "SUCCESS. The secondary instance was disposed!"
  fi

  local AFTER_SCALEDOWN_PRIMARY_UID
  AFTER_SCALEDOWN_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEDOWN_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  check_cluster_pod_count 1
}

check_scaleup() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"

  local RESULT
  local EXIT_CODE
  try_function create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2
  if "$RESULT"
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  try_function wait_pods_running "$CLUSTER_NAMESPACE" 2 "$CLUSTER_NAME-[01]"
  if "$RESULT"
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The secondary instance was created!"
  else
    echo "FAIL. The secondary instance was not created :("
    return 1
  fi

  local AFTER_SCALEUP_PRIMARY_UID
  AFTER_SCALEUP_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEUP_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  check_cluster_pod_count 2
}

check_switchover() {
  if kubectl exec -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 -c patroni -- \
    patronictl switchover --master "$CLUSTER_NAME"-0 --candidate "$CLUSTER_NAME"-1 --force
  then
    echo "SUCCESS. The switchover has been performed"
  else
    echo "FAIL. The switchover operation failed"
    return 1
  fi

  local RESULT=false
  local START="$(date +%s)"
  while [ "$((START + E2E_TIMEOUT))" -gt "$(date +%s)" ]
  do
    if run_query -i 0 -p 5432
    then
      echo "SUCCESS. The replica becomed available"
      RESULT=true
      break
    fi
    sleep 2
  done
  if ! "$RESULT"
  then
    echo "FAIL. The replica is not available"
    return 1
  fi

  local IS_IN_RECOVERY="$(run_query -i 1 -p 5432 -q "SELECT pg_is_in_recovery()")"
  if [ "$IS_IN_RECOVERY" = 'f' ]
  then
    echo "SUCCESS. The primary is now the pod at index 1"
  else
    echo "FAIL. The pod at index 1 is not the primary"
    return 1
  fi

  local IS_IN_RECOVERY="$(run_query -i 0 -p 5432 -q "SELECT pg_is_in_recovery()")"
  if [ "$IS_IN_RECOVERY" = 't' ]
  then
    echo "SUCCESS. The replica is now the pod at index 0"
  else
    echo "FAIL. The pod at index 0 is not a replica"
    return 1
  fi

  check_cluster_pod_count 2
}

check_scaledown_when_primary_last_pod() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"

  local RESULT
  local EXIT_CODE
  try_function create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1
  if "$RESULT"
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  try_function wait_pods_terminated "$CLUSTER_NAMESPACE" 1 "$CLUSTER_NAME-[01]"
  if "$RESULT"
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  local AFTER_SCALEDOWN_PRIMARY_UID
  AFTER_SCALEDOWN_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEDOWN_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  check_cluster_pod_count 1
}

check_delete_primary_when_beyond_last_pod() {
  run_query -i 1 -p 5432 -q 'CREATE TABLE test AS SELECT generate_series(1, 1000000) i;'

  kubectl delete pod -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-1"

  try_function wait_pods_running "$CLUSTER_NAMESPACE" 1 "${CLUSTER_NAME}-1"
  if "$RESULT"
  then
    echo "SUCCESS. Primary pod started after deleting it"
  else
    echo "FAIL. Primary pod didn't started after deleting it"
    return 1
  fi

  local IS_IN_RECOVERY="$(run_query -i 1 -p 5432 -q "SELECT pg_is_in_recovery()")"
  if [ "$IS_IN_RECOVERY" = 'f' ]
  then
    echo "SUCCESS. The primary is still the pod at index 1"
  else
    echo "FAIL. The pod at index 1 is not the primary"
    return 1
  fi

  check_cluster_pod_count 1
}

check_scaleup_when_primary_beyond_last_pod() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"

  local RESULT
  local EXIT_CODE
  try_function create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2
  if "$RESULT"
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  try_function wait_pods_running "$CLUSTER_NAMESPACE" 2 "$CLUSTER_NAME-[01]"
  if "$RESULT"
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  local AFTER_SCALEUP_PRIMARY_UID
  AFTER_SCALEUP_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEUP_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  check_cluster_pod_count 2
}

check_cluster_pod_count() {
  local EXPECTED_INSTANCES="$1"
  local ACTUAL_INSTANCES
  ACTUAL_INSTANCES="$(get_all_cluster_pod_count)"
  if [ "$ACTUAL_INSTANCES" -eq "$EXPECTED_INSTANCES" ]
  then
    echo "SUCCESS. The number of instances returned by stackgres/sgclusters is $EXPECTED_INSTANCES"
  else
    echo "FAIL. The number of instances returned by stackgres/sgclusters is $ACTUAL_INSTANCES"
    return 1
  fi

  ACTUAL_INSTANCES="$(get_cluster_pod_count)"
  if [ "$ACTUAL_INSTANCES" -eq "$EXPECTED_INSTANCES" ]
  then
    echo "SUCCESS. The number of instances returned by stackgres/<namespace>/sgcluster/<name> is $EXPECTED_INSTANCES"
  else
    echo "FAIL. The number of instances returned by stackgres/<namespace>/sgcluster/<name> is $ACTUAL_INSTANCES"
    return 1
  fi

  ACTUAL_INSTANCES="$(get_cluster_stats_pod_count)"
  if [ "$ACTUAL_INSTANCES" -eq "$EXPECTED_INSTANCES" ]
  then
    echo "SUCCESS. The number of instances returned by stackgres/<namespace>/sgcluster/<name>/stats is $EXPECTED_INSTANCES"
  else
    echo "FAIL. The number of instances returned by stackgres/<namespace>/sgcluster/<name>/stats is $ACTUAL_INSTANCES"
    return 1
  fi
}

get_all_cluster_pod_count() {
  run_curl -r "stackgres/sgclusters" \
    | jq ".[]|select(.metadata.namespace == \"$CLUSTER_NAMESPACE\" and .metadata.name == \"$CLUSTER_NAME\")|.pods | length"
}

get_cluster_pod_count() {
  run_curl -r "stackgres/namespaces/$CLUSTER_NAMESPACE/sgclusters/$CLUSTER_NAME" | jq '.pods | length'
}

get_cluster_stats_pod_count() {
  run_curl -r "stackgres/namespaces/$CLUSTER_NAMESPACE/sgclusters/$CLUSTER_NAME/stats" | jq '.pods | length'
}
