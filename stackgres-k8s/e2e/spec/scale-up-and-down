#!/bin/sh

e2e_test_install_pods() {
  echo 2
}

e2e_test() {
  run_test "Checking scaledown is working" check_scaledown

  run_test "Checking that scaleup is working" check_scaleup

  run_test "Checking that switchover is working" check_switchover

  run_test "Checking scaledown is working when master is the last pod" check_scaledown_when_master_last_pod

  run_test "Checking that scaleup is working when master is beyond last pod" check_scaleup_when_master_beyond_last_pod
}

check_scaledown() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"

  if create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  if wait_pods_terminated "$CLUSTER_NAMESPACE" 1
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "FAIL. The secondary instance was not disposed :("
    return 1
  else
    echo "SUCCESS. The secondary instance was disposed!"
  fi

  local AFTER_SCALEDOWN_PRIMARY_UID
  AFTER_SCALEDOWN_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEDOWN_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi
}

check_scaleup() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"

 if create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  if wait_pods_running "$CLUSTER_NAMESPACE" 2
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The secondary instance was created!"
  else
    echo "FAIL. The secondary instance was not created :("
    return 1
  fi

  local AFTER_SCALEUP_PRIMARY_UID
  AFTER_SCALEUP_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEUP_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi
}

check_switchover() {
  if kubectl exec -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 -c patroni -- \
    patronictl switchover --master "$CLUSTER_NAME"-0 --candidate "$CLUSTER_NAME"-1 --force
  then
    echo "SUCCESS. The switchover has been performed"
  else
    echo "FAIL. The switchover operation failed"
    return 1
  fi

  local RESULT=false
  local START="$(date +%s)"
  while [ "$((START + E2E_TIMEOUT))" -gt "$(date +%s)" ]
  do
    if run_query -i 0 -p 5432
    then
      echo "SUCCESS. The replica becomed available"
      RESULT=true
      break
    fi
    sleep 2
  done
  if ! "$RESULT"
  then
    echo "FAIL. The replica is not available"
    return 1
  fi

  if ! run_query -i 1 -p 5432 -q "SELECT pg_is_in_recovery()" | grep -q '^t$'
  then
    echo "SUCCESS. The primary is now the node at index 1"
  else
    echo "FAIL. The node at index 1 is not the primary"
    return 1
  fi

  if ! run_query -i 0 -p 5432 -q "SELECT pg_is_in_recovery()" | grep -q '^f$'
  then
    echo "SUCCESS. The replica is now the node at index 0"
  else
    echo "FAIL. The node at index 0 is not a replica"
    return 1
  fi
}

check_scaledown_when_master_last_pod() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"

  if create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  if wait_pods_terminated "$CLUSTER_NAMESPACE" 1
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  local AFTER_SCALEDOWN_PRIMARY_UID
  AFTER_SCALEDOWN_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEDOWN_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi
}

check_scaleup_when_master_beyond_last_pod() {
  local PRIMARY_UID
  PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"

 if create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2
  then
    echo "SUCCESS. The number of instances has been changed"
  else
    echo "FAIL. Can not change the number of instances"
    return 1
  fi

  if wait_pods_running "$CLUSTER_NAMESPACE" 2
  then
    echo "SUCCESS. The number of pods has changed"
  else
    echo "FAIL. The number of pods did not changed"
    return 1
  fi

  if kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep -q "^pod/${CLUSTER_NAME}-1"
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi

  local AFTER_SCALEUP_PRIMARY_UID
  AFTER_SCALEUP_PRIMARY_UID="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-1 --template '{{ .metadata.uid }}')"
  if [ "$AFTER_SCALEUP_PRIMARY_UID" = "$PRIMARY_UID" ]
  then
    echo "SUCCESS. The primary instance was not disposed!"
  else
    echo "FAIL. The primary instance was disposed :("
    return 1
  fi
}
