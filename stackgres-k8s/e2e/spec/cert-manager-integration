#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup

  install_cert_manager

  cat << EOF | kubectl create -f -
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: stackgres-self-issuer
  namespace: "$OPERATOR_NAMESPACE"
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: stackgres-ca
  namespace: "$OPERATOR_NAMESPACE"
spec:
  isCA: true
  commonName: stackgres-ca
  secretName: stackgres-operator-certs
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: stackgres-self-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: stackgres-ca-issuer
  namespace: "$OPERATOR_NAMESPACE"
spec:
  ca:
    secretName: stackgres-operator-certs
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: stckgres-operator-cert
  namespace: "$OPERATOR_NAMESPACE"
spec:
  secretName: stackgres-operator-tls
  duration: 2160h
  renewBefore: 360h
  subject:
    organizations:
      - OnGres
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  dnsNames:
    - stackgres-operator
    - stackgres-operator.stackgres
    - stackgres-operator.stackgres.svc
    - stackgres-operator.stackgres.svc.cluster.local
  issuerRef:
    name: stackgres-ca-issuer
    kind: Issuer
    group: cert-manager.io
EOF

  kubectl create namespace "$OPERATOR_NAMESPACE"
  install_operator_only \
    --set cert.create=false

  kubectl create namespace "$CLUSTER_NAMESPACE"
}

e2e_test_uninstall() {
  uninstall_cert_manager
}

e2e_test() {
  run_test "Check that a cluster can e created" check_cluster_can_be_created
}

check_grafana_secret() {
  local RESULT EXIT_CODE
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"

  try_function create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"
  if "$RESULT"
  then
    echo "SUCCESS. Cluster can be installed"
  else
    echo "FAIL. Cluster can not be installed"
    return 1
  fi
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}
