#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup

  install_prometheus_operator

  kubectl create namespace "$OPERATOR_NAMESPACE"
  install_operator_only \
    --set adminui.service.exposeHTTP=true \
    --set grafana.autoEmbed=true \
    --set-string grafana.webHost="prometheus-grafana.$(prometheus_namespace)"

  wait_pods_terminated "$OPERATOR_NAMESPACE" 3

  kubectl create namespace "$CLUSTER_NAMESPACE"
  install_minio

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2

  SERVICE="stackgres-restapi"
  local PASSWORD
  PASSWORD="$(kubectl get secrets -n "$OPERATOR_NAMESPACE" "$SERVICE" -o jsonpath="{.data.clearPassword}" | base64 -d)"
  CYPRESS_POD="cypress"
  
  cat << EOF | kubectl apply -f -
  apiVersion: v1
  kind: Pod
  metadata:
    name: $CYPRESS_POD
    namespace: $CLUSTER_NAMESPACE
  spec:
    containers:
    - name: $CYPRESS_POD
      image: cypress/included:4.8.0
      command: [ "sh", "-c", "while true; do sleep 300; done" ]
      imagePullPolicy: IfNotPresent
      env:
      - name: CYPRESS_host
        value: "https://$SERVICE.$OPERATOR_NAMESPACE/admin"
      - name: CYPRESS_username
        value: "admin"
      - name: CYPRESS_password
        value: "$PASSWORD"
      - name: CYPRESS_VIDEO
        value: "false" 
    restartPolicy: Always
    terminationGracePeriodSeconds: 0
EOF

  wait_pods_running "$CLUSTER_NAMESPACE" 5

  kubectl cp "$UI_TESTS_RESOURCES_PATH/cypress" "$CLUSTER_NAMESPACE/$CYPRESS_POD":/
  kubectl cp "$UI_TESTS_RESOURCES_PATH/cypress.json" "$CLUSTER_NAMESPACE/$CYPRESS_POD":/
}

e2e_test() {  
  run_test "Cypress chrome tests should pass" cypress_chrome_tests

  run_test "Cypress firefox tests should pass" cypress_firefox_tests

  run_test "Nginx must return the index page when a resource is not found" check_index_on_not_found_resource

  run_test "Nginx must work correctly on HTTP port when HTTP is exposed" check_http_port
}

cypress_chrome_tests(){
  kubectl exec -i -n "$CLUSTER_NAMESPACE" "$CYPRESS_POD" -- cypress run --headless  --browser chrome
}

cypress_firefox_tests(){
  kubectl exec -i -n "$CLUSTER_NAMESPACE" "$CYPRESS_POD" -- cypress run --headless  --browser firefox
}

check_index_on_not_found_resource(){
  RANDOM_RESOURCE="$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)"
  HTTP_STATUS="$(kubectl exec -i -n "$CLUSTER_NAMESPACE" "$CYPRESS_POD" -- curl -s -k "https://$SERVICE.$OPERATOR_NAMESPACE/admin/$RANDOM_RESOURCE" -X GET -LI -o /dev/null -w '%{http_code}' 2>/dev/null)"

  assert_string_equal "200" "$HTTP_STATUS"

  HTTP_RESPONSE="$(kubectl exec -i -n "$CLUSTER_NAMESPACE" "$CYPRESS_POD" -- curl -s -k "https://$SERVICE.$OPERATOR_NAMESPACE/admin/$RANDOM_RESOURCE" -X GET -L 2>/dev/null)"

  if echo "$HTTP_RESPONSE" | grep -E "<meta.+index" > /dev/null
  then
    echo "SUCCESS. Returned index page on not found resource"
  else
    echo "FAIL. Index page not returned on not found resource"
    return 1
  fi
}

check_http_port(){
  RANDOM_RESOURCE="$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)"
  HTTP_STATUS="$(kubectl exec -i -n "$CLUSTER_NAMESPACE" "$CYPRESS_POD" -- curl -s "http://$SERVICE.$OPERATOR_NAMESPACE/admin" -X GET -LI -o /dev/null -w '%{http_code}' 2>/dev/null)"

  if [ "$HTTP_STATUS" = "200" ]
  then
    echo "SUCCESS. HTTP port is working when exposed"
  else
    echo "FAIL. HTTP port is not working when exposed"
    return 1
  fi
}
