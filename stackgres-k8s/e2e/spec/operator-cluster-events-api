#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY=$(ramdom_string)
  NODE_LABEL_VALUE=$(ramdom_string)

  BACKUPCONF="backupconf"

  kubectl create namespace "$CLUSTER_NAMESPACE"
  kubectl create secret generic -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-minio" \
     --from-literal=accesskey=test --from-literal=secretkey=test

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set cluster.configurations.sgBackupConfig="$BACKUPCONF" \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set configurations.backupconfig.create=true \
    --set-string configurations.backupconfig.storage.s3Compatible.bucket=test \
    --set-string configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.name=test \
    --set-string configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.key=accesskey \
    --set-string configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.name=test \
    --set-string configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.key=secretkey \
    --set-string configurations.backupconfig.baseBackups.cronSchedule='0 5 31 2 *'

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1

  DBOPS_MINOR_VERSION_UPGRADE_NAME=minor-version-upgrade

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_MINOR_VERSION_UPGRADE_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: minorVersionUpgrade
EOF

  kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_MINOR_VERSION_UPGRADE_NAME" -o json \
    | jq "$(cat << EOF
      . as \$dbops | {} | {
        metadata: {
          name: "$DBOPS_MINOR_VERSION_UPGRADE_NAME.1-test",
          namespace: "$CLUSTER_NAMESPACE"
        },
        apiVersion: "v1",
        kind: "Event",
        count: 1,
        eventTime: null,
        firstTimestamp: "2021-06-15T15:29:39Z",
        lastTimestamp: "2021-06-21T17:20:46Z",
        type: "Normal",
        message: "StackGres Cluster default.stackgres updated",
        reason: "ClusterUpdated",
        reportingComponent: "",
        reportingInstance: "",
        involvedObject: {
          apiVersion: \$dbops.apiVersion,
          kind: \$dbops.kind,
          namespace: \$dbops.metadata.namespace,
          name: \$dbops.metadata.name,
          resourceVersion: \$dbops.metadata.resourceVersion,
          uid: \$dbops.metadata.uid
        },
        source: {
          component: "stackgres-operator"
        }
      }
EOF
    )" | kubectl create -f -
}

e2e_test() {
  run_test "Check that cluster events can be accessed through the API" check_cluster_events

  run_test "User with wrong credentials should not be authenticated" test_authentication_api_error
}

check_cluster_events() {
  if run_curl -r "stackgres/sgcluster/events/$CLUSTER_NAMESPACE/$CLUSTER_NAME" \
    | jq -r ".[] | any(.metadata.namespace == \"$CLUSTER_NAMESPACE\" and .involvedObjects.name == \"SGDbOps\" and .involvedObjects.name == \"$DBOPS_MINOR_VERSION_UPGRADE_NAME\")" \
    | grep -q "^true$"
  then
    echo "Dbops events for $DBOPS_MINOR_VERSION_UPGRADE_NAME included in json response"
  else
    echo "Dbops events for $DBOPS_MINOR_VERSION_UPGRADE_NAME not included in json response"
    return 1
  fi

  if run_curl -r "stackgres/sgcluster/events/$CLUSTER_NAMESPACE/$CLUSTER_NAME" \
    | jq -r ".[] | any(.metadata.namespace == \"$CLUSTER_NAMESPACE\" and .involvedObjects.name == \"StatefulSet\" and .involvedObjects.name == \"$CLUSTER_NAME\")" \
    | grep -q "^true$"
  then
    echo "StatefulSet events included in json response"
  else
    echo "StatefulSet events not included in json response"
    return 1
  fi

  if run_curl -r "stackgres/sgcluster/events/$CLUSTER_NAMESPACE/$CLUSTER_NAME" \
    | jq -r ".[] | any(.metadata.namespace == \"$CLUSTER_NAMESPACE\" and .involvedObjects.name == \"Pod\" and .involvedObjects.name == \"$CLUSTER_NAME-0\")" \
    | grep -q "^true$"
  then
    echo "Pods events included in json response"
  else
    echo "Pods events not included in json response"
    return 1
  fi
}

test_authentication_api_error() {
  local HTTP_STATUS

  HTTP_STATUS="$(run_curl -j "$FAKE_JWT" -r "stackgres/sgcluster/events" -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")"

  check_authentication_error
}

check_authentication_error() {
  if [ "$HTTP_STATUS" = "401" ]
  then
    echo "Request returned expected authentication error"
    return 0
  else
    echo "Request returned unexpected response status $HTTP_STATUS instead of the expected authentication error."
    return 1
  fi
}

