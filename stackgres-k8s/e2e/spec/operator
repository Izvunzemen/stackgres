#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup
  kubectl create namespace "$OPERATOR_NAMESPACE"
  kubectl create namespace "$CLUSTER_NAMESPACE"
}

e2e_test_uninstall() {
  kubectl delete namespace "$CLUSTER_NAMESPACE"
  delete_operator_only
  install_operator_only
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  run_test "Check that operator can be installed" check_operator_install
  run_test "Check that operator can be upgrade with same values" check_operator_upgrade
  run_test "Check that operator can not be upgrade from an alpha version" check_operator_upgrade_alpha
  run_test "Check that operator can not be upgrade from a beta version" check_operator_upgrade_beta
  run_test "Check that operator can not be upgrade from version 0.9.5" check_operator_upgrade_0_9_5
  run_test "Check that operator can be upgrade from version 1.2.0" check_operator_upgrade_1_2_0
  run_test "Check that operator can be upgrade from version 1.3.0" check_operator_upgrade_1_3_0
  run_test "Check that operator can not be upgrade with an SGCluster that uses version 0.9.5" check_operator_upgrade_with_cluster_using_0_9_5
  run_test "Check that operator can be upgrade with an SGCluster that uses version 1.2.0 and 1.3.0" check_operator_upgrade_with_cluster_using_1_2_0_and_1_3_0
  run_test "Check that operator can be deleted" check_operator_delete
  run_test "Check that operator can be installed from outside" check_operator_install_outside
  run_test "Check that operator can be installed with load balancer" check_operator_install_load_balancer
  run_test "Check that operator can be installed with the '--wait' option" check_operator_install_with_wait
}

check_operator_install() {
  install_operator_only

  check_operator_installed
}

check_operator_upgrade() {
  upgrade_operator

  check_operator_installed
}

check_operator_delete() {
  delete_operator_only
}

check_operator_install_outside() {
  delete_operator_only

  install_operator_only --set-string service.type=NodePort --set service.nodePort=31111

  check_operator_installed
}

check_operator_install_load_balancer() {
  delete_operator_only

  install_operator_only --set service.loadBalancer.enabled=true

  check_operator_installed
}

check_operator_install_with_wait() {
  delete_operator_only

  install_operator_only  --wait

  check_operator_installed
}

check_operator_installed() {
  for app in operator restapi; do
    REPLICAS="$(kubectl get -n "$OPERATOR_NAMESPACE" "deployment/stackgres-${app}" --template '{{ .spec.replicas }}')"
    if [ "$REPLICAS" = "1" ]; then
      echo "SUCCESS. Deployment 'stackgres-${app}' has 1 replica."
      continue
    fi

    echo "FAILED. Deployment 'stackgres-${app}' was $REPLICAS replicas."
    return 1
  done

  for app in operator restapi; do
    if kubectl rollout status -n "$OPERATOR_NAMESPACE" "deployment/stackgres-${app}"; then
      echo "SUCCESS. Deployment 'stackgres-${app}' was rolled out."
      continue
    fi

    echo "FAILED. Deployment 'stackgres-${app}' was not rolled out."
    return 1
  done
}

check_operator_upgrade_alpha() {
  kubectl label deployment -n "$OPERATOR_NAMESPACE" stackgres-operator \
    --overwrite "version=${STACKGRES_VERSION%%-*}-alpha100"
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "FAILED. Upgrade did not failed when previous version was alpha"
    return 1
  else
    echo "SUCCESS. Upgrade failed when previous version was alpha"
  fi
}

check_operator_upgrade_beta() {
  kubectl label deployment -n "$OPERATOR_NAMESPACE" stackgres-operator \
    --overwrite "version=${STACKGRES_VERSION%%-*}-beta100"
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "FAILED. Upgrade did not failed when previous version was beta"
    return 1
  else
    echo "SUCCESS. Upgrade failed when previous version was beta"
  fi
}

check_operator_upgrade_0_9_5() {
  local PREVIOUS_VERSION=0.9.5
  kubectl label deployment -n "$OPERATOR_NAMESPACE" stackgres-operator \
    --overwrite "version=$PREVIOUS_VERSION"
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "FAILED. Upgrade did not failed when previous version was 0.9.5"
    return 1
  else
    echo "SUCCESS. Upgrade failed when previous version was 0.9.5"
  fi
}

check_operator_upgrade_1_2_0() {
  local PREVIOUS_VERSION=1.2.0
  kubectl label deployment -n "$OPERATOR_NAMESPACE" stackgres-operator \
    --overwrite "version=$PREVIOUS_VERSION"
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "SUCCESS. Upgrade did not failed when previous version was 1.2.0"
  else
    echo "FAILED. Upgrade failed when previous version was 1.2.0"
    return 1
  fi
}

check_operator_upgrade_1_3_0() {
  local PREVIOUS_VERSION=1.3.0
  kubectl label deployment -n "$OPERATOR_NAMESPACE" stackgres-operator \
    --overwrite "version=$PREVIOUS_VERSION"
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "SUCCESS. Upgrade did not failed when previous version was 1.3.0"
  else
    echo "FAILED. Upgrade failed when previous version was 1.3.0"
    return 1
  fi
}

check_operator_upgrade_with_cluster_using_0_9_5() {
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"
  local PREVIOUS_VERSION=0.9.5
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"
  kubectl patch mutatingwebhookconfigurations.admissionregistration.k8s.io stackgres-operator \
    --type=json -p='[{"op":"replace","path":"/webhooks/0/rules/0/operations/1","value":"DELETE"}]'
  kubectl annotate sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --overwrite "stackgres.io/operatorVersion=$PREVIOUS_VERSION"
  kubectl patch mutatingwebhookconfigurations.admissionregistration.k8s.io stackgres-operator \
    --type=json -p='[{"op":"replace","path":"/webhooks/0/rules/0/operations/1","value":"UPDATE"}]'
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "FAILED. Upgrade did not failed with an SGCluster that uses version 0.9.5"
    return 1
  else
    echo "SUCCESS. Upgrade failed with an SGCluster that uses version 0.9.5"
  fi
  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

check_operator_upgrade_with_cluster_using_1_2_0_and_1_3_0() {
  CLUSTER_1_NAME="$(get_sgcluster_name "$SPEC_NAME-1")"
  CLUSTER_2_NAME="$(get_sgcluster_name "$SPEC_NAME-2")"
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"
  local PREVIOUS_VERSION_1=1.2.0
  local PREVIOUS_VERSION_2=1.3.0
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set cluster.create=false
  create_or_replace_cluster "$CLUSTER_1_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set instanceProfiles=null \
    --set configurations.create=false \
    --set-string cluster.postgres.version=13.4
  create_or_replace_cluster "$CLUSTER_2_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set instanceProfiles=null \
    --set configurations.create=false \
    --set-string cluster.postgres.version=13.4
  kubectl patch mutatingwebhookconfigurations.admissionregistration.k8s.io stackgres-operator \
    --type=json -p='[{"op":"replace","path":"/webhooks/0/rules/0/operations/1","value":"DELETE"}]'
  kubectl annotate sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_1_NAME" \
    --overwrite "stackgres.io/operatorVersion=$PREVIOUS_VERSION_1"
  kubectl annotate sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_2_NAME" \
    --overwrite "stackgres.io/operatorVersion=$PREVIOUS_VERSION_2"
  kubectl patch mutatingwebhookconfigurations.admissionregistration.k8s.io stackgres-operator \
    --type=json -p='[{"op":"replace","path":"/webhooks/0/rules/0/operations/1","value":"UPDATE"}]'
  local EXIT_CODE RESULT
  try_function upgrade_operator
  if "$RESULT"
  then
    echo "SUCCESS. Upgrade did not failed with an SGCluster that uses version 1.2.0 and 1.3.0"
  else
    echo "FAILED. Upgrade failed with an SGCluster that uses version 1.2.0 and 1.3.0"
    return 1
  fi
  remove_cluster "$CLUSTER_1_NAME" "$CLUSTER_NAMESPACE"
  remove_cluster "$CLUSTER_2_NAME" "$CLUSTER_NAMESPACE"
  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}


