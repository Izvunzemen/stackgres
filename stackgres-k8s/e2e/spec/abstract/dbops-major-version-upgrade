#!/bin/sh

export E2E_SOURCE_POSTGRES_VERSION="${E2E_SOURCE_POSTGRES_VERSION:-12.6}"
export E2E_TARGET_POSTGRES_VERSION="${E2E_TARGET_POSTGRES_VERSION:-13.2}"
export E2E_STORAGE_CLASS_REFLINK_ENABLED="${E2E_STORAGE_CLASS_REFLINK_ENABLED:-false}"

e2e_test_install() {
  CLUSTER_NAME=major-up

  kubectl create namespace "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
}

reset_cluster() {
  remove_cluster_if_exists "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  wait_until eval '[ "$(kubectl get pvc -n "$CLUSTER_NAMESPACE" --template "{{ .items | len }}")" = 0 ]'

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string cluster.postgres.version="$E2E_SOURCE_POSTGRES_VERSION" \
    --set-string cluster.postgres.extensions[0].name=postgis

  wait_pods_running "$CLUSTER_NAMESPACE" 2

  kubectl delete pod -n "$CLUSTER_NAMESPACE" -l "app=StackGresCluster,cluster-name=$CLUSTER_NAME,cluster=true"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  kubectl exec -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 -c postgres-util -- psql -c "$(cat << 'EOF'
CREATE EXTENSION postgis;
CREATE MATERIALIZED VIEW test AS
 SELECT 'mpoint_7', ST_AsEWKT(ST_GeomFromGML('<gml:MultiPoint srsName="EPSG:27582"><gml:pointMember><gml:Point><gml:coordinates>1,2</gml:coordinates></gml:Point></gml:pointMember><gml:pointMember><gml:Point srsName="EPSG:27562"><gml:coordinates>400000,5000000</gml:coordinates></gml:Point></gml:pointMember></gml:MultiPoint>'));
EOF
    )"

  create_or_replace_cluster "$CLUSTER_NAME-4-major-up" "$CLUSTER_NAMESPACE" 1 \
    --set cluster.create=false \
    --set instanceProfiles=null \
    --set cluster.configurations.sgPostgresConfig=postgresconf-for-major-version-upgrade \
    --set cluster.configurations.sgPoolingConfig=pgbouncerconf-for-major-version-upgrade \
    --set-string cluster.postgres.version="$E2E_TARGET_POSTGRES_VERSION"

  generate_mock_data "$CLUSTER_NAME"
  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"

  kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p "$(cat << EOF
[
  {"op":"replace","path":"/spec/postgres/version","value":"$E2E_TARGET_POSTGRES_VERSION"},
  {"op":"replace","path":"/spec/configurations/sgPostgresConfig","value":"postgresconf-for-major-version-upgrade"}
]
EOF
        )"
}

check_major_version_upgrade() {
  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "major-version-upgrade" \
    --for condition=Running
  then
    echo "SUCCESS. major version upgrade running."
  else
    echo "FAILED. major version upgrade not running."
    return 1
  fi

  wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ if .metadata.annotations.lockTimestamp }}true{{ end }}")" = true ]'
  if kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"replace","path":"/spec/metadata","value":{}}]' \
    >/dev/null 2>&1
  then
    echo "FAILED. Cluster has been updated while locked."
    return 1
  else
    echo "SUCCESS. Cluster has not been updated while locked."
  fi

  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "major-version-upgrade" \
    --for condition=Completed
  then
    echo "SUCCESS. major version upgrade completed."
  else
    echo "FAILED. major version upgrade failed."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=major-version-upgrade,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. major version upgrade job was not removed after completion."
  else
    echo "FAILED. major version upgrade job was removed after completion."
    return 1
  fi

  wait_until run_query -i 0 -q "SELECT 1;"
  check_mock_data_samehost "$CLUSTER_NAME"
  wait_until run_query -i 1 -q "SELECT 1;"
  check_mock_data_replication "$CLUSTER_NAME"
}
