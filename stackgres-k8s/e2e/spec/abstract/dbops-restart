#!/bin/sh

export E2E_MINOR_SOURCE_POSTGRES_VERSION="${E2E_MINOR_SOURCE_POSTGRES_VERSION:-13.0}"
export E2E_MINOR_TARGET_POSTGRES_VERSION="${E2E_MINOR_TARGET_POSTGRES_VERSION:-13.2}"

e2e_test_install() {
  CLUSTER_NAME=dbops-restart

  kubectl create namespace "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
}

reset_cluster() {
  remove_cluster_if_exists "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  wait_until eval '[ "$(kubectl get pvc -n "$CLUSTER_NAMESPACE" --template "{{ .items | len }}")" = 0 ]'

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string cluster.postgres.version="$E2E_MINOR_SOURCE_POSTGRES_VERSION"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  generate_mock_data "$CLUSTER_NAME"
  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}

check_restart() {
  local RESTARTED_PODS="$1"
  local NOT_RESTARTED_PODS="$2"

  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "restart" \
    --for condition=Running
  then
    echo "SUCCESS. restart running."
  else
    echo "FAILED. restart not running."
    return 1
  fi

  wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ if .metadata.annotations.lockTimestamp }}true{{ end }}")" = true ]'
  if kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"replace","path":"/spec/metadata","value":{}}]' \
    >/dev/null 2>&1
  then
    echo "FAILED. Cluster has been updated while locked."
    return 1
  else
    echo "SUCCESS. Cluster has not been updated while locked."
  fi

  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "restart" \
    --for condition=Completed
  then
    echo "SUCCESS. restart completed."
  else
    echo "FAILED. restart failed."
    return 1
  fi

  if [ -z "$RESTARTED_PODS" ]
  then
     RESTARTED_PODS="$(kubectl get pod -n "$CLUSTER_NAMESPACE" -l "app=StackGresCluster,cluster-name=$CLUSTER_NAME,cluster=true" \
      --template '{{ range .items }}{{ printf "%s " .metadata.name }}{{ end }}')"
  fi
  printf '%s %s' "$RESTARTED_PODS" "$NOT_RESTARTED_PODS" | wc -w | grep -q '^2$'

  local DBOPS_CREATION_TIMESTAMP
  DBOPS_CREATION_TIMESTAMP="$(kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "restart" --template='{{ .metadata.creationTimestamp }}')"
  DBOPS_CREATION_TIMESTAMP="$(date -d "$DBOPS_CREATION_TIMESTAMP" +%s)"
  local POD_CREATION_TIMESTAMP
  local POD
  for POD in $RESTARTED_PODS
  do
    POD_CREATION_TIMESTAMP="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$POD" --template='{{ .metadata.creationTimestamp }}')"
    POD_CREATION_TIMESTAMP="$(date -d "$POD_CREATION_TIMESTAMP" +%s)"
    if [ "$POD_CREATION_TIMESTAMP" -lt "$DBOPS_CREATION_TIMESTAMP" ]
    then
      echo "FAILED. Pod $POD was not restarted"
      return 1
    else
      echo "SUCCESS. Pod $POD was restarted"
    fi
  done
  for POD in $NOT_RESTARTED_PODS
  do
    POD_CREATION_TIMESTAMP="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$POD" --template='{{ .metadata.creationTimestamp }}')"
    POD_CREATION_TIMESTAMP="$(date -d "$POD_CREATION_TIMESTAMP" +%s)"
    if [ "$POD_CREATION_TIMESTAMP" -lt "$DBOPS_CREATION_TIMESTAMP" ]
    then
      echo "SUCCESS. Pod $POD was not restarted"
    else
      echo "FAILED. Pod $POD was restarted"
      return 1
    fi
  done

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=restart,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. restart job was not removed after completion."
  else
    echo "FAILED. restart job was removed after completion."
    return 1
  fi

  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}
