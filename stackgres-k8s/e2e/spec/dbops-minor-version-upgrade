#!/bin/sh

. "$SPEC_PATH/abstract/dbops-restart"

e2e_test_install() {
  CLUSTER_NAME=dbops-minor-version-upgrade

  kubectl create namespace "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
}

e2e_test() {
  run_test "Checking that minor version upgrade is working" check_minor_version_upgrade_is_working

  run_test "Checking that minor version upgrade in-place is working" check_minor_version_upgrade_in_place_is_working
}

check_minor_version_upgrade_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: minor-version-upgrade
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: minorVersionUpgrade
EOF

  check_minor_version_upgrade

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" minor-version-upgrade
}

check_minor_version_upgrade_in_place_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: minor-version-upgrade
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: minorVersionUpgrade
  minorVersionUpgrade:
    method: InPlace
EOF

  check_minor_version_upgrade

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" minor-version-upgrade
}

check_minor_version_upgrade() {
  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "minor-version-upgrade" \
    --for condition=Running
  then
    echo "SUCCESS. minor version upgrade running."
  else
    echo "FAILED. minor version upgrade not running."
    return 1
  fi

  wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ if .metadata.annotations.lockTimestamp }}true{{ end }}")" = true ]'
  if kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"replace","path":"/spec/metadata","value":{"annotations":{"allResources":{"'"$(random_string)"'": "'"$(random_string)"'"}}}}]' \
    >/dev/null 2>&1
  then
    echo "FAILED. Cluster has been updated while locked."
    return 1
  else
    echo "SUCCESS. Cluster has not been updated while locked."
  fi

  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "minor-version-upgrade" \
    --for condition=Completed
  then
    echo "SUCCESS. Minor version upgrade completed."
  else
    echo "FAILED. Minor version upgrade failed."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=minor-version-upgrade,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. Minor version upgrade job was not removed after completion."
  else
    echo "FAILED. Minor version upgrade job was removed after completion."
    return 1
  fi

  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}
