#!/bin/sh

. "$SPEC_PATH/abstract/backup"

e2e_test_extra_hash() {
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/abstract/backup")"
}

e2e_test_install() {
  CLUSTER_NAME="$(get_sgshardedcluster_name "$SPEC_NAME")"

  install_minio

  create_or_replace_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "3" "2"

  wait_pods_running "$CLUSTER_NAMESPACE" 7
  wait_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Checking that backup is working" check_backup_is_working

  run_test "Checking that sharded backup are working" check_sharded_backup_is_working

  run_test "Checking that automatic sharded backup are working" check_automatic_sharded_backup_is_working

  run_test "Checking that restoring a sharded backup is working" check_restore_sharded_backup_is_working
}

check_backup_is_working() {
  local BACKUP_NAME
  local SHARDED_CLUSTER_NAME="$CLUSTER_NAME"
  local CLUSTER_NAME
  local NODE=0
  local SUFFIX
  for SUFFIX in "coord" "shard0" "shard1"
  do
    CLUSTER_NAME="$SHARDED_CLUSTER_NAME-$SUFFIX"
    check_wal_archive 0
  done
}

check_sharded_backup_is_working() {
  SHARDED_BACKUP_NAME="$(get_sgshardedbackup_name "${CLUSTER_NAME}-$(shuf -i 0-65535 -n 1)")"

  create_sharded_backup "$SHARDED_BACKUP_NAME" true

  local BACKUP_NAME
  local SHARDED_CLUSTER_NAME="$CLUSTER_NAME"
  local CLUSTER_NAME
  local NODE=0
  local SUFFIX
  for SUFFIX in coord shard0 shard1
  do
    CLUSTER_NAME="$SHARDED_CLUSTER_NAME-$SUFFIX"
    BACKUP_NAME="$SHARDED_BACKUP_NAME-$SUFFIX"
    wait_backup_is_completed "$BACKUP_NAME" "$NODE"
  done

  wait_sharded_backup_is_completed "$SHARDED_BACKUP_NAME"

  if kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" "$SHARDED_BACKUP_NAME" \
    --template='{{ range .status.sgBackups }}{{ . }} {{ end }}' \
    | grep -qFx "$SHARDED_BACKUP_NAME-coord $SHARDED_BACKUP_NAME-shard0 $SHARDED_BACKUP_NAME-shard1 "
  then
    echo "SUCCESS: Backups are referenced correctly in the sharded backup"
  else
    echo "FAIL: Backups are not referenced correctly in the sharded backup"
    return 1
  fi

  CLUSTER_NAME="$SHARDED_CLUSTER_NAME"
  SHARDED_BACKUP_NAME_1="$(get_sgshardedbackup_name "${CLUSTER_NAME}-$(shuf -i 0-65535 -n 1)")"
  SHARDED_BACKUP_NAME_2="$(get_sgshardedbackup_name "${CLUSTER_NAME}-$(shuf -i 0-65535 -n 1)")"
  create_sharded_backup "$SHARDED_BACKUP_NAME_1" true
  wait_sharded_backup_is_completed "$SHARDED_BACKUP_NAME_1"
  create_sharded_backup "$SHARDED_BACKUP_NAME_2" true
  wait_sharded_backup_is_completed "$SHARDED_BACKUP_NAME_2"

  if ! kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" "$SHARDED_BACKUP_NAME" >/dev/null 2>&1
  then
    echo "SUCCESS: Sharded backups retention policy is working"
  else
    echo "FAIL: Sharded backups retention policy is not working"
    return 1
  fi
}

check_automatic_sharded_backup_is_working() {
  enable_sharded_cluster_cron_schedule

  if wait_until is_automatic_sharded_backup_cr_completed
  then
    echo "SUCCESS. The full automatic sharded backup is available"
  else
    echo "FAIL. The full automatic sharded backup is not available"
    return 1
  fi

  local BACKUP_NAMES

  BACKUP_NAMES="$(kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" \
    --template '{{ range .items }}{{ .status.process.status }} {{ .spec.managedLifecycle }} {{ .spec.sgShardedCluster }} {{ range .status.sgBackups }}{{ . }} {{ end }}{{ print "\n" }}{{ end }}' \
    | grep "^Completed true ${CLUSTER_NAME} " | tail -n 1 | cut -d ' ' -f 4-)"

  if [ -z "$BACKUP_NAMES" ]
  then
    echo "FAIL. Can not retrieve backups associated to the full automatic sharded backup"
    return 1
  fi

  local BACKUP_NAME
  local SHARDED_CLUSTER_NAME="$CLUSTER_NAME"
  local CLUSTER_NAME
  local NODE=0
  for BACKUP_NAME in $BACKUP_NAMES
  do
    if CLUSTER_NAME="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
      --template='{{ .status.process.status }} {{ .spec.sgCluster }}' \
      | grep '^Completed ')"
    then
      CLUSTER_NAME="$(printf %s "$CLUSTER_NAME" | cut -d ' ' -f 2)"

      check_timelines

      check_control_data

      echo "SUCCESS. The full backup $BACKUP_NAME is available"
    else
      echo "FAIL. The full backup $BACKUP_NAME is not available"
      return 1
    fi
  done

  CLUSTER_NAME="$SHARDED_CLUSTER_NAME"
  disable_sharded_cluster_cron_schedule
}


create_sharded_backup() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGShardedBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE"
  name: "$1"
spec:
  sgShardedCluster: "$CLUSTER_NAME"
  managedLifecycle: $2
EOF
}

wait_sharded_backup_is_completed() {
  local BACKUP_NAME="$1"
  if wait_until eval '[ "$(kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
    --template "{{ .status.process.status }}" \
    | grep "^Completed$" | wc -l)" -gt 0 ]'
  then
    echo "SUCCESS. The sharded backup CR has complete"
  else
    echo "FAIL. The sharded backup CR has failed"
    return 1
  fi
}

enable_sharded_cluster_cron_schedule() {
  # Sets the value At every minute.
  kubectl patch sgshardedcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    --patch '[{"op":"replace","path":"/spec/configurations/backups/0/cronSchedule","value":"*/1 * * * *"}]'
}

disable_sharded_cluster_cron_schedule() {
  # Sets the value At 05:00 on day-of-month 31 in February.
  kubectl patch sgshardedcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    --patch '[{"op":"replace","path":"/spec/configurations/backups/0/cronSchedule","value":"0 5 31 2 *"}]'
}

is_automatic_sharded_backup_cr_completed() {
  kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" \
    --template '{{ range .items }}{{ .status.process.status }} {{ .spec.managedLifecycle }} {{ .spec.sgShardedCluster }}{{ print "\n" }}{{ end }}' \
    | grep -q "^Completed true ${CLUSTER_NAME}$"
}

check_restore_sharded_backup_is_working() {
  SHARDED_BACKUP_NAME="$(kubectl get sgshardedbackup -n "$CLUSTER_NAMESPACE" \
    --template '{{ range .items }}{{ printf "%s %s\n" .status.process.status .metadata.name }}{{ end }}' \
    | grep "^Completed " | head -n 1 | cut -d ' ' -f 2)"

  kubectl get secret -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | jq "del(.metadata.ownerReferences) | del(.metadata.labels) | .metadata.name = \"$CLUSTER_NAME-back\"" \
    | kubectl create -f -

  remove_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  kubectl get secret -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-back" -o json \
    | jq ".metadata.name = \"$CLUSTER_NAME\"" \
    | kubectl create -f -

  create_or_replace_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "3" "2" \
    --set-string cluster.initialData.restore.fromBackup.name="$SHARDED_BACKUP_NAME"

  local RESULT EXIT_CODE
  try_function wait_pods_running "$CLUSTER_NAMESPACE" 7

  if "$RESULT"
  then
    try_function wait_sharded_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  fi

  if "$RESULT"
  then
    echo "SUCCESS. The sharded cluster has been recovered from the sharded backup"
  else
    echo "FAIL. The sharded cluster has not been recovered from the sharded backup"
    return 1
  fi
}
