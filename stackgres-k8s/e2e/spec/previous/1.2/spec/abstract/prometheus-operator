#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test() {
  run_test "Check that exporter pod monitor was created" check_exporter_pod_monitor
  run_test "Check that envoy pod monitor was created" check_envoy_pod_monitor
  run_test "Check that grafana is embedded" check_grafana_embedded
  run_test "Check that grafana secret is used" check_grafana_secret
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
  uninstall_prometheus_operator
}

check_grafana_secret() {
  upgrade_operator \
    --set grafana.autoEmbed=true \
    --set-string grafana.webHost="prometheus-grafana.$(prometheus_namespace)" \
    --set grafana.secretNamespace="$(prometheus_namespace)" \
    --set grafana.secretName="prometheus-grafana" \
    --set grafana.secretUserKey="admin-user" \
    --set grafana.secretPasswordKey="admin-password"

  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "https://stackgres-restapi.$OPERATOR_NAMESPACE/grafana" -o /dev/null --fail
  then
    echo "SUCCESS. Grafana URL can be retrieved"
  else
    echo "FAIL. Grafana URL can not be retrieved"
    return 1
  fi
}

check_exporter_pod_monitor() {
  local SERVICE_MONITOR="$CLUSTER_NAMESPACE-$CLUSTER_NAME-stackgres-postgres-exporter"

  if wait_until kubectl get podmonitors.monitoring.coreos.com -n "$(prometheus_namespace)" "$SERVICE_MONITOR"
  then
    echo "Exporter pod monitor was created"
  else
    echo "Exporter pod monitor wasn't created"
    return 1
  fi

  if wait_until eval "[ \"\$(kubectl exec -i -n '$CLUSTER_NAMESPACE' curl \
    -- curl -s -f 'http://$(prometheus_service).$(prometheus_namespace):9090/api/v1/query?query=pg_settings_shared_buffers_bytes' \
    | jq -r '.data.result | length')\" -gt 0 ]"
  then
    echo "Exporter metric pg_settings_shared_buffers_bytes was found on prometheus"
  else
    echo "Exporter metric pg_settings_shared_buffers_bytes wasn't found on prometheus"
    return 1
  fi

  if wait_until eval "[ \"\$(kubectl exec -i -n '$CLUSTER_NAMESPACE' curl \
    -- curl -s -f 'http://$(prometheus_service).$(prometheus_namespace):9090/api/v1/query?query=pg_stat_activity_count' \
    | jq -r '.data.result | length')\" -gt 0 ]"
  then
    echo "Exporter metric pg_stat_activity_count was found on prometheus"
  else
    echo "Exporter metric pg_stat_activity_count wasn't found on prometheus"
    return 1
  fi
}

check_envoy_pod_monitor() {
  local SERVICE_MONITOR="$CLUSTER_NAMESPACE-$CLUSTER_NAME-stackgres-envoy"

  if wait_until kubectl get podmonitors.monitoring.coreos.com -n "$(prometheus_namespace)" "$SERVICE_MONITOR"
  then
    echo "Envoy pod monitor was created"
  else
    echo "Envoy pod monitor wasn't created"
    return 1
  fi

  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- \
    curl "http://$(prometheus_service).$(prometheus_namespace):9090/api/v1/query?query=envoy_cluster_upstream_cx_rx_bytes_total"
  then
    echo "Envoy metrics was found on prometheus"
  else
    echo "Envoy metrics wasn't found on prometheus"
    return 1
  fi
}

check_grafana_embedded() {
  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "https://stackgres-restapi.$OPERATOR_NAMESPACE/grafana" -o /dev/null --fail
  then
    echo "SUCCESS. Grafana URL can be retrieved"
  else
    echo "FAIL. Grafana URL can not be retrieved"
    return 1
  fi

  GRAFANA_URL="$(kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "https://stackgres-restapi.$OPERATOR_NAMESPACE/grafana" --fail)"

  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "$GRAFANA_URL" -o /dev/null --fail
  then
    echo "SUCCESS. Grafana URL $GRAFANA_URL is accessible"
  else
    echo "FAIL. Grafana URL $GRAFANA_URL is not accessible"
    return 1
  fi

  if wait_until eval 'kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "$GRAFANA_URL" --fail | grep -q "\(<grafana-app \|<title>Grafana</title>\)"'
  then
    echo "SUCCESS. Grafana URL $GRAFANA_URL is returning grafana Web"
  else
    echo "FAIL. Grafana URL $GRAFANA_URL is not returning grafana Web"
    kubectl exec -i -n "$CLUSTER_NAMESPACE" curl -- curl -s -k "$GRAFANA_URL" --fail
    return 1
  fi

  if [ "$(kubectl get deployment -n "$OPERATOR_NAMESPACE" stackgres-operator --template '{{ len .spec.template.spec.containers }}')" -ne 1 ]
  then
    echo "Skipping check since operator environment variable can not be changed when operator is not deployed in kubernetes"
    return
  fi

  echo "Checking that if env variable GRAFANA_EMBEDDED is set to false any cluster shouldn't be marked with grafana embedded"

  kubectl set env -n "$OPERATOR_NAMESPACE" deployment/stackgres-restapi GRAFANA_EMBEDDED=false

  if wait_until eval '[ "$(get_grafana_embedded)" != "true" ]'
  then
    echo "SUCCESS. Grafana is not marked as embedded"
  else
    echo "FAIL. Grafana is marked as embedded"
    return 1
  fi

  echo "Checking that if env variable GRAFANA_EMBEDDED is set to true the cluster should be marked with grafana embedded"

  kubectl set env -n "$OPERATOR_NAMESPACE" deployment/stackgres-restapi GRAFANA_EMBEDDED=true

  if wait_until eval '[ "$(get_grafana_embedded)" = "true" ]'
  then
    echo "SUCCESS. Grafana is embedded"
  else
    echo "FAIL. Grafana is not embedded"
    return 1
  fi
}

get_grafana_embedded() {
  run_curl -r "stackgres/namespaces/$CLUSTER_NAMESPACE/sgclusters/$CLUSTER_NAME" -e "-L" | jq '.grafanaEmbedded' -r
}

prometheus_namespace() {
  echo "$CLUSTER_NAMESPACE-monitor"
}

prometheus_service() {
  echo "prometheus-kube-prometheus-prometheus"
}

install_prometheus_operator() {
  install_prometheus_operator_for_version 18.0.6 "$@"
}

install_prometheus_operator_for_version() {
  local KUBE_PROMETHEUS_STACK_VERSION="$1"
  shift

  if [ "$E2E_ENV" = "minishift" ] || [ "$E2E_ENV" = "crc" ] || [ "$E2E_ENV" = "microshift" ]
  then
    if [ "$E2E_ENV" = "minishift" ]
    then
      eval "$(minishift oc-env)"
    fi
    if [ "$E2E_ENV" = "crc" ]
    then
      eval "$(crc oc-env)"
    fi
    if [ "$E2E_ENV" = "microshift" ]
    then
      alias oc="docker exec -ti '$K8S_NAME' oc"
    fi
    kubectl create ns "$(prometheus_namespace)"
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-admission
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-operator
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-prometheus
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-kube-prometheus-admission
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-kube-prometheus-operator
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-kube-prometheus-prometheus
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-grafana
  fi

  helm install prometheus "$E2E_PATH/helm/kube-prometheus-stack-$KUBE_PROMETHEUS_STACK_VERSION.tgz" \
    --create-namespace \
    --namespace "$(prometheus_namespace)" \
    --disable-openapi-validation \
    --set prometheusOperator.createCustomResource=false \
    --set alertmanager.enabled=false \
    --set kubeStateMetrics.enabled=false \
    --set nodeExporter.enabled=false \
    --set kubeDns.enabled=false \
    --set kubeProxy.enabled=false \
    --set kubeScheduler.enabled=false \
    --set coreDns.enabled=false \
    --set kubeControllerManager.enabled=false \
    --set kubeEtcd.enabled=false \
    "$@"

  wait_pods_running "$(prometheus_namespace)" 3
}

uninstall_prometheus_operator() {
  helm_cleanup_chart prometheus "$(prometheus_namespace)"
  k8s_async_cleanup_namespace "$(prometheus_namespace)"
}
