#!/bin/sh

export E2E_MINOR_SOURCE_POSTGRES_VERSION="${E2E_MINOR_SOURCE_POSTGRES_VERSION:-13.4}"
export E2E_MINOR_TARGET_POSTGRES_VERSION="${E2E_MINOR_TARGET_POSTGRES_VERSION:-13.5}"

e2e_test_install() {
  CLUSTER_NAME="$(get_sgcluster_name dbops-restart)"
  DBOPS_NAME="$(get_sgdbops_name minor-version-upgrade)"

  kubectl create namespace "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
}

reset_cluster() {
  remove_cluster_if_exists "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  wait_until eval '[ "$(kubectl get pvc -n "$CLUSTER_NAMESPACE" --template "{{ .items | len }}")" = 0 ]'

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string cluster.postgres.version="$E2E_MINOR_SOURCE_POSTGRES_VERSION"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  generate_mock_data "$CLUSTER_NAME"
  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"

  if kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p "$(cat << EOF
[
  {"op":"replace","path":"/spec/postgres/version","value":"$E2E_MINOR_TARGET_POSTGRES_VERSION"}
]
EOF
        )" >/dev/null 2>&1
  then
    echo "FAILED. Changed SGCluster postgres version directly."
    return 1
  else
    echo "SUCCESS. Could not change SGCluster postgres version directly."
  fi
}

check_restart() {
  local RESTARTED_PODS="$1"
  local NOT_RESTARTED_PODS="$2"

  assert_dbops_running "$DBOPS_NAME" "$CLUSTER_NAMESPACE"

  wait_until eval '[ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ if .metadata.annotations.lockTimestamp }}{{ .metadata.annotations.lockTimestamp }}{{ else }}0{{ end }}")" != 0 ]'
  if kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"replace","path":"/spec/metadata","value":{"annotations":{"allResources":{"'"$(random_string)"'": "'"$(random_string)"'"}}}}]' \
    >/dev/null 2>&1
  then
    echo "FAILED. Cluster has been updated while locked."
    return 1
  else
    echo "SUCCESS. Cluster has not been updated while locked."
  fi

  assert_dbops_completion "$DBOPS_NAME" "$CLUSTER_NAMESPACE" "$((E2E_TIMEOUT * 2))"

  if [ -z "$RESTARTED_PODS" ]
  then
     RESTARTED_PODS="$(kubectl get pod -n "$CLUSTER_NAMESPACE" -l "app=StackGresCluster,cluster-name=$CLUSTER_NAME,cluster=true" \
      --template '{{ range .items }}{{ printf "%s " .metadata.name }}{{ end }}')"
  fi
  printf '%s %s' "$RESTARTED_PODS" "$NOT_RESTARTED_PODS" | wc -w | grep -q '^2$'

  local DBOPS_CREATION_TIMESTAMP
  DBOPS_CREATION_TIMESTAMP="$(kubectl get sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME" --template='{{ .metadata.creationTimestamp }}')"
  DBOPS_CREATION_TIMESTAMP="$(date -d "$DBOPS_CREATION_TIMESTAMP" +%s)"
  local POD_CREATION_TIMESTAMP
  local POD
  for POD in $RESTARTED_PODS
  do
    POD_CREATION_TIMESTAMP="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$POD" --template='{{ .metadata.creationTimestamp }}')"
    POD_CREATION_TIMESTAMP="$(date -d "$POD_CREATION_TIMESTAMP" +%s)"
    if [ "$POD_CREATION_TIMESTAMP" -lt "$DBOPS_CREATION_TIMESTAMP" ]
    then
      echo "FAILED. Pod $POD was not restarted"
      return 1
    else
      echo "SUCCESS. Pod $POD was restarted"
    fi
  done
  for POD in $NOT_RESTARTED_PODS
  do
    POD_CREATION_TIMESTAMP="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$POD" --template='{{ .metadata.creationTimestamp }}')"
    POD_CREATION_TIMESTAMP="$(date -d "$POD_CREATION_TIMESTAMP" +%s)"
    if [ "$POD_CREATION_TIMESTAMP" -lt "$DBOPS_CREATION_TIMESTAMP" ]
    then
      echo "SUCCESS. Pod $POD was not restarted"
    else
      echo "FAILED. Pod $POD was restarted"
      return 1
    fi
  done

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "stackgres.io/dbops-name=$DBOPS_NAME,stackgres.io/db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. minor version upgrade job was not removed after completion."
  else
    echo "FAILED. minor version upgrade job was removed after completion."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" sgcluster "$CLUSTER_NAME" \
    --template '{{ .spec.postgres.version }}')" = "$E2E_MINOR_TARGET_POSTGRES_VERSION" ]
  then
    echo "SUCCESS. cluster postgres version has been updated."
  else
    echo "FAILED. cluster postgres version has not been updated."
    return 1
  fi

  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}
