#!/bin/sh

. "$SPEC_PATH/abstract/metrics"

e2e_test_extra_hash() {
  "$SHELL" "$PROJECT_PATH/stackgres-k8s/ci/build/build-functions.sh" path_hash \
    "$(realpath --relative-to "$PROJECT_PATH" "$SPEC_PATH/abstract/metrics")"
}

e2e_test_install() {
  PRIMARY_CLUSTER_NAME="$(get_sgcluster_name "primary-$SPEC_NAME")"
  create_or_replace_cluster "$PRIMARY_CLUSTER_NAME" "$CLUSTER_NAMESPACE" "1"
  wait_cluster "$PRIMARY_CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --set configurations.create=false \
    --set instanceProfiles=null \
    --set-string cluster.replicateFrom.instance.external.host="$PRIMARY_CLUSTER_NAME" \
    --set cluster.replicateFrom.instance.external.port=5433 \
    --set-string cluster.replicateFrom.users.superuser.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.superuser.username.key="PATRONI_SUPERUSER_USERNAME" \
    --set-string cluster.replicateFrom.users.superuser.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.superuser.password.key="PATRONI_SUPERUSER_PASSWORD" \
    --set-string cluster.replicateFrom.users.replication.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.replication.username.key="PATRONI_REPLICATION_USERNAME" \
    --set-string cluster.replicateFrom.users.replication.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.replication.password.key="PATRONI_REPLICATION_PASSWORD" \
    --set-string cluster.replicateFrom.users.authenticator.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.authenticator.username.key="PATRONI_authenticator_USERNAME" \
    --set-string cluster.replicateFrom.users.authenticator.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.authenticator.password.key="PATRONI_authenticator_PASSWORD"
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" "4"
}

e2e_test() {
  run_test "Checking that standby is working" check_standby_is_working

  run_test "Checking that metrics are exported" check_metrics

  run_test "Checking that standby can be converted to primary" check_standby_can_be_converted_to_primary

  run_test "Checking that primary can be converted to standby" check_primary_can_be_converted_to_standby
}

check_standby_is_working() {
  wait_until check_connectivity -i 0

  local SYNCHRONOUS_STANDBY_NAMES
  SYNCHRONOUS_STANDBY_NAMES="$(kubectl exec -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-0" -c postgres-util -- \
    psql -At -c 'SHOW synchronous_standby_names')"
  if echo "$SYNCHRONOUS_STANDBY_NAMES" | grep -q '^$'
  then
    echo "SUCCESS: async replication is set for leader"
  else
    echo "FAIL: async replication is not set for leader"
    return 1
  fi

  local RESULT EXIT_CODE
  try_function run_query -p 5432 -h "$CLUSTER_NAME" -i 1 -q "CREATE DATABASE test;"
  if "$RESULT"
  then
    echo "FAIL: It should not be possible to create a database in the leader node of the standby cluster"
    return 1
  else
    echo "SUCCESS: It is not possible to create a database in the leader node of the standby cluster" 
  fi

  wait_until check_connectivity -i 1
  try_function run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -q "CREATE TABLE fibonacci(num integer);" > "${LOG_PATH}/test1.log"
  if "$RESULT"
  then
    echo "FAIL: It's possible to create a table in the replica node"
    return 1
  else
    echo "SUCCESS: Good it is not possible to create a table in the replica node" 
  fi

  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "CREATE DATABASE test;"
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "CREATE TABLE fibonacci(num integer);" -d test
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (1);" -d test
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (2);" -d test
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (3);" -d test

  PRIMARY_RESPONSE="$(run_query -c "primary-$CLUSTER_NAME" -p 5432 -i 0 -h "primary-$CLUSTER_NAME" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test")"

  if [ "$(echo "$PRIMARY_RESPONSE" | tr -d '\n')" = "123" ]
  then
    echo "SUCCESS: inserts on the primary where sucessful."
  else
    echo "FAIL: inserts on the primary where not sucessful."
    return 1
  fi

  try_function wait_until eval '
    STANDBY_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test")"
    [ "$(echo "$PRIMARY_RESPONSE" | tr -d "\n")" = "$(echo "$STANDBY_RESPONSE" | tr -d "\n")" ]
    '
  if "$RESULT"
  then
    echo "SUCCESS: standby replication is working"
  else
    echo "FAIL: standby replication  is not working. The records don't match between primary and standby for the fibonacci table"
    return 1
  fi

  try_function wait_until eval '
    REPLICA_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test")"
    [ "$(echo "$PRIMARY_RESPONSE" | tr -d "\n")" = "$(echo "$REPLICA_RESPONSE" | tr -d "\n")" ]
    '
  if "$RESULT"
  then
    echo "SUCCESS: replication is working"
  else
    echo "FAIL: replication is not working. The records don't match between primary and replica for the fibonacci table"
    return 1
  fi
}

check_standby_can_be_converted_to_primary() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set configurations.create=false \
    --set instanceProfiles=null \
    --set cluster.replicateFrom=null

  local RESULT EXIT_CODE
  try_function wait_until run_query -p 5432 -h "$CLUSTER_NAME" -i 1 -q "CREATE DATABASE test2;"
  if "$RESULT"
  then
    echo "SUCCESS: The leader node of the standby cluster was converted to a primary" 
  else
    echo "FAIL: The leader node of the standby cluster was not converted to a primary"
    return 1
  fi

  run_query -p 5432 -h "$CLUSTER_NAME" -i 0 -q "CREATE TABLE fibonacci(num integer);" -d test2
  run_query -p 5432 -h "$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (1);" -d test2
  run_query -p 5432 -h "$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (2);" -d test2
  run_query -p 5432 -h "$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (3);" -d test2
  run_query -p 5432 -h "$CLUSTER_NAME" -i 0 -q "CHECKPOINT;" -d test2

  PRIMARY_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test2")"

  if [ "$(echo "$PRIMARY_RESPONSE" | tr -d '\n')" = "123" ]
  then
    echo "SUCCESS: inserts on the primary where sucessful."
  else
    echo "FAIL: inserts on the primary where not sucessful."
    return 1
  fi

  try_function wait_until eval '
    REPLICA_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test2")"
    [ "$(echo "$PRIMARY_RESPONSE" | tr -d "\n")" = "$(echo "$REPLICA_RESPONSE" | tr -d "\n")" ]
    '
  if "$RESULT"
  then
    echo "SUCCESS: replication is working"
  else
    echo "FAIL: replication is not working. The records don't match between primary and replica for the fibonacci table"
    return 1
  fi
}

check_primary_can_be_converted_to_standby() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "2" \
    --reset-values \
    --set configurations.create=false \
    --set instanceProfiles=null \
    --set-string cluster.replicateFrom.instance.external.host="$PRIMARY_CLUSTER_NAME" \
    --set cluster.replicateFrom.instance.external.port=5433 \
    --set-string cluster.replicateFrom.users.superuser.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.superuser.username.key="PATRONI_SUPERUSER_USERNAME" \
    --set-string cluster.replicateFrom.users.superuser.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.superuser.password.key="PATRONI_SUPERUSER_PASSWORD" \
    --set-string cluster.replicateFrom.users.replication.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.replication.username.key="PATRONI_REPLICATION_USERNAME" \
    --set-string cluster.replicateFrom.users.replication.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.replication.password.key="PATRONI_REPLICATION_PASSWORD" \
    --set-string cluster.replicateFrom.users.authenticator.username.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.authenticator.username.key="PATRONI_authenticator_USERNAME" \
    --set-string cluster.replicateFrom.users.authenticator.password.name="$PRIMARY_CLUSTER_NAME" \
    --set-string cluster.replicateFrom.users.authenticator.password.key="PATRONI_authenticator_PASSWORD"

  local RESULT EXIT_CODE
  try_function wait_until run_query -p 5432 -h "$CLUSTER_NAME" -i 1 -q "$(cat << 'EOF'
DO $$BEGIN
  IF EXISTS (SELECT * FROM pg_database WHERE datname = 'test2')
  THEN
    RAISE EXCEPTION 'Database test2 does exists';
  END IF;
END$$;
EOF
    )"
  if "$RESULT"
  then
    echo "SUCCESS: The leader node of the standby cluster is following the primary cluster" 
  else
    echo "FAIL: The leader node of the standby cluster is not following the primary cluster"
    return 1
  fi

  local RESULT EXIT_CODE
  try_function run_query -p 5432 -h "$CLUSTER_NAME" -i 1 -q "CREATE DATABASE test2;"
  if "$RESULT"
  then
    echo "FAIL: It should not be possible to create a database in the leader node of the standby cluster"
    return 1
  else
    echo "SUCCESS: It is not possible to create a database in the leader node of the standby cluster" 
  fi

  wait_until check_connectivity -i 1
  try_function run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -q "CREATE TABLE fibonacci(num integer);" > "${LOG_PATH}/test1.log"
  if "$RESULT"
  then
    echo "FAIL: It's possible to create a table in the replica node"
    return 1
  else
    echo "SUCCESS: Good it is not possible to create a table in the replica node" 
  fi

  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "CREATE DATABASE test2;"
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "CREATE TABLE fibonacci(num integer);" -d test2
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (1);" -d test2
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (2);" -d test2
  run_query -c "primary-$CLUSTER_NAME" -p 5432 -h "primary-$CLUSTER_NAME" -i 0 -q "INSERT INTO fibonacci(num) VALUES (3);" -d test2

  PRIMARY_RESPONSE="$(run_query -c "primary-$CLUSTER_NAME" -p 5432 -i 0 -h "primary-$CLUSTER_NAME" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test2")"

  if [ "$(echo "$PRIMARY_RESPONSE" | tr -d '\n')" = "123" ]
  then
    echo "SUCCESS: inserts on the primary where sucessful."
  else
    echo "FAIL: inserts on the primary where not sucessful."
    return 1
  fi

  try_function wait_until eval '
    STANDBY_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test2")"
    [ "$(echo "$PRIMARY_RESPONSE" | tr -d "\n")" = "$(echo "$STANDBY_RESPONSE" | tr -d "\n")" ]
    '
  if "$RESULT"
  then
    echo "SUCCESS: standby replication is working"
  else
    echo "FAIL: standby replication  is not working. The records don't match between primary and standby for the fibonacci table"
    return 1
  fi

  try_function wait_until eval '
    REPLICA_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -q "SELECT num FROM fibonacci ORDER BY num;" -d "test2")"
    [ "$(echo "$PRIMARY_RESPONSE" | tr -d "\n")" = "$(echo "$REPLICA_RESPONSE" | tr -d "\n")" ]
    '
  if "$RESULT"
  then
    echo "SUCCESS: replication is working"
  else
    echo "FAIL: replication is not working. The records don't match between primary and replica for the fibonacci table"
    return 1
  fi
}
