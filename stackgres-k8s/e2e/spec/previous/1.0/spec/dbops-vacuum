#!/bin/sh

e2e_test_install() {
  DBOPS_NAME=vacuum

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  wait_pods_running "$CLUSTER_NAMESPACE" 1
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Checking that vacuum is working" check_vacuum_is_working

  run_test "Checking that vacuum full is working" check_vacuum_full_is_working

  run_test "Checking that vacuum freeze is working" check_vacuum_freeze_is_working

  run_test "Checking that vacuum analyze is working" check_vacuum_analyze_is_working

  run_test "Checking that vacuum with disable page skipping is working" check_vacuum_disable_page_skipping_is_working

  run_test "Checking that vacuum is working for specific databases" check_vacuum_specific_databases_is_working

  run_test "Checking that vacuum timeout works correctly" check_vacuum_timed_out
}

check_vacuum_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum_full_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  vacuum:
    full: true
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum_freeze_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  vacuum:
    freeze: true
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum_analyze_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  vacuum:
    analyze: true
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum_disable_page_skipping_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  vacuum:
    disablePageSkipping: true
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum_specific_databases_is_working() {
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'template1' AND pid != pg_backend_pid()"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "CREATE DATABASE test1"
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -n "$CLUSTER_NAMESPACE" -c "$CLUSTER_NAME" \
    -q "CREATE DATABASE test2;"
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  vacuum:
    databases:
    - name: test1
      full: true
    - name: test2
      analyze: true
EOF

  check_vacuum

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"
}

check_vacuum() {
  assert_dbops_running "$DBOPS_NAME" "$CLUSTER_NAMESPACE"

  assert_dbops_completion "$DBOPS_NAME" "$CLUSTER_NAMESPACE"

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=$DBOPS_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. vacuum job was not removed after completion."
  else
    echo "FAILED. vacuum job was removed after completion."
    return 1
  fi
}

check_vacuum_timed_out() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: vacuum
  timeout: PT1S
  vacuum:
    full: true
    analyze: true
EOF

  if kubectl wait --timeout "${E2E_TIMEOUT}s" -n "$CLUSTER_NAMESPACE" sgdbops "$DBOPS_NAME" \
    --for condition=Failed
  then
    echo "SUCCESS. vacuum failed."
  else
    echo "FAILED. vacuum did not fail."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=$DBOPS_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. vacuum job was not removed after failure."
  else
    echo "FAILED. vacuum job was removed after failure."
    return 1
  fi

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" "$DBOPS_NAME"

  if wait_until eval '[ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "dbops-name=$DBOPS_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 0 ]'
  then
    echo "SUCCESS. vacuum job was removed after sgdbops was removed."
  else
    echo "FAILED. vacuum job was not removed after sgdbops was removed."
    return 1
  fi
}
