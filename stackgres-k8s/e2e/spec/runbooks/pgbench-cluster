#!/bin/sh

E2E_PGBENCH_MAX_CLIENTS="${E2E_PGBENCH_MAX_CLIENTS:-20}"
E2E_PGBENCH_OPTIONS="${E2E_PGBENCH_OPTIONS:--c 20 -j 20}"

e2e_test_install() {
  kubectl create namespace "$CLUSTER_NAMESPACE"
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string instanceProfiles[0].name=size-s \
    --set-string instanceProfiles[0].cpu="${PATRONI_CPU:-500m}" \
    --set-string instanceProfiles[0].memory="${PATRONI_MEMORY:-2Gi}" \
    --set nonProductionOptions.disablePatroniResourceRequirements="${DISABLE_PATRONI_REQUIREMENTS:-false}" \
    --set nonProductionOptions.disableClusterResourceRequirements=true \
    --set-string "configurations.postgresconfig.postgresql\.conf.max_connections=$((E2E_PGBENCH_MAX_CLIENTS * 5 + 4))" \
    --set-string "configurations.poolingconfig.pgBouncer.pgbouncer\.ini.default_pool_size=$((E2E_PGBENCH_MAX_CLIENTS * 5))" \
    --set-string 'cluster.autoscaling.mode=none'

  deploy_psql_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  PGPASSWORD="$(kubectl get secret -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template '{{ (index .data "superuser-password") | base64decode }}')"
  kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD pgbench -i -h $CLUSTER_NAME -s 10"
  kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD psql -h $CLUSTER_NAME -c 'ALTER TABLE pgbench_history ADD COLUMN hid INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY'"
}

e2e_test_uninstall() {
  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Benchmarking cluster" benchmark_cluster
}

benchmark_cluster() {
  wait_until kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD psql -h $CLUSTER_NAME-replicas -c 'SELECT 1'"
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        kubectl exec -n "$CLUSTER_NAMESPACE" psql \
          -- bash -c "PGPASSWORD=$PGPASSWORD pgbench -T '$((E2E_TIMEOUT / 2))' -C --progress=5 --log --log-prefix=/tmp/pgbench_log --failures-detailed --aggregate-interval='$((E2E_TIMEOUT / 20))' -h '$CLUSTER_NAME' $PGBENCH_OPTIONS" 2>&1 | tee "$LOG_PATH/bench-$INDEX" &
        BENCH_PID="$!"
        trap_kill "$BENCH_PID"
        if wait_until eval '! kill -0 "$BENCH_PID"' \
          && ! grep -q '^command terminated with exit code [1-9]' "$LOG_PATH/bench-$INDEX"
        then
          echo "success Benchmark terminated succesfully"
        else
          echo "FAIL: Benchmark not terminated succesfully"
          kill "$BENCH_PID" || true
          kubectl exec -n "$CLUSTER_NAMESPACE" psql \
            -- bash -c 'ps -ef | grep "[p]gbench" | tr -s " " | cut -d " " -f 2 | while read PID; do kill "$PID"; done' || true
          return 1
        fi
        kill "$BENCH_PID" || true
        kubectl exec -n "$CLUSTER_NAMESPACE" psql \
          -- bash -c 'ps -ef | grep "[p]gbench" | tr -s " " | cut -d " " -f 2 | while read PID; do kill "$PID"; done' || true
        kubectl exec -n "$CLUSTER_NAMESPACE" psql -- bash -c 'cat /tmp/pgbench_log*' > "$LOG_PATH/pgbench-transactions-$INDEX"
        kubectl exec -n "$CLUSTER_NAMESPACE" psql -- bash -c 'rm -f /tmp/pgbench_log*'
        INDEX="$((INDEX + 1))"
      done
  echo "Test results"
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        echo
        printf 'pgbench options: %s\n' "$PGBENCH_OPTIONS"
        echo
        cat "$LOG_PATH/bench-$INDEX"
        INDEX="$((INDEX + 1))"
      done
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        echo
        printf 'pgbench options: %s\n' "$PGBENCH_OPTIONS"
        echo
        echo To copy values use:
        echo "cat '$LOG_PATH/pgbench-transactions-$INDEX' | xclip -selection c"
        INDEX="$((INDEX + 1))"
      done
}