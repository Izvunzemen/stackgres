#!/bin/sh

E2E_PGBENCH_MAX_CLIENTS="${E2E_PGBENCH_MAX_CLIENTS:-20}"
E2E_PGBENCH_OPTIONS="${E2E_PGBENCH_OPTIONS:--c 20 -j 20}"

e2e_test_install() {
  STREAM_NAME="$(get_sgstream_name stream)"
  TARGET_CLUSTER_NAME="$(get_sgstream_name "$SPEC_NAME-target")"

  kubectl create namespace "$CLUSTER_NAMESPACE"
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string instanceProfiles[0].name=size-s \
    --set-string instanceProfiles[0].cpu=500m \
    --set-string instanceProfiles[0].memory=2Gi \
    --set nonProductionOptions.disablePatroniResourceRequirements=false \
    --set nonProductionOptions.disableClusterResourceRequirements=true \
    --set-string "configurations.postgresconfig.postgresql\.conf.max_connections=$((E2E_PGBENCH_MAX_CLIENTS * 5 + 4))" \
    --set-string "configurations.poolingconfig.pgBouncer.pgbouncer\.ini.default_pool_size=$((E2E_PGBENCH_MAX_CLIENTS * 5))" \
    --set-string 'cluster.autoscaling.mode=none'

  deploy_psql_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  PGPASSWORD="$(kubectl get secret -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template '{{ (index .data "superuser-password") | base64decode }}')"
  kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD pgbench -i -h $CLUSTER_NAME -s 10"
  kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD psql -h $CLUSTER_NAME -c 'ALTER TABLE pgbench_history ADD COLUMN hid INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY'"
}

e2e_test_uninstall() {
  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Benchmarking cluster" benchmark_cluster
}

benchmark_cluster() {
  wait_until kubectl exec -n "$CLUSTER_NAMESPACE" psql \
    -- bash -c "PGPASSWORD=$PGPASSWORD psql -h $CLUSTER_NAME-replicas -c 'SELECT 1'"
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        remove_cluster_if_exists "$TARGET_CLUSTER_NAME" "$CLUSTER_NAMESPACE"
        create_or_replace_cluster "$TARGET_CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
          --set configurations.create=false \
          --set instanceProfiles=null
        wait_cluster "$TARGET_CLUSTER_NAME" "$CLUSTER_NAMESPACE"
        cat << EOF | tee "$LOG_PATH/stream.yaml" | kubectl replace --force -f -
  apiVersion: stackgres.io/v1alpha1
  kind: SGStream
  metadata:
    namespace: $CLUSTER_NAMESPACE
    name: $STREAM_NAME
  spec:
    source:
      type: SGCluster
      sgCluster:
        name: $CLUSTER_NAME
    target:
      type: SGCluster
      sgCluster:
        name: "$TARGET_CLUSTER_NAME"
    pods:
      persistentVolume:
        size: 5Gi
EOF
        wait_pods_running "$CLUSTER_NAMESPACE" 5
        wait_until eval 'kubectl get sgstream -n "$CLUSTER_NAMESPACE" "$STREAM_NAME" -o json | jq .status.snapshot.snapshotCompleted | grep -qxF "true"' 
        wait_until kubectl exec -n "$CLUSTER_NAMESPACE" deploy/"$STREAM_NAME" -- curl -f localhost:8080/q/metrics > /dev/null
        kubectl exec -n "$CLUSTER_NAMESPACE" psql \
          -- bash -c "PGPASSWORD=$PGPASSWORD pgbench -T '$((E2E_TIMEOUT / 2))' -C --progress=5 --log --log-prefix=/tmp/pgbench_log --failures-detailed --aggregate-interval='$((E2E_TIMEOUT / 20))' -h '$CLUSTER_NAME' $PGBENCH_OPTIONS" 2>&1 | tee "$LOG_PATH/bench-$INDEX" &
        BENCH_PID="$!"
        trap_kill "$BENCH_PID"
        (
        set +x
        while ! [ -f "$LOG_PATH/stop-stream-stats-$INDEX" ]
        do
          kubectl exec -n "$CLUSTER_NAMESPACE" deploy/"$STREAM_NAME" -- curl -s localhost:8080/q/metrics \
            | grep -v '^#' | tr '{}' ' ' \
            | sort \
            | {
              printf '%s ' "$(date +%s)"
              while read METRIC VALUE
              do
                printf %s: "$METRIC"
                printf '%s ' "$VALUE" | tr ' ' '\n' | tail -n 1 | tr '\n' ' '
              done
              echo
              }
          sleep "$((E2E_TIMEOUT / 20))"
        done > "$LOG_PATH/stream-stats-$INDEX"
        ) &
        STREAM_STATS_PID="$!"
        trap_kill "$STREAM_STATS_PID"
        if wait_until eval '! kill -0 "$BENCH_PID"' \
          && ! grep -q '^command terminated with exit code [1-9]' "$LOG_PATH/bench-$INDEX"
        then
          echo "success Benchmark terminated succesfully"
        else
          echo "FAIL: Benchmark not terminated succesfully"
          kill "$BENCH_PID" || true
          kubectl exec -n "$CLUSTER_NAMESPACE" psql \
            -- bash -c 'ps -ef | grep "[p]gbench" | tr -s " " | cut -d " " -f 2 | while read PID; do kill "$PID"; done' || true
          return 1
        fi
        touch "$LOG_PATH/stop-stream-stats-$INDEX"
        wait "$STREAM_STATS_PID"
        kill "$BENCH_PID" || true
        kubectl exec -n "$CLUSTER_NAMESPACE" psql \
          -- bash -c 'ps -ef | grep "[p]gbench" | tr -s " " | cut -d " " -f 2 | while read PID; do kill "$PID"; done' || true
        kubectl exec -n "$CLUSTER_NAMESPACE" psql -- bash -c 'cat /tmp/pgbench_log*' > "$LOG_PATH/pgbench-transactions-$INDEX"
        kubectl exec -n "$CLUSTER_NAMESPACE" psql -- bash -c 'rm -f /tmp/pgbench_log*'
        INDEX="$((INDEX + 1))"
      done
  echo "Test results"
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        echo
        printf 'pgbench options: %s\n' "$PGBENCH_OPTIONS"
        echo
        cat "$LOG_PATH/bench-$INDEX"
        echo
        echo "Stream stats"
        echo
        STREAM_STATS_COLUMNS="$(cat "$LOG_PATH/stream-stats-$INDEX" \
          | tr ' ' '\n' \
          | grep -F : \
          | cut -d : -f 1 \
          | sort \
          | uniq \
          | tr '\n' ' ')"
        {
        printf 'timestamp '
        printf '%s\n' "$STREAM_STATS_COLUMNS"
        } > "$LOG_PATH/stream-stats-flattened-$INDEX"
        (
        set +x
        cat "$LOG_PATH/stream-stats-$INDEX" \
          | while read LINE
            do
              printf '%s ' "${LINE%% *}"
              for STREAM_STATS_COLUMN in $STREAM_STATS_COLUMNS
              do
                if printf %s "$LINE" | grep -qF " ${STREAM_STATS_COLUMN}:"
                then
                  printf %s "$(printf %s "$LINE" | sed "s/^.* ${STREAM_STATS_COLUMN}:\([^ ]\+\).*$/\1/")"
                fi
                printf ' '
              done
              echo
            done >> "$LOG_PATH/stream-stats-flattened-$INDEX"
        )
        EVENTS_SEEN_COLUMN="$(printf '%s\n' "$STREAM_STATS_COLUMNS" | tr ' ' '\n' | grep -n . | grep ':debezium_postgres_connector_metrics_TotalNumberOfEventsSeen$' | cut -d : -f 1)"
        EVENTS_SENT_COLUMN="$(printf '%s\n' "$STREAM_STATS_COLUMNS" | tr ' ' '\n' | grep -n . | grep ':stream_total_number_of_events_sent_total$' | cut -d : -f 1)"
        DURATION="$((
          $(tail -n 1 "$LOG_PATH/stream-stats-flattened-$INDEX" | cut -d ' ' -f 1)
          - $(head -n 2 "$LOG_PATH/stream-stats-flattened-$INDEX" | tail -n 1 | cut -d ' ' -f 1)
          ))"
        echo "Events seen per second: $({
          echo "$(tail -n 1 "$LOG_PATH/stream-stats-flattened-$INDEX" | cut -d ' ' -f "$((EVENTS_SEEN_COLUMN + 1))")"
          echo "/ $DURATION"
          } | bc -l
        )"
        echo "Events sent per second: $(
          {
          echo "$(tail -n 1 "$LOG_PATH/stream-stats-flattened-$INDEX" | cut -d ' ' -f "$((EVENTS_SEEN_COLUMN + 1))")"
          echo "/ $DURATION"
          } | bc -l
        )"
        INDEX="$((INDEX + 1))"
      done
  INDEX=0
  printf '%s\n' "$E2E_PGBENCH_OPTIONS" \
    | tr '|' '\n' \
    | while read PGBENCH_OPTIONS
      do
        echo
        printf 'pgbench options: %s\n' "$PGBENCH_OPTIONS"
        echo
        echo To copy values use:
        echo "cat '$LOG_PATH/pgbench-transactions-$INDEX' | xclip -selection c"
        echo "cat '$LOG_PATH/stream-stats-flattened-$INDEX' | xclip -selection c"
        INDEX="$((INDEX + 1))"
      done
}