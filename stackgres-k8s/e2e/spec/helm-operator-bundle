#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_extra_hash() {
  grep '^helm-operator-image=' "$PROJECT_PATH/stackgres-k8s/ci/build/target/image-type-hashes" \
      | cut -d = -f 2
}

e2e_test_install() {
  if [ "$(uname -m)" = "aarch64" ]
  then
    return
  fi

  BUNDLE_STACKGRES_VERSION="$(printf %s "$STACKGRES_VERSION" | tr A-Z a-z)"
  BUNDLE_STACKGRES_PREVIOUS_VERSION="$(printf %s "$STACKGRES_PREVIOUS_VERSION" | tr A-Z a-z)"
  HELM_OPERATOR_IMAGE_TAG_SUFFIX=""
  if [ "$E2E_ENV" = "minishift" ] || [ "$E2E_ENV" = "crc" ] || [ "$E2E_ENV" = "microshift" ]
  then
    HELM_OPERATOR_IMAGE_TAG_SUFFIX="-openshift"
  fi
  HELM_OPERATOR_IMAGE_TAG="${IMAGE_TAG%-jvm}$HELM_OPERATOR_IMAGE_TAG_SUFFIX"
  HELM_OPERATOR_IMAGE_TAG="$(printf %s "$HELM_OPERATOR_IMAGE_TAG" | tr A-Z a-z)"

  HELM_OPERATOR_PUBLIC_REGISTRY="${HELM_OPERATOR_PUBLIC_REGISTRY:-quay.io}"
  HELM_OPERATOR_PUBLIC_REGISTRY_PATH="${HELM_OPERATOR_PUBLIC_REGISTRY_PATH:-/stackgres}"
  HELM_OPERATOR_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator:$HELM_OPERATOR_IMAGE_TAG"
  HELM_OPERATOR_BUNDLE_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator-bundle:$HELM_OPERATOR_IMAGE_TAG"
  HELM_OPERATOR_CATALOG_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator-catalog:$HELM_OPERATOR_IMAGE_TAG"

  # The operator-registry check the images from the remote repository
  local BUNDLE_IMAGE_NAME
  BUNDLE_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_BUNDLE_IMAGE_NAME##*/}"

  if test -f stackgres-k8s/ci/build/target/image-hashes \
    && ! docker manifest inspect "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)" >/dev/null 2>/dev/null \
    && docker inspect "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-image)" >/dev/null 2>&1 \
    && docker inspect "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)" >/dev/null 2>&1
  then
    docker tag "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-image)" "$HELM_OPERATOR_IMAGE_NAME"
    docker tag "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)" "$HELM_OPERATOR_BUNDLE_IMAGE_NAME"
    docker tag "$HELM_OPERATOR_BUNDLE_IMAGE_NAME" "$BUNDLE_IMAGE_NAME"
    docker push "$(sh stackgres-k8s/ci/build/build-functions.sh image_name helm-operator-bundle-image)"
    docker push "$BUNDLE_IMAGE_NAME"
  fi

  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_async_cleanup || true

  if [ "$E2E_ENV" != "minishift" ] && [ "$E2E_ENV" != "crc" ] && [ "$E2E_ENV" != "microshift" ]
  then
    properly_tag_not_found_import_images &
    trap_kill "$!"
    kubectl delete clusterrole system:controller:operator-lifecycle-manager 2>/dev/null \
      || ! kubectl get clusterrole system:controller:operator-lifecycle-manager 2>/dev/null
    wait_until eval '! kubectl get namespace olm > /dev/null 2>&1'
    operator-sdk olm install \
      --timeout "${E2E_TIMEOUT}s"
  fi

  local PREVIOUS_BUNDLE_IMAGE_NAME
  local OPERATORHUB_POD
  OPERATORHUB_POD="$(wait_until eval 'kubectl get pod -n olm -l olm.catalogSource=operatorhubio-catalog -o name | grep "^pod/"')"
  PREVIOUS_BUNDLE_IMAGE_NAME="$(kubectl exec -ti -n olm "$OPERATORHUB_POD" -- cat configs/stackgres/catalog.yaml \
    | yq -sr ".[]|select(.name == \"stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION\").image")"

  local CATALOG_IMAGE_NAME
  CATALOG_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_CATALOG_IMAGE_NAME##*/}"
  mkdir -p "$LOG_PATH/helm-operator-catalog"
  opm generate dockerfile "$LOG_PATH/helm-operator-catalog"
  echo > "$LOG_PATH/README.md"
  opm init stackgres \
    --default-channel=stable \
    --description="$LOG_PATH/README.md" \
    --output yaml > "$LOG_PATH/helm-operator-catalog/operator.yaml"
  opm render "$PREVIOUS_BUNDLE_IMAGE_NAME" \
    --output=yaml >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
  opm render "$BUNDLE_IMAGE_NAME" \
    --output=yaml >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
  cat << EOF >> "$LOG_PATH/helm-operator-catalog/operator.yaml"
---
schema: olm.channel
package: stackgres
name: stable
entries:
  - name: stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
  - name: stackgres.v$BUNDLE_STACKGRES_VERSION
    replaces: "v$BUNDLE_STACKGRES_PREVIOUS_VERSION"
    skips:
    - stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
EOF
  opm validate "$LOG_PATH/helm-operator-catalog"
  (
  cd "$LOG_PATH"
  docker build . \
    -f "helm-operator-catalog.Dockerfile" \
    -t "$CATALOG_IMAGE_NAME"
  )
  docker push "$CATALOG_IMAGE_NAME"

  if [ "$E2E_FORCE_IMAGE_PULL" = "true" ]
  then
    if [ "$E2E_SKIP_LOAD_HELM_OPERATOR" != true ]
    then
      echo "Loading helm operator images from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
      load_helm_operator_images_from "$E2E_OPERATOR_REGISTRY" "$E2E_OPERATOR_REGISTRY_PATH"
      IMAGES="$(get_helm_operator_images "$STACKGRES_VERSION")"
      for IMAGE in $IMAGES
      do
        docker_tag "$IMAGE" "${IMAGE%:*}:$(printf %s "$STACKGRES_VERSION$HELM_OPERATOR_IMAGE_TAG_SUFFIX" | tr A-Z a-z)"
      done
      OPERATOR_IMAGES="$(get_operator_images "$STACKGRES_VERSION")"
      for IMAGE in $OPERATOR_IMAGES
      do
        docker_tag "$IMAGE" "${IMAGE%:*}:$BUNDLE_STACKGRES_VERSION"
      done
      echo "All helm operator images loaded from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
    fi
  fi

  OPERATOR_NAMESPACE="$(generate_operator_namespace)"
  kubectl create namespace "${OPERATOR_NAMESPACE}"

  cat << EOF > "$LOG_PATH/helm-operator-catalog-source.yaml"
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: helm-operator-catalog
  namespace: $OPERATOR_NAMESPACE
spec:
  sourceType: grpc
  image: $CATALOG_IMAGE_NAME
  displayName: Helm Operator Catalog
  publisher: OnGres
  updateStrategy:
    registryPoll:
      interval: 10m
EOF
  kubectl create -f "$LOG_PATH/helm-operator-catalog-source.yaml"
  kubectl create namespace "$CLUSTER_NAMESPACE"
}

load_helm_operator_images_from() {
  local REPOSITORY="${1:-$HELM_OPERATOR_PUBLIC_REGISTRY}"
  local IMAGE_PATH="${2:-$HELM_OPERATOR_PUBLIC_REGISTRY_PATH}"
  local VERSION="${3:-$STACKGRES_VERSION}"
  local IMAGES
  IMAGES="$(get_helm_operator_images "$VERSION")"
  printf '%s' "$IMAGES" \
    | xargs_parallel_shell % "$E2E_PATH/e2e" \
      pull_image_from "$REPOSITORY" "${IMAGE_PATH%/}/stackgres" "%"
}

get_helm_operator_images() {
  [ -n "$1" ]
  local VERSION="$1"
  local NATIVE_TAG="$VERSION"
  if [ "$VERSION" = "$STACKGRES_VERSION" ]
  then
    NATIVE_TAG="${IMAGE_TAG%-jvm}"
  fi
  local TAG="$NATIVE_TAG-jvm"
  if [ "$VERSION" = "$STACKGRES_VERSION" ] \
    && [ "${IMAGE_TAG%-jvm}" = "$IMAGE_TAG" ]
  then
    TAG="$NATIVE_TAG"
  fi
  echo "${HELM_OPERATOR_IMAGE_NAME%:*}:$NATIVE_TAG"
  echo "${HELM_OPERATOR_BUNDLE_IMAGE_NAME%:*}:$NATIVE_TAG"
  echo "${HELM_OPERATOR_CATALOG_IMAGE_NAME%:*}:$NATIVE_TAG"
}

properly_tag_not_found_import_images() {
  echo "Looking for import-* images to tag properly"
  event_watch  --follow \
    | stdbuf -o0 grep '\simage "\(docker\.io/library/import-[^@]\+@sha256:[^"]\+\)": not found' \
    | stdbuf -o0 sed 's#^.*\simage "\(docker\.io/library/import-[^@]\+@sha256:[^"]\+\)": not found.*$#\1#' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected import-* image $IMAGE_NAME to tag properly into k8s env $E2E_ENV"
        tag_image_k8s "${IMAGE_NAME#quay.io/library/}" "$IMAGE_NAME"
      done
      )
}

e2e_test_uninstall() {
  if [ "$(uname -m)" = "aarch64" ]
  then
    return
  fi

  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_async_cleanup || true

  kubectl create namespace "${OPERATOR_NAMESPACE}"
  install_operator_only
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  if [ "$(uname -m)" = "aarch64" ]
  then
    echo "Skipping tests for architecture aarch64 since OLM official images are not built for such architecture"
    return
  fi

  run_test "Check that generated helm operator bundle is functional" test_bundle

  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_async_cleanup || true
}

test_bundle() {
  echo "Installing previous version of operator bundle ($STACKGRES_PREVIOUS_VERSION)"
  cat << EOF > "$LOG_PATH/stackgres-operator-group.yaml"
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: stackgres
  namespace: $OPERATOR_NAMESPACE
EOF
  kubectl create -f "$LOG_PATH/stackgres-operator-group.yaml"
  cat << EOF > "$LOG_PATH/stackgres-subscription-$STACKGRES_PREVIOUS_VERSION.yaml"
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: stackgres
  namespace: $OPERATOR_NAMESPACE
spec:
  channel: stable
  name: stackgres
  source: helm-operator-catalog
  sourceNamespace: $OPERATOR_NAMESPACE
  installPlanApproval: Automatic
  startingCSV: stackgres.v$BUNDLE_STACKGRES_PREVIOUS_VERSION
EOF
  kubectl create -f "$LOG_PATH/stackgres-subscription-$STACKGRES_PREVIOUS_VERSION.yaml"
  RELEASE_NAME="$(wait_until eval 'kubectl get sgconfig -n "$OPERATOR_NAMESPACE" -o name | grep "^sgconfig.stackgres.io/"')"
  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^${RELEASE_NAME#*/}$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  if [ "$(helm get values -n "$OPERATOR_NAMESPACE" ${RELEASE_NAME#*/} -o json | jq .extensions.cache.enabled)" = true ]
  then
    if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^${RELEASE_NAME#*/}-extensions-cache$"
    then
      echo "FAILED. The demo StackGres extensions cache service was not available."
      return 1
    else
      echo "SUCCESS. The demo StackGres extensions cache service was available."
    fi
  fi

  echo "Creating demo package cluster"
  helm install --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}" \
    "${STACKGRES_PACKAGES}/stackgres-cluster-demo.tgz" \
    --set cluster.sgInstanceProfile=size-xs \
    --set cluster.instances=2 \
    --set nonProductionOptions.disableClusterPodAntiAffinity=true \
    --set nonProductionOptions.disablePatroniResourceRequirements=true \
    --set nonProductionOptions.disableClusterResourceRequirements=true

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec "${CLUSTER_NAME}-0" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster primary is available."
  else
    echo "FAILED. The demo package StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec "${CLUSTER_NAME}-1" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster secondary is available."
  else
    echo "FAILED. The demo package StackGres cluster secondary is not available."
    return 1
  fi

  echo "Upgrading operator bundle ($STACKGRES_VERSION)"
  # The operator-sdk does not allow to load a bundle with IfNotPresent so we have to pull it from the remote repository
  local BUNDLE_IMAGE_NAME
  BUNDLE_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_BUNDLE_IMAGE_NAME##*/}"
  kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" helm-operator-bundle \
    --from-file=.dockerconfigjson="$HOME"/.docker/config.json

  cat << EOF > "$LOG_PATH/stackgres-subscription-$STACKGRES_VERSION.yaml"
spec:
  channel: stable
  name: stackgres
  source: helm-operator-catalog
  sourceNamespace: $OPERATOR_NAMESPACE
  installPlanApproval: Automatic
  startingCSV: stackgres.v$BUNDLE_STACKGRES_VERSION
EOF
  kubectl patch subscription -n "$OPERATOR_NAMESPACE" stackgres :q!--type merge --patch-file "$LOG_PATH/stackgres-subscription-$STACKGRES_VERSION.yaml"

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  if [ "$(helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator -o json | jq .extensions.cache.enabled)" = true ]
  then
    if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator-extensions-cache$"
    then
      echo "FAILED. The demo StackGres extensions cache service was not available."
      return 1
    else
      echo "SUCCESS. The demo StackGres extensions cache service was available."
    fi
  fi

  echo "Creating demo package cluster"
  helm install --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}" \
    "${STACKGRES_PACKAGES}/stackgres-cluster-demo.tgz" \
    --set cluster.sgInstanceProfile=size-xs \
    --set cluster.instances=2 \
    --set nonProductionOptions.disableClusterPodAntiAffinity=true \
    --set nonProductionOptions.disablePatroniResourceRequirements=true \
    --set nonProductionOptions.disableClusterResourceRequirements=true

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec "${CLUSTER_NAME}-0" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster primary is available."
  else
    echo "FAILED. The demo package StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec "${CLUSTER_NAME}-1" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster secondary is available."
  else
    echo "FAILED. The demo package StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting demo package cluster"
  helm uninstall --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo package StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo package StackGres cluster pods have not been terminated."
    return 1
  fi
}
