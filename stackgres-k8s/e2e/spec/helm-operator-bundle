#!/bin/sh

export HELM_OPERATOR_TAG_SUFFIX=""
if [ "$E2E_ENV" = "minishift" ] || [ "$E2E_ENV" = "crc" ] || [ "$E2E_ENV" = "microshift" ]
then
  export HELM_OPERATOR_TAG_SUFFIX="-openshift"
fi

export HELM_OPERATOR_PUBLIC_REGISTRY="${HELM_OPERATOR_PUBLIC_REGISTRY:-quay.io}"
export HELM_OPERATOR_PUBLIC_REGISTRY_PATH="${HELM_OPERATOR_PUBLIC_REGISTRY_PATH:-/stackgres}"
export HELM_OPERATOR_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator:${IMAGE_TAG%-jvm}$HELM_OPERATOR_TAG_SUFFIX"
export HELM_OPERATOR_BUNDLE_IMAGE_NAME="${HELM_OPERATOR_PUBLIC_REGISTRY}${HELM_OPERATOR_PUBLIC_REGISTRY_PATH}/helm-operator-bundle:${IMAGE_TAG%-jvm}$HELM_OPERATOR_TAG_SUFFIX"

e2e_exclusive_lock() {
  true
}

e2e_test_extra_hash() {
  grep '^helm-operator-image=' "$PROJECT_PATH/stackgres-k8s/ci/build/target/image-type-hashes" \
      | cut -d = -f 2
}

e2e_test_install() {
  if [ "$E2E_FORCE_IMAGE_PULL" = "true" ]
  then
    if [ "$E2E_SKIP_LOAD_HELM_OPERATOR" != true ]
    then
      echo "Loading helm operator images from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
      load_helm_operator_images_from "$E2E_OPERATOR_REGISTRY" "$E2E_OPERATOR_REGISTRY_PATH"
      IMAGES="$(get_helm_operator_images "$STACKGRES_VERSION")"
      for IMAGE in $IMAGES
      do
        docker_tag "$IMAGE" "${IMAGE%:*}:$STACKGRES_VERSION$HELM_OPERATOR_TAG_SUFFIX"
      done
      OPERATOR_IMAGES="$(get_operator_images "$STACKGRES_VERSION")"
      for IMAGE in $OPERATOR_IMAGES
      do
        docker_tag "$IMAGE" "${IMAGE%:*}:$STACKGRES_VERSION"
      done
      echo "All helm operator images loaded from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
    fi
  fi

  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_async_cleanup

  if [ "$E2E_ENV" != "minishift" ] && [ "$E2E_ENV" != "crc" ] && [ "$E2E_ENV" != "microshift" ]
  then
    kubectl delete clusterrole system:controller:operator-lifecycle-manager 2>/dev/null \
      || ! kubectl get clusterrole system:controller:operator-lifecycle-manager 2>/dev/null
    wait_until eval '! kubectl get namespace olm > /dev/null 2>&1'
    operator-sdk olm install \
      --timeout "${E2E_TIMEOUT}s"
  fi

  kubectl create namespace "$CLUSTER_NAMESPACE"
}

load_helm_operator_images_from() {
  local REPOSITORY="${1:-$HELM_OPERATOR_PUBLIC_REGISTRY}"
  local IMAGE_PATH="${2:-$HELM_OPERATOR_PUBLIC_REGISTRY_PATH}"
  local VERSION="${3:-$STACKGRES_VERSION}"
  local IMAGES
  IMAGES="$(get_helm_operator_images "$VERSION")"
  printf '%s' "$IMAGES" \
    | xargs_parallel_shell % "$E2E_PATH/e2e" \
      pull_image_from "$REPOSITORY" "${IMAGE_PATH%/}/stackgres" "%"
}

get_helm_operator_images() {
  [ -n "$1" ]
  local VERSION="$1"
  local NATIVE_TAG="$VERSION"
  if [ "$VERSION" = "$STACKGRES_VERSION" ]
  then
    NATIVE_TAG="${IMAGE_TAG%-jvm}"
  fi
  local TAG="$NATIVE_TAG-jvm"
  if [ "$VERSION" = "$STACKGRES_VERSION" ] \
    && [ "${IMAGE_TAG%-jvm}" = "$IMAGE_TAG" ]
  then
    TAG="$NATIVE_TAG"
  fi
  echo "${HELM_OPERATOR_IMAGE_NAME%:*}:$NATIVE_TAG"
  echo "${HELM_OPERATOR_BUNDLE_IMAGE_NAME%:*}:$NATIVE_TAG"
}

e2e_test_uninstall() {
  ! kubectl get sgconfig || kubectl delete sgconfig -A --all --wait
  k8s_async_cleanup

  kubectl create namespace "${OPERATOR_NAMESPACE}"
  install_operator_only
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  run_test "Check that generated helm operator bundle is functional" test_bundle
}

test_bundle() {
  OPERATOR_NAMESPACE="$(generate_operator_namespace)"
  kubectl create namespace "${OPERATOR_NAMESPACE}"

  echo "Running operator bundle"
  # The operator-sdk does not allow to load a bundle with IfNotPresent so we have to pull it from the remote repository
  local BUNDLE_IMAGE_NAME
  BUNDLE_IMAGE_NAME="$E2E_OPERATOR_REGISTRY${E2E_OPERATOR_REGISTRY_PATH%/}/stackgres/${HELM_OPERATOR_BUNDLE_IMAGE_NAME##*/}"
  kubectl create secret docker-registry -n "$OPERATOR_NAMESPACE" helm-operator-bundle \
    --from-file=.dockerconfigjson="$HOME"/.docker/config.json

  operator-sdk run bundle -n "$OPERATOR_NAMESPACE" "$BUNDLE_IMAGE_NAME" \
    --pull-secret-name helm-operator-bundle \
    --timeout "${E2E_TIMEOUT}s"

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  if [ "$(helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator -o json | jq .extensions.cache.enabled)" = true ]
  then
    if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator-extensions-cache$"
    then
      echo "FAILED. The demo StackGres extensions cache service was not available."
      return 1
    else
      echo "SUCCESS. The demo StackGres extensions cache service was available."
    fi
  fi

  echo "Creating demo package cluster"
  helm install --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}" \
    "${STACKGRES_PACKAGES}/stackgres-cluster-demo.tgz" \
    --set cluster.sgInstanceProfile=size-xs \
    --set cluster.instances=2 \
    --set nonProductionOptions.createMinio=false \
    --set nonProductionOptions.disableClusterPodAntiAffinity=true \
    --set nonProductionOptions.disablePatroniResourceRequirements=true \
    --set nonProductionOptions.disableClusterResourceRequirements=true

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec "${CLUSTER_NAME}-0" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster primary is available."
  else
    echo "FAILED. The demo package StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec "${CLUSTER_NAME}-1" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster secondary is available."
  else
    echo "FAILED. The demo package StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting demo package cluster"
  helm uninstall --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo package StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo package StackGres cluster pods have not been terminated."
    return 1
  fi
}
