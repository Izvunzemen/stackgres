#!/bin/sh

. "$SPEC_PATH/abstract/dbops-restart"

e2e_test_install() {
  DBOPS_FAILING_NAME="$(get_sgdbops_name failing-restart)"
  DBOPS_NAME="$(get_sgdbops_name restart)"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  wait_pods_running "$CLUSTER_NAMESPACE" 1
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  generate_mock_data "$CLUSTER_NAME"
  check_mock_data_samehost "$CLUSTER_NAME"
}

e2e_test() {
   run_test "Checking that cluster start does not fail if cluster failed" check_cluster_start_not_fail_if_cluster_failed

   run_test "Checking that cluster start does not fail if pod failed" check_cluster_start_not_fail_if_pod_failed
}

check_cluster_start_not_fail_if_cluster_failed() {
  kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"add","path":"/spec/pods/scheduling","value":{"nodeSelector":{"test":"test"}}}]'

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_FAILING_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  timeout: PT60S
  restart:
    method: InPlace
EOF

  if kubectl wait --timeout 60s -n "$CLUSTER_NAMESPACE" sgdbops "$DBOPS_FAILING_NAME" \
    --for condition=Completed
  then
    echo "FAILED. The restart operation completed."
    return 1
  else
    echo "SUCCESS. The restart operation did not completed."
  fi

  wait_until kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"remove","path":"/spec/pods/scheduling"}]'

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  restart:
    method: InPlace
EOF

  check_restart
}

check_cluster_start_not_fail_if_pod_failed() {
  kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"add","path":"/spec/pods/scheduling","value":{"nodeSelector":{"test":"test"}}}]'

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_FAILING_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  timeout: PT60S
  restart:
    method: InPlace
EOF

  if kubectl wait --timeout 60s -n "$CLUSTER_NAMESPACE" sgdbops "$DBOPS_FAILING_NAME" \
    --for condition=Completed
  then
    echo "FAILED. The restart operation completed."
    return 1
  else
    echo "SUCCESS. The restart operation did not completed."
  fi

  wait_until kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p '[{"op":"remove","path":"/spec/pods/scheduling"}]'

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: $DBOPS_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  restart:
    method: InPlace
EOF

  check_restart
}