#!/bin/sh

. "$SPEC_PATH/abstract/dbops-restart"

e2e_test() {
  run_test "Checking that restart is working" check_restart_is_working

  run_test "Checking that restart in-place is working" check_restart_in_place_is_working
  
  run_test "Checking that restart with only pendingin restart is working" check_restart_only_pending_restart_is_working
}

check_restart_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
EOF

  check_restart

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}

check_restart_in_place_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  restart:
    method: InPlace
EOF

  check_restart

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}

check_restart_only_pending_restart_is_working() {
  reset_cluster
 
  kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p "$(cat << EOF
[
  {"op":"replace","path":"/spec/postgresVersion","value":"$E2E_MINOR_TARGET_POSTGRES_VERSION"}
]
EOF
        )"
  kubectl delete pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-1"
  wait_pods_running "$CLUSTER_NAMESPACE" 3

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  restart:
    method: InPlace
    onlyPendingRestart: true
EOF

  check_restart "$CLUSTER_NAME-0" "$CLUSTER_NAME-1"

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}

