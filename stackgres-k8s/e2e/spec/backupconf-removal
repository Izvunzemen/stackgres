#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY="$(random_string)"
  NODE_LABEL_VALUE="$(random_string)"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"
}

e2e_test() {
  run_test "Trying to delete backupconfig with cluster created" delete_with_cluster

  run_test "Trying to delete backupconfig without cluster created" delete_whitout_cluster
}

delete_with_cluster() {
  if ERROR="$(kubectl delete -n "$CLUSTER_NAMESPACE" sgbackupconfigs.stackgres.io backupconf 2>&1)"
  then
    echo "FAIL: It should not be able to delete sgbackupconf"
    return 1
  else
    echo "SUCCESS: Good it has failed"
  fi

  if echo "$ERROR" | grep -q "Can't delete sgbackupconfigs.stackgres.io backupconf"
  then
    echo "SUCCESS: Error message was the expected"
    return 0
  else
    ERROR="$(cat "$LOG_PATH/test1.log")"
    echo "FAIL: Error is not what it should be. ERROR ${ERROR}"
    return 1
  fi
}

delete_whitout_cluster() {
  kubectl get -n "$CLUSTER_NAMESPACE" sgclusters.stackgres.io "$CLUSTER_NAME" -o yaml | kubectl delete -f -

  if ERROR="$(kubectl delete -n "$CLUSTER_NAMESPACE" sgbackupconfigs.stackgres.io backupconf 2>&1)"
  then
    echo "SUCCESS: Good. It has deleted the configuration"
    return 0
  else
    echo "FAIL: It should be able to delete the posgresconf. ERROR ${ERROR}"
    return 1
  fi
}
