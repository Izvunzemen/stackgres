#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  local TARGET_IMAGE_TAG
  if [ "${STACKGRES_VERSION##*-}" != "SNAPSHOT" ]
  then
    TARGET_IMAGE_TAG="$STACKGRES_VERSION-jvm"
  else 
    DEFAULT_IMAGE_VERSION=$(grep tag "$OPERATOR_CHART_PATH/values.yaml" | head -1 | awk '{print $2}')
    DEFAULT_IMAGE_VERSION="${DEFAULT_IMAGE_VERSION#?}"
    DEFAULT_IMAGE_VERSION="${DEFAULT_IMAGE_VERSION%?}"
    TARGET_IMAGE_TAG="$DEFAULT_IMAGE_VERSION"
  fi

  if [ "$IMAGE_TAG" != "$TARGET_IMAGE_TAG" ]
  then
    docker tag "$OPERATOR_IMAGE_NAME" stackgres/operator:"$TARGET_IMAGE_TAG"
    docker tag "$RESTAPI_IMAGE_NAME" stackgres/restapi:"$TARGET_IMAGE_TAG"
    export TARGET_ADMINUI_IMAGE_TAG="${TARGET_IMAGE_TAG%-jvm}"
    docker tag "$ADMINUI_IMAGE_NAME" stackgres/admin-ui:"$TARGET_ADMINUI_IMAGE_TAG"
  fi
  
  load_operator_k8s "$TARGET_IMAGE_TAG"
  STACKGRES_YAML_NAMESPACE=stackgres
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_cleanup_namespace "$STACKGRES_YAML_NAMESPACE"
  k8s_async_cleanup
  kubectl create namespace "$CLUSTER_NAMESPACE"
}

e2e_test_uninstall() {
  helm_cleanup_chart stackgres-cluster "${CLUSTER_NAMESPACE}"
  helm_cleanup_chart stackgres-operator "${OPERATOR_NAMESPACE}"
  k8s_cleanup_namespace "${CLUSTER_NAMESPACE}"
  k8s_cleanup_namespace "${OPERATOR_NAMESPACE}"
  k8s_cleanup_namespace "${STACKGRES_YAML_NAMESPACE}"

  kubectl create namespace "${OPERATOR_NAMESPACE}"
  install_operator_only
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  run_test "Check that generated demo yamls are functional" test_yamls
  run_test "Check that generated demo packages are functional" test_packages
}


test_yamls() {
  echo "Installing operator.yml"
  kubectl create -n "${STACKGRES_YAML_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-operator-demo.yml"

  kubectl get jobs -n "$STACKGRES_YAML_NAMESPACE" -o name \
    | while read JOB
    do
      kubectl wait -n "$STACKGRES_YAML_NAMESPACE" "$JOB" --for condition=Complete --timeout "${E2E_TIMEOUT}s"
    done

  if ! wait_services_available "$STACKGRES_YAML_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The demo StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The demo StackGres operator service was available."
  fi

  if ! wait_services_available "$STACKGRES_YAML_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The demo StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The demo StackGres restapi service was available."
  fi

  echo "Creating demo cluster"
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-config-demo.yml" 
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-cluster-demo.yml"

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Creating MinIO resources"
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/minio-demo.yml"

  if wait_pods_running "${CLUSTER_NAMESPACE}" 3
  then
    echo "SUCCESS. The demo MinIO pod is running."
  else
    echo "FAILED. The demo MinIO pod is not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec simple-0 -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo StackGres cluster primary is available."
  else
    echo "FAILED. The demo StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec simple-1 -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo StackGres cluster secondary is available."
  else
    echo "FAILED. The demo StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting MinIO resources"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/minio-demo.yml"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo MinIO pod has been terminated."
  else
    echo "FAILED. The demo MinIO pod has not been terminated."
    return 1
  fi

  echo "Deleting demo cluster"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-cluster-demo.yml"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-config-demo.yml" 

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo StackGres cluster pods have not been terminated."
    return 1
  fi

  echo "Deleting demo operator"
  kubectl delete --namespace "${STACKGRES_YAML_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-operator-demo.yml"

  if wait_until is_demo_operator_namespace_removed
  then
    echo "SUCCESS. The demo StackGres operator namespace has been removed."
  else
    echo "FAILED. The demo StackGres operator namespace has not been removed."
    return 1
  fi
}

is_demo_operator_namespace_removed() {
  ! kubectl get namespace "${STACKGRES_YAML_NAMESPACE}"
}

test_packages() {
  echo "Installing operator package"
  kubectl create namespace "${OPERATOR_NAMESPACE}"

  helm install --namespace "${OPERATOR_NAMESPACE}" stackgres-operator \
    "${STACKGRES_PACKAGES}/stackgres-operator.tgz" \
    --set adminui.service.type=LoadBalancer

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  echo "Creating demo package cluster"
  helm install --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}" \
    "${STACKGRES_PACKAGES}/stackgres-cluster-demo.tgz" \
    --set cluster.sgInstanceProfile=size-xs \
    --set cluster.instances=2 \
    --set nonProductionOptions.createMinio=false \
    --set nonProductionOptions.disableClusterPodAntiAffinity=true

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec "${CLUSTER_NAME}-0" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster primary is available."
  else
    echo "FAILED. The demo package StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec "${CLUSTER_NAME}-1" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster secondary is available."
  else
    echo "FAILED. The demo package StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting demo package cluster"
  helm uninstall --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo package StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo package StackGres cluster pods have not been terminated."
    return 1
  fi
}
