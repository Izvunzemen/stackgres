#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_async_cleanup
  kubectl create namespace "$CLUSTER_NAMESPACE"
}

e2e_test_uninstall() {
  k8s_async_cleanup

  kubectl create namespace "${OPERATOR_NAMESPACE}"
  install_operator_only
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  run_test "Check that generated demo yamls are functional" test_yamls
  run_test "Check that generated demo packages are functional" test_packages
}

test_yamls() {
  OPERATOR_NAMESPACE="$(generate_operator_namespace)"

  echo "Mocking stackgres-operator-demo.yml"
  cat "${STACKGRES_YAMLS}/stackgres-operator-demo.yml" \
    | sed "s|name: stackgres$|name: $OPERATOR_NAMESPACE|" \
    | sed "s|namespace: stackgres$|namespace: $OPERATOR_NAMESPACE|" \
    | sed "s| -n ['\"]\?stackgres['\"]\? | -n '$OPERATOR_NAMESPACE' |" \
    | sed "s|stackgres-operator\.stackgres|stackgres-operator.$OPERATOR_NAMESPACE|" \
    | sed "s|image: \"stackgres/operator:.*\"$|image: \"$OPERATOR_IMAGE_NAME\"|" \
    | sed "s|image: \"stackgres/restapi:.*\"$|image: \"$RESTAPI_IMAGE_NAME\"|" \
    | sed "s|image: \"stackgres/jobs:.*\"$|image: \"$JOBS_IMAGE_NAME\"|" \
    | sed "s|image: 'stackgres/admin-ui:.*'$|image: \"$ADMINUI_IMAGE_NAME\"|" \
    | sed "$(printf '/name: OPERATOR_IMAGE_VERSION$/{$!{N;s/name: OPERATOR_IMAGE_VERSION\\n\( *\)value: .*$/name: OPERATOR_IMAGE_VERSION\\n\\1value: '"'%s'"'/;ty;P;D;:y}}' "$IMAGE_TAG")" \
    | sed "s|imagePullPolicy:.*$|imagePullPolicy: $(operator_pull_policy)|" \
    | sed "s|value: \"https://extensions.stackgres.io/postgres/repository\"$|value: \"$EXTENSIONS_REPOSITORY_URL\"|" \
    > "${LOG_PATH}/stackgres-operator-demo.yml"

  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "name: $OPERATOR_NAMESPACE"
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "namespace: $OPERATOR_NAMESPACE"
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q " -n '$OPERATOR_NAMESPACE' "
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "stackgres-operator.$OPERATOR_NAMESPACE"
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "image: \"$OPERATOR_IMAGE_NAME\""
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "image: \"$RESTAPI_IMAGE_NAME\""
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "image: \"$JOBS_IMAGE_NAME\""
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "image: \"$ADMINUI_IMAGE_NAME\""
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "value: '$IMAGE_TAG'"
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "imagePullPolicy: $(operator_pull_policy)"
  cat "${LOG_PATH}/stackgres-operator-demo.yml" \
    | grep -q "value: \"$EXTENSIONS_REPOSITORY_URL\""

  echo "Installing operator.yml"
  kubectl create -n "${OPERATOR_NAMESPACE}" -f "${LOG_PATH}/stackgres-operator-demo.yml"

  kubectl get jobs -n "$OPERATOR_NAMESPACE" -o name \
    | while read JOB
    do
      kubectl wait -n "$OPERATOR_NAMESPACE" "$JOB" --for condition=Complete --timeout "${E2E_TIMEOUT}s"
    done

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The demo StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The demo StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The demo StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The demo StackGres restapi service was available."
  fi

  echo "Creating demo cluster"
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-config-demo.yml" 
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-cluster-demo.yml"

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Creating MinIO resources"
  kubectl create --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/minio-demo.yml"

  if wait_pods_running "${CLUSTER_NAMESPACE}" 3
  then
    echo "SUCCESS. The demo MinIO pod is running."
  else
    echo "FAILED. The demo MinIO pod is not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec simple-0 -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo StackGres cluster primary is available."
  else
    echo "FAILED. The demo StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec simple-1 -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo StackGres cluster secondary is available."
  else
    echo "FAILED. The demo StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting MinIO resources"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/minio-demo.yml"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo MinIO pod has been terminated."
  else
    echo "FAILED. The demo MinIO pod has not been terminated."
    return 1
  fi

  echo "Deleting demo cluster"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-cluster-demo.yml"
  kubectl delete --namespace "${CLUSTER_NAMESPACE}" -f "${STACKGRES_YAMLS}/stackgres-simple-config-demo.yml" 

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo StackGres cluster pods have not been terminated."
    return 1
  fi

  echo "Deleting demo operator"
  kubectl delete --namespace "${OPERATOR_NAMESPACE}" -f "${LOG_PATH}/stackgres-operator-demo.yml"

  if wait_until is_demo_operator_namespace_removed
  then
    echo "SUCCESS. The demo StackGres operator namespace has been removed."
  else
    echo "FAILED. The demo StackGres operator namespace has not been removed."
    return 1
  fi
}

is_demo_operator_namespace_removed() {
  ! kubectl get namespace "${OPERATOR_NAMESPACE}"
}

test_packages() {
  OPERATOR_NAMESPACE="$(generate_operator_namespace)"

  echo "Installing operator package"
  kubectl create namespace "${OPERATOR_NAMESPACE}"

  helm install --namespace "${OPERATOR_NAMESPACE}" stackgres-operator \
    "${STACKGRES_PACKAGES}/stackgres-operator.tgz" \
    --set-string operator.image.name="${OPERATOR_IMAGE_NAME%:*}" --set-string operator.image.tag="${OPERATOR_IMAGE_NAME#*:}" \
    --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
    --set-string restapi.image.name="${RESTAPI_IMAGE_NAME%:*}" --set-string restapi.image.tag="${RESTAPI_IMAGE_NAME#*:}" \
    --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
    --set-string jobs.image.name="${JOBS_IMAGE_NAME%:*}" --set-string jobs.image.tag="${JOBS_IMAGE_NAME#*:}" \
    --set-string "jobs.image.pullPolicy=$(operator_pull_policy)" \
    --set-string adminui.image.name="${ADMINUI_IMAGE_NAME%:*}" --set-string adminui.image.tag="${ADMINUI_IMAGE_NAME#*:}" \
    --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
    --set-string "extensions.repositoryUrls[0]=$EXTENSIONS_REPOSITORY_URL" \
    --set adminui.service.type=LoadBalancer

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
  then
    echo "FAILED. The StackGres operator service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres operator service was available."
  fi

  if ! wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
  then
    echo "FAILED. The StackGres restapi service was not available."
    return 1
  else
    echo "SUCCESS. The StackGres restapi service was available."
  fi

  echo "Creating demo package cluster"
  helm install --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}" \
    "${STACKGRES_PACKAGES}/stackgres-cluster-demo.tgz" \
    --set cluster.sgInstanceProfile=size-xs \
    --set cluster.instances=2 \
    --set nonProductionOptions.createMinio=false \
    --set nonProductionOptions.disableClusterPodAntiAffinity=true

  if wait_pods_running "${CLUSTER_NAMESPACE}" 2
  then
    echo "SUCCESS. The demo StackGres cluster pods are running."
  else
    echo "FAILED. The demo StackGres cluster pods are not running."
    return 1
  fi

  echo "Testing Cluster readability"
  if kubectl exec "${CLUSTER_NAME}-0" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster primary is available."
  else
    echo "FAILED. The demo package StackGres cluster primary is not available."
    return 1
  fi
  if kubectl exec "${CLUSTER_NAME}-1" -n "${CLUSTER_NAMESPACE}" -c postgres-util -- psql -Antqc 'Select 1'
  then
    echo "SUCCESS. The demo package StackGres cluster secondary is available."
  else
    echo "FAILED. The demo package StackGres cluster secondary is not available."
    return 1
  fi

  echo "Deleting demo package cluster"
  helm uninstall --namespace "${CLUSTER_NAMESPACE}" "${CLUSTER_NAME}"

  if wait_pods_terminated "${CLUSTER_NAMESPACE}" 0
  then
    echo "SUCCESS. The demo package StackGres cluster pods have been terminated."
  else
    echo "FAILED. The demo package StackGres cluster pods have not been terminated."
    return 1
  fi
}
