#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY=$(ramdom_string)
  NODE_LABEL_VALUE=$(ramdom_string)
  
  kubectl create namespace "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 \
    --set-string "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE"

}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "sgcluster has specified node selector" check_sgcluster_has_node_selector

  run_test "StatefulSet has specified node selector" check_sts_has_node_selector
}

check_sgcluster_has_node_selector() {
  if [ "$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
    --template "{{ (index .spec.pods.scheduling.nodeSelector \"$NODE_LABEL_KEY\") }}")" \
    = "$NODE_LABEL_VALUE" ]
  then
    echo "SUCCESS. sgcluster has the configured node selector"
  else
    echo "FAIL. sgcluster has not the configured node selector"
    return 1
  fi
}

check_sts_has_node_selector() {
  echo "Waiting for sts with node selector"  
  try_function wait_until eval "$(cat << 'EOF'
[ "$(kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" \
  --template "{{ (index .spec.template.spec.nodeSelector \"$NODE_LABEL_KEY\") }}")" \
  = "$NODE_LABEL_VALUE" ]
EOF
    )"
  if "$RESULT"
  then
    echo "SUCCESS. StatefulSet has the configured node selector"
  else
    echo "FAIL. StatefulSet has not the configured node selector"
    return 1
  fi
}
