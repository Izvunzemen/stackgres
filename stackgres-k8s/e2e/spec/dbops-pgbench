#!/bin/sh

e2e_test_install() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 3
}

e2e_test() {
  run_test "Checking that pgbench is working" check_pgbench_is_working

  run_test "Checking that pgbench is working using API" check_pgbench_is_working_using_api

  run_test "Checking that pgbench is working with 10 clients and threads" check_pgbench_many_is_working

  run_test "Checking that pgbench is working with prepared statements" check_pgbench_prepared_is_working

  run_test "Checking that pgbench is working for replicas" check_pgbench_replicas_is_working

  run_test "Checking that pgbench timeout works correctly" check_pgbench_timed_out
}

check_pgbench_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: benchmark
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: benchmark
  benchmark:
    type: pgbench
    pgbench:
      databaseSize: 64Mi
      duration: PT10S
EOF

  DBOPS_CR="$(kubectl get sgdbops.stackgres.io -n "$CLUSTER_NAMESPACE" "benchmark" -o json \
    | jq 'del(.metadata.creationTimestamp) | del(.metadata.generation)
      | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')"
  
  echo_raw "$DBOPS_CR" > "$LOG_PATH/dbops-cr.json"

  DBOPS=$(cat "$LOG_PATH/dbops-cr.json" \
    | jq 'del(.apiVersion) | del(.kind) | del(.status) | del(.metadata.annotations)' )

  echo_raw "$DBOPS" > "$LOG_PATH/dbops.json"

  check_pgbench

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" benchmark
}

check_pgbench_is_working_using_api() {
  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi

  check_pgbench

  HTTP_STATUS="$(run_curl -r "stackgres/sgdbops" \
    -d "$LOG_PATH/dbops.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgdbops" \
      -d "$LOG_PATH/dbops.json" -e '-X DELETE')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

check_pgbench_many_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: benchmark
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: benchmark
  benchmark:
    type: pgbench
    pgbench:
      databaseSize: 64Mi
      duration: PT10S
      concurrentClients: 10
      threads: 10
EOF

  check_pgbench

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" benchmark
}

check_pgbench_prepared_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: benchmark
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: benchmark
  benchmark:
    type: pgbench
    pgbench:
      databaseSize: 64Mi
      duration: PT10S
      usePreparedStatements: true
EOF

  check_pgbench

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" benchmark
}

check_pgbench_replicas_is_working() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: benchmark
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: benchmark
  benchmark:
    type: pgbench
    pgbench:
      databaseSize: 64Mi
      duration: PT10S
    connectionType: replicas-service
EOF

  check_pgbench

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" benchmark
}

check_pgbench() {
  if kubectl wait --timeout "${E2E_TIMEOUT}s" -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --for condition=Completed
  then
    echo "SUCCESS. pgbench completed."
  else
    echo "FAILED. pgbench failed."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. pgbench job was not removed after completion."
  else
    echo "FAILED. pgbench job was removed after completion."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.scaleFactor }}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the scale factor."
  else
    echo "FAILED. pgbench did not returned the scale factor."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.transactionsProcessed }}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the transactions processed."
  else
    echo "FAILED. pgbench did not returned the transactions processed."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.latencyAverage }}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the average latency."
  else
    echo "FAILED. pgbench did not returned the average latency."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.latencyStddev}}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the latency standard deviation."
  else
    echo "FAILED. pgbench did not returned the latency standard deviation."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.tpsIncludingConnectionsEstablishing }}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the tps including connections establishing."
  else
    echo "FAILED. pgbench did not returned the tps including connections establishing."
    return 1
  fi

  if kubectl get -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --template '{{ .status.benchmark.pgbench.tpsExcludingConnectionsEstablishing }}' | grep '[0-9]\+\(\.[0-9]\+\)\?'
  then
    echo "SUCCESS. pgbench returned the tps excluding connections establishing."
  else
    echo "FAILED. pgbench did not returned the tps excluding connections establishing."
    return 1
  fi
}

check_pgbench_timed_out() {
  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: benchmark
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: benchmark
  timeout: PT1S
  benchmark:
    type: pgbench
    pgbench:
      databaseSize: 64Mi
      duration: PT10S
EOF

  if kubectl wait --timeout "${E2E_TIMEOUT}s" -n "$CLUSTER_NAMESPACE" sgdbops "benchmark" \
    --for condition=Failed
  then
    echo "SUCCESS. pgbench failed."
  else
    echo "FAILED. pgbench did not fail."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. pgbench job was not removed after failure."
  else
    echo "FAILED. pgbench job was removed after failure."
    return 1
  fi

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" benchmark

  if wait_until eval '[ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 0 ]'
  then
    echo "SUCCESS. pgbench job was removed after sgdbops was removed."
  else
    echo "FAILED. pgbench job was not removed after sgdbops was removed."
    return 1
  fi
}
