apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: stackgres-operator.v${VERSION}
  namespace: placeholder
  annotations:
    description: |
      The most advanced Postgres Enterprise Platform.
      Fully Open Source.
    alm-examples: '[]'
    capabilities: Deep Insights
    operatorhub.io/ui-metadata-max-k8s-version: "1.25"
    categories: Database
    repository: https://gitlab.com/ongresinc/stackgres
spec:
  displayName: StackGres
  provider:
    name: OnGres
    url: https://ongres.com
  version: ${VERSION}
  minKubeVersion: "1.18"
  maturity: stable
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: SGCluster
      name: sgclusters.stackgres.io
      version: v1
      displayName: StackGres Cluster
      description: Main CRD, manages Postgres clusters (one or more Postgres pods)
    - kind: SGInstanceProfile
      name: sginstanceprofiles.stackgres.io
      version: v1
      displayName: StackGres Instance Profile
      description: Instance Profiles are like "t-shirt" sizes, used for pods sizing
    - kind: SGPostgresConfig
      name: sgpgconfigs.stackgres.io
      version: v1
      displayName: StackGres Postgres Configuration
      description: Strongly validated customized Postgres configuration (postgresql.conf)
    - kind: SGPoolingConfig
      name: sgpoolconfigs.stackgres.io
      version: v1
      displayName: StackGres Connection Pooling Configuration
      description: Customized PgBouncer (connection pooler) configuration
    - kind: SGObjectStorage
      name: sgobjectstorages.stackgres.io
      version: v1beta1
      displayName: StackGres Object Storage
      description: Handle to an existing Object Storage (e.g. S3), used to store backups
    - kind: SGBackup
      name: sgbackups.stackgres.io
      version: v1
      displayName: StackGres Backup
      description: Handle to a performed (or to be performed, if run manually) backup
    - kind: SGDbOps
      name: sgdbops.stackgres.io
      version: v1
      displayName: StackGres Database Operation
      description: Day 2 Operations, including upgrades, restarts, vacuum, repack, etc
    - kind: SGScript
      name: sgscripts.stackgres.io
      version: v1
      displayName: StackGres Script
      description: Managed SQL Scripts, used for initial SQL commands or migrations
    - kind: SGDistributedLogs
      name: sgdistributedlogs.stackgres.io
      version: v1
      displayName: StackGres Distributed Logs
      description: Multi-tenant logs server, to aggregate Postgres logs. Fully managed
    - kind: StackGresOperator
      name: stackgresoperators.charts.stackgres.io
      version: v1
      displayName: StackGres Operator Configuration
      description: Operator configuration for OLM-based installations (equivalent to values.yaml with Helm)
  install:
    spec:
      deployments: null
    strategy: ""
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - postgresql
  - postgres
  - database
  - sql
  - rdbms
  - open source
  - ongres
  links:
  - name: StackGres Web
    url: https://stackgres.io
  - name: StackGres Docs
    url: https://stackgres.io/doc
  maintainers:
  - email: stackgres@ongres.com
    name: OnGres
  relatedImages:
  - image: ongres/kubectl:v1.25.5-build-6.19
    name: kubectl_1_25_5
  - image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
    name: kube-rbac-proxy_0_13_0
  - image: quay.io/stackgres/helm-operator:${VERSION}
    name: stackgres-operator-helm
  - image: docker.io/stackgres/operator:${VERSION}
    name: stackgres-operator
  - image: docker.io/stackgres/restapi:${VERSION}
    name: stackgres-restapi
  - image: docker.io/stackgres/admin-ui:${VERSION}
    name: stackgres-admin-ui
  - image: docker.io/stackgres/jobs:${VERSION}
    name: stackgres-jobs
  description: |
    The StackGres Operator bundle install the [StackGres Operator](https://stackgres.io) instance automatically in the same namespace where the StackGres Operator bundle was installed.

    For more installation options have a look at the [Operator Parameters](https://stackgres.io/doc/latest/install/operator/parameters/) section for a described list and change them by editing the StackGresOperator CR created in the same namespace where the StackGres Operator bundle was installed.

    If you want to enable StackGres integration with Prometheus and Grafana, please, read the next section.

    ## Creating and customizing your Postgres Clusters

    The next step is an optional one, but it will show you how to play with the StackGres versatility.

    You can instruct StackGres to create your cluster with different hardware specification using the [Custom Resource](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) (AKA CR) [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-instance-profiles/) as follow

    ```
    cat << EOF | kubectl apply -f -
    apiVersion: stackgres.io/v1
    kind: SGInstanceProfile
    metadata:
    namespace: my-cluster
    name: size-small
    spec:
    cpu: "2"
    memory: "4Gi"
    EOF
    ``` 

    But not only the Instance Profile, you can instruct StackGres to changes PostgreSQL configuration using the CR [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig/) or the PGBouncer setting with [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolingconfig/) and more, like the backup storage specification using [SGObjectStorage](https://stackgres.io/doc/latest/reference/crd/sgobjectstorage/)

    The next code snippets will show you how to play with these CRs.

    Start with PostgreSQL configuration using th SGPostgresConfig as follow

    ```
    cat << EOF | kubectl apply -f -
    apiVersion: stackgres.io/v1
    kind: SGPostgresConfig
    metadata:
    namespace: my-cluster
    name: pgconfig1
    spec:
    postgresVersion: "12"
    postgresql.conf:
      shared_buffers: '512MB'
      random_page_cost: '1.5'
      password_encryption: 'scram-sha-256'
      log_checkpoints: 'on'
    EOF
    ```

    You can easily declare the StackGres supported variables and setup your specific configuration.

    The pooling CR, is a key piece of a cluster (currently PgBouncer as the default software fot this), as it provides connection scaling capabilities. We’ll cover all more details about this in the [Customizing Pooling configuration section](https://stackgres.io/doc/latest/administration/cluster/pool/).

    For better performance and stability, it is recommended to use pool_mode in transaction. An example configuration would be like this:

    ```
    cat << EOF | kubectl apply -f -
    apiVersion: stackgres.io/v1
    kind: SGPoolingConfig
    metadata:
    namespace: my-cluster
    name: poolconfig1
    spec:
    pgBouncer:
      pgbouncer.ini:
        pgbouncer:
          pool_mode: transaction
          max_client_conn: '1000'
          default_pool_size: '80'
    EOF
    ``` 

    All the necessary steps were performed to create your first StackGres Cluster, lets do it.

    ```
    cat << EOF | kubectl apply -f -
    apiVersion: stackgres.io/v1
    kind: SGCluster
    metadata:
    namespace: my-cluster
    name: cluster
    spec:
    postgres:
      version: '12.3'
    instances: 3
    sgInstanceProfile: 'size-small'
    pods:
      persistentVolume:
        size: '10Gi'
    configurations:
      sgPostgresConfig: 'pgconfig1'
      sgPoolingConfig: 'poolconfig1'
    EOF
    ```

    Look up to the yaml into the here doc above, every CR previously being included in the right place in the SGCluster CR creation.

    Awesome, now you can relax and wait for the SGCluster spinning up.

    ## Accessing the cluster

    Once the cluster is up and running, we need to expose the main entrypoint port for being accessed remotely:

    > *WARNING*: You don’t expose in production to 0.0.0.0 interface, rather than that you need to place the IP of an internal interface to be able to connect remotely within you private network.

    ```
    kubectl port-forward -n my-cluster --address 0.0.0.0 statefulset/cluster 7777:7432
    ```

    In the namespace of the cluster, you should be able to see a set of secrets, we’ll get the main superuser password:

    ```
    kubectl get secrets -n my-cluster cluster -o jsonpath='{.data.superuser-password}' | base64 -d
    ```

    You should be able to connect by issuing any client application with the connection string as follows:

    ```
    psql -h <the ip of the cluster> -p 7777 -U postgres
    ```

    It is also possible to open a direct port-forward towards the main Postgres pod as follows:

    ```
    kubectl port-forward cluster-0 --address 0.0.0.0 7777:5432
    ```
  icon:
  - base64data: |
      PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA1MDAg
      NTAwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MDAgNTAwIiB4bWw6c3BhY2U9
      InByZXNlcnZlIj4KICAgIDxzd2l0Y2g+CiAgICAgICAgPGc+CiAgICAgICAgICAgIDxwYXRoIHN0
      eWxlPSJmaWxsOiM0MmE4YzgiIGQ9Im01LjIgMjczLjcgMTEwLjcgMTI2LjhoMjY4LjJsMTEwLjct
      MTI2LjgtMTEwLjctMTI2LjhIMTE1Ljl6Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxs
      OiM0MjZkODgiIGQ9Ik0xMTUuOSA0MDAuNWgyNjguNHY1Ni40SDExNS45eiIvPgogICAgICAgICAg
      ICA8cGF0aCBzdHlsZT0iZmlsbDojNDI4YmI0IiBkPSJNMTE1LjkgNDU2LjggNS4yIDMzMHYtNTYu
      M2wxMTAuNyAxMjYuOHoiLz4KICAgICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6IzE2NjU3YyIg
      ZD0iTTM4NC4xIDQ1Ni44IDQ5NC44IDMzMHYtNTYuM0wzODQuMSA0MDAuNXoiLz4KICAgICAgICAg
      ICAgPHBhdGggZD0iTTQ2NS43IDI1My40YzAtNDctOTYuNi04NS4yLTIxNS43LTg1LjJTMzQuNCAy
      MDYuMyAzNC40IDI1My40czk2LjUgODUuMiAyMTUuNiA4NS4yIDIxNS43LTM4LjIgMjE1LjctODUu
      MnoiIHN0eWxlPSJmaWxsOiMzOWI1NGEiLz4KICAgICAgICAgICAgPHBhdGggZD0iTTQ2NS43IDI1
      My40YzAgNDctOTYuNiA4NS4yLTIxNS43IDg1LjJTMzQuNCAzMDAuNCAzNC40IDI1My40djQ2Ljlj
      MTQuOSA0MS4zIDEwNi41IDg1LjIgMjE1LjYgODUuMnMyMDAuOC00My45IDIxNS43LTg1LjJ2LTQ2
      Ljl6IiBzdHlsZT0iZmlsbDojMDA5MjQ1Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxs
      OiNmMmM2M2YiIGQ9Ik0xNi4zIDE3OC42IDI1MCAzMTQuMWwyMzMuOC0xMzUuNUwyNTAgNDMuMnoi
      Lz4KICAgICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6I2YyYjEzNiIgZD0iTTE2LjMgMTc4LjZ2
      NTIuOEwyNTAgMzY2Ljl2LTUyLjh6Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxsOiNm
      MmExMzAiIGQ9Ik00ODMuOCAxNzguNiAyNTAgMzE0LjF2NTIuOGwyMzMuOC0xMzUuNXoiLz4KICAg
      ICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6I2ZmNzEyNCIgZD0ibTY4IDIxMi40IDM2NC4xLTUz
      LTkyLjQtMTA2eiIvPgogICAgICAgICAgICA8cGF0aCBzdHlsZT0iZmlsbDojZDkzZDFiIiBkPSJt
      NjggMjEyLjQgMzY0LjEtNTN2NDcuOEw2OCAyNjAuMXoiLz4KICAgICAgICA8L2c+CiAgICA8L3N3
      aXRjaD4KPC9zdmc+Cg==
    mediatype: image/svg+xml
