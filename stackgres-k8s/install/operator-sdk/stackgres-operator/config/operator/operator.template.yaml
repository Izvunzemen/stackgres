apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: stackgres-operator
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: system
    app.kubernetes.io/component: operator
    app.kubernetes.io/created-by: stackgres
    app.kubernetes.io/part-of: stackgres
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: operator
  namespace: system
  labels:
    app: stackgres-operator
    group: stackgres.io
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/created-by: stackgres
    app.kubernetes.io/part-of: stackgres
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      app: stackgres-operator
      group: stackgres.io
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: operator
      labels:
        app: stackgres-operator
        group: stackgres.io
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - name: operator
        image: operator:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          runAsNonRoot: true
$(
if [ "$OPENSHIFT_BUNDLE" != true ]
then
  cat << EOF
          runAsUser: 1000
          runAsGroup: 1000
EOF
fi
)
        env:
          - name: OPERATOR_CERT_FILE
            value: /tmp/k8s-webhook-server/serving-certs/tls.crt
          - name: OPERATOR_KEY_FILE
            value: /tmp/k8s-webhook-server/serving-certs/tls.key
          - name: OPERATOR_NAME
            value: stackgres-operator
          - name: OPERATOR_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OPERATOR_IMAGE_VERSION
            value: "${VERSION}"
          - name: OPERATOR_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: OPERATOR_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: OPERATOR_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: OPERATOR_VERSION
            value: "${VERSION}"
        ports:
        - containerPort: 8080
          name: "http"
          protocol: "TCP"
        - containerPort: 8443
          name: "https"
          protocol: "TCP"
        livenessProbe:
          httpGet:
            path: "/q/health/live"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: "/q/health/ready"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 0
          periodSeconds: 2
          timeoutSeconds: 1
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 1
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
      - name: default
        image: quay.io/ongres/kubectl:v1.25.5-build-6.19
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -exc
        - |
          # TODO: Remove this as soon as version 1.5 get out of support!
          kubectl patch sgconfig stackgres-operator --type merge -p '{"metadata": {"finalizers": null}}' 2>/dev/null \
            || ! kubectl get sgconfig stackgres-operator -o name 2>/dev/null
        
          # TODO: Remove this as soon as version 1.4 get out of support!
          PREVIOUS_SGCONFIG="\$(kubectl get sgconfig stackgres -o yaml || true)"
          if [ "x" = "x\$SGCONFIG" ] \
            && [ "x" != "x\$PREVIOUS_SGCONFIG" ]
          then
            SGCONFIG="\$PREVIOUS_SGCONFIG"
          fi

          SGCONFIG_SPEC=""
          if [ "x" != "x\$SGCONFIG" ]
          then
            if ! SGCONFIG="\$(printf %s "\$SGCONFIG" | kubectl create -f - --dry-run=client -o yaml)"
            then
              printf "Please set a correct value for SGCONFIG env var in Subscription since the following is invalid:\n\n%s\n" "\$SGCONFIG"
              exit 1
            fi
            if printf %s "\$SGCONFIG" | grep -q '^spec:$'
            then
              echo "Found SGConfig spec"
              SGCONFIG_SPEC_LINE="\$(printf %s "\$SGCONFIG" \
                | grep -n '^spec:$' | cut -d : -f 1)"
              SGCONFIG_AFTER_SPEC_LINE="\$(printf %s "\$SGCONFIG" \
                | tail -n +"\$((SGCONFIG_SPEC_LINE + 1))" \
                | grep -n '^[^ #].*$' | cut -d : -f 1)"
              if [ x != "x\$SGCONFIG_AFTER_SPEC_LINE" ]
              then
                SGCONFIG_SPEC="\$(printf %s "\$SGCONFIG" \
                  | head -n "\$((SGCONFIG_SPEC_LINE + SGCONFIG_AFTER_SPEC_LINE - 1))" \
                  | tail -n +"\$((SGCONFIG_AFTER_SPEC_LINE - 1))")"
              else
                SGCONFIG_SPEC="\$(printf %s "\$SGCONFIG" \
                  | tail -n +"\$((SGCONFIG_SPEC_LINE + 1))")"
              fi
            else
              echo "Found SGConfig without spec, ignoring!"
            fi
          fi

          # TODO: Remove this as soon as version 1.5 get out of support!
          kubectl delete --ignore-not-found clusterrole stackgres-restapi
          kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi
          kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi-admin
          kubectl delete --ignore-not-found validatingwebhookconfiguration stackgres-operator
          kubectl delete --ignore-not-found mutatingwebhookconfiguration stackgres-operator
          kubectl delete --ignore-not-found configmap stackgres-operator
          kubectl delete --ignore-not-found configmap stackgres-operator-grafana-dashboard
          kubectl delete --ignore-not-found configmap stackgres-restapi-nginx
          kubectl delete --ignore-not-found secret stackgres-operator-certs
          kubectl delete --ignore-not-found secret stackgres-operator-service-certs
          kubectl delete --ignore-not-found secret stackgres-operator-web-certs
          kubectl delete --ignore-not-found secret stackgres-restapi
          kubectl delete --ignore-not-found deployment -l olm.owner=stackgres.v1.5.0

          # TODO: Remove this as soon as version 1.4 get out of support!
          kubectl delete --ignore-not-found sgconfig stackgres
          kubectl delete --ignore-not-found clusterrole stackgres
          kubectl delete --ignore-not-found clusterrole stackgres-restapi
          kubectl delete --ignore-not-found clusterrolebinding stackgres
          kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi
          kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi-admin
          kubectl delete --ignore-not-found validatingwebhookconfiguration stackgres
          kubectl delete --ignore-not-found mutatingwebhookconfiguration stackgres
          kubectl delete --ignore-not-found configmap stackgres
          kubectl delete --ignore-not-found configmap stackgres-grafana-dashboard
          kubectl delete --ignore-not-found configmap stackgres-restapi-nginx
          kubectl delete --ignore-not-found secret stackgres-certs
          kubectl delete --ignore-not-found secret stackgres-service-certs
          kubectl delete --ignore-not-found secret stackgres-web-certs
          kubectl delete --ignore-not-found secret stackgres-restapi
          kubectl delete --ignore-not-found deployment -l olm.owner=stackgres.v1.4.3

          OPERATOR_NAME="\$(kubectl get operators.operators.coreos.com -o name \
            | grep '^operator.operators.coreos.com/stackgres' \
            | head -n 1 | cut -d / -f 2)"
          test -n "\$OPERATOR_NAME"
          OPERATOR_UID="\$(kubectl get operators.operators.coreos.com "\$OPERATOR_NAME" --template '{{ .metadata.uid }}')"
          test -n "\$OPERATOR_UID"

          cat << EOF | kubectl apply -f -
          apiVersion: stackgres.io/v1
          kind: SGConfig
          metadata:
            name: stackgres-operator
          spec:
          \$SGCONFIG_SPEC
            clusterOwnerReferences:
            - apiVersion: operators.coreos.com/v1
              kind: Operator
              name: \$OPERATOR_NAME
              uid: \$OPERATOR_UID
          EOF

          while true; do sleep 3600; done
        securityContext:
          runAsNonRoot: true
$(
if [ "$OPENSHIFT_BUNDLE" != true ]
then
  cat << EOF
          runAsUser: 1000
          runAsGroup: 1000
EOF
fi
)
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 1
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 8Mi
      serviceAccountName: operator
      terminationGracePeriodSeconds: 10
