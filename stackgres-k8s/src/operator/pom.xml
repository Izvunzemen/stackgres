<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.stackgres</groupId>
    <artifactId>stackgres-parent</artifactId>
    <version>0.9-SNAPSHOT</version>
  </parent>

  <artifactId>stackgres-operator</artifactId>
  <packaging>jar</packaging>
  <name>StackGres Operator</name>

  <properties>
    <stackgres.operatorName>stackgres-operator</stackgres.operatorName>
    <stackgres.operatorNamespace>stackgres</stackgres.operatorNamespace>
    <stackgres.operatorIP>localhost</stackgres.operatorIP>
    <stackgres.operatorVersion>${project.version}</stackgres.operatorVersion>
    <stackgres.containerBuild>4-dev</stackgres.containerBuild>
    <stackgres.group>stackgres.io</stackgres.group>
    <stackgres.crd.version>v1beta1</stackgres.crd.version>
    <stackgres.prometheus.allowAutobind>true</stackgres.prometheus.allowAutobind>
    <stackgres.prometheus.grafanaEmbedded>false</stackgres.prometheus.grafanaEmbedded>
    <stackgres.documentation.uri>https://stackgres.io/doc/</stackgres.documentation.uri>
    <stackgres.documentation.errorsPath>/07-developer-documentation/01-error-types#</stackgres.documentation.errorsPath>
    <stackgres.authentication.secretName>stackgres-operator</stackgres.authentication.secretName>

    <quarkus.http.ssl.certificate.file>/etc/operator/certs/server.crt</quarkus.http.ssl.certificate.file>
    <quarkus.http.ssl.certificate.key-file>/etc/operator/certs/root.key</quarkus.http.ssl.certificate.key-file>
    <quarkus.skipAugmentation>false</quarkus.skipAugmentation>

    <checkstyle.conifg.folder.location>${project.basedir}/../checks/checkstyle</checkstyle.conifg.folder.location>
    <checkstyle.config.location>${checkstyle.conifg.folder.location}/checkstyle.xml</checkstyle.config.location>
    <checkstyle.header.file>${checkstyle.conifg.folder.location}/header.txt</checkstyle.header.file>
    <spotbugs.excludeFilterFile>${project.basedir}/../checks/spotbugs/exclude.xml</spotbugs.excludeFilterFile>

    <it.image>stackgres/it:4.0</it.image>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-operator-framework</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-security</artifactId>
    </dependency>
    <dependency>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jooq</groupId>
      <artifactId>jooq</artifactId>
    </dependency>
    <dependency>
      <groupId>com.oracle.substratevm</groupId>
      <artifactId>svm</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.persistence</groupId>
      <artifactId>jakarta.persistence-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ongres</groupId>
      <artifactId>docker-junit-extension</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.connectors</groupId>
      <artifactId>jersey-apache-connector</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.test-framework</groupId>
      <artifactId>jersey-test-framework-core</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.test-framework.providers</groupId>
      <artifactId>jersey-test-framework-provider-grizzly2</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fabric8</groupId>
      <artifactId>kubernetes-server-mock</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>stackgres-operator</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.version}</version>
        <executions>
          <execution>
            <id>quarkus-augmentation</id>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <skip>${quarkus.skipAugmentation}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>safer</id>
      <properties>
        <check-operator-values>true</check-operator-values>
      </properties>
    </profile>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <quarkus.package.type>native</quarkus.package.type>
      </properties>
    </profile>
    <profile>
      <id>integration</id>
      <properties>
        <it.skipBuildContainer>false</it.skipBuildContainer>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${failsafe-plugin.version}</version>
            <executions>
              <execution>
                <id>integration-test</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
                <configuration>
                  <trimStackTrace>false</trimStackTrace>
                  <forkCount>1</forkCount>
                  <reuseForks>false</reuseForks>
                  <includes>
                    <include>**/It*.java</include>
                    <include>**/*It.java</include>
                    <include>**/*ItCase.java</include>
                  </includes>
                  <excludes>
                  </excludes>
                </configuration>
              </execution>
              <execution>
                <id>verify</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <configuration>
              <restartPolicy>
                  <name>on-failure</name>
                  <retry>3</retry>
              </restartPolicy>
            </configuration>
            <executions>
              <execution>
                <id>build-stackgres-it-container</id>
                <phase>pre-integration-test</phase>
                <goals>
                    <goal>build</goal>
                </goals>
                <configuration>
                  <skip>${it.skipBuildContainer}</skip>
                  <images>
                    <image>
                      <name>${it.image}</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <optimise>true</optimise>
                        <dockerFile>${project.basedir}/src/test/docker/Dockerfile.it</dockerFile>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-image-jvm</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>ongres-jvm-builder</alias>
                      <name>ongres-jvm-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>quay.io/buildah/stable:v1.14.8</from>
                        <assembly>
                          <targetDir>/operator</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/operator/src/main/buildah/build-image-jvm.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <IMAGE_NAME>${env.IMAGE_NAME}</IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-image-native</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>ongres-native-builder</alias>
                      <name>ongres-native-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>quay.io/buildah/stable:v1.14.8</from>
                        <assembly>
                          <targetDir>/operator</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/operator/src/main/buildah/build-image-native.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>600000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <IMAGE_NAME>${env.IMAGE_NAME}</IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-jvm</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${it.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                        IMAGE_NAME="${IMAGE_NAME:-"stackgres/operator:development-jvm"}"
                        CONTAINER_NAME="$(docker inspect -f '{{.Name}}' "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                        kind load docker-image --name "$CONTAINER_NAME" "$IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <IMAGE_NAME>${env.IMAGE_NAME}</IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${it.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                        IMAGE_NAME="${IMAGE_NAME:-"stackgres/operator:development"}"
                        CONTAINER_NAME="$(docker inspect -f '{{.Name}}' "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                        kind load docker-image --name "$CONTAINER_NAME" "$IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <IMAGE_NAME>${env.IMAGE_NAME}</IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>update-versions</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.1.1</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>java</goal>
                </goals>
                <configuration>
                  <mainClass>io.stackgres.operator.common.StackGresComponents</mainClass>
                  <arguments>
                    <argument>${project.basedir}/src/main/resources/versions.properties</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
