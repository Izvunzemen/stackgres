#!/bin/sh

LOCK_TIMEOUT="${LOCK_TIMEOUT:-30}"
LOCK_SLEEP="${LOCK_SLEEP:-5}"

SHELL="$(readlink /proc/$$/exe)"
if [ "$(basename "$SHELL")" = busybox ]
then
  SHELL=sh
fi
SHELL_XTRACE=$(! echo $- | grep -q x || echo " -x")

acquire_lock() {
  try_lock true
}

maintain_lock() {
  while true
  do
    sleep "$LOCK_SLEEP"
    try_lock false
    if [ "$?" != 0 ]
    then
      return 1
    fi
  done
}

try_lock() {
  if [ -z "$CLUSTER_NAMESPACE" -o -z "$POD_NAME" -o -z "$LOCK_RESOURCE" -o -z "$LOCK_RESOURCE_NAME" ]
  then
    echo "CLUSTER_NAMESPACE, POD_NAME, LOCK_RESOURCE and LOCK_RESOURCE_NAME environmant variables must be defined"
    return 1
  fi
  local WAIT="$1"
  local TEMPLATE='
  LOCK_POD={{ if .metadata.annotations.lockPod }}{{ .metadata.annotations.lockPod }}{{ else }}{{ end }}
  LOCK_TIMESTAMP={{ if .metadata.annotations.lockTimestamp }}{{ .metadata.annotations.lockTimestamp }}{{ else }}0{{ end }}
  RESOURCE_VERSION={{ .metadata.resourceVersion }}
  '
  kubectl get "$LOCK_RESOURCE" -n "$CLUSTER_NAMESPACE" "$LOCK_RESOURCE_NAME" --template "$TEMPLATE" > /tmp/lock-resource
  . /tmp/lock-resource
  CURRENT_TIMESTAMP="$(date +%s)"
  if [ "$POD_NAME" != "$LOCK_POD" ]
  then
    if "$WAIT"
    then
      if [ "$((CURRENT_TIMESTAMP-LOCK_TIMESTAMP))" -lt "$LOCK_TIMEOUT" ]
      then
        local WAIT_DURATION="$((LOCK_TIMEOUT + LOCK_SLEEP))"
        echo "Locked already by $LOCK_POD at $(date -d @"$LOCK_TIMESTAMP" -Iseconds --utc), will retry in $WAIT_DURATION seconds"
        sleep "$WAIT_DURATION"
        try_lock true
      fi
    else
      echo "Locked already by $LOCK_POD at $(date -d @"$LOCK_TIMESTAMP" -Iseconds --utc)"
      return 1
    fi
  fi
  if ! "$WAIT" && [ "$((CURRENT_TIMESTAMP-LOCK_TIMESTAMP))" -gt "$LOCK_TIMEOUT" ]
  then
    echo "Lock expired!"
    return 1
  fi
  if ! kubectl annotate "$LOCK_RESOURCE" -n "$CLUSTER_NAMESPACE" "$LOCK_RESOURCE_NAME" \
    --resource-version "$RESOURCE_VERSION" --overwrite "lockPod=$POD_NAME" "lockTimestamp=$CURRENT_TIMESTAMP"
  then
    kubectl get "$LOCK_RESOURCE" -n "$CLUSTER_NAMESPACE" "$LOCK_RESOURCE_NAME" --template "$TEMPLATE" > /tmp/lock-resource
    . /tmp/lock-resource
    if [ "$POD_NAME" = "$LOCK_POD" ]
    then
      try_lock "$WAIT"
      return 0
    fi
    echo "Locked by $LOCK_POD at $(date -d @"$LOCK_TIMESTAMP" -Iseconds --utc)"
    if "$WAIT"
    then
      sleep 20
      try_lock true
    else
      return 1
    fi
  fi
}

to_json_string() {
  sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/\(["\\\t]\)/\\\1/g' | tr '\t' 't'
}

kill_with_childs() {
  (
  set +e
  local PID="$1"
  local SPIDS="x"
  local OPIDS
  OPIDS="$PID"
  local OPPID="$OPIDS"
  while [ -n "$OPPID" ]
  do
      OPPID="$(grep '^PPid:[[:space:]]'"\($(
            echo "$OPPID" | sed '{s/ $//;s/ /\\|/g}'
          )\)"'$' /proc/[0-9]*/status 2>/dev/null \
        | cut -d / -f 3 | tr '\n' ' ')"
      OPIDS="$OPIDS $OPPID"
  done
  kill -13 $OPIDS 2>/dev/null || true
  )
}

kill_session_siblings() {
  (
  set +e
  local PID="$(exec "$SHELL" -c 'echo $PPID')"
  local NSSID="$(grep '^NSsid:[[:space:]]' "/proc/$PID/status" \
        | tr -d '[:space:]' | cut -d : -f 2)"
  local SPIDS="x"
  local OPIDS
  OPIDS="$PID"
  local OPPID="$OPIDS"
  while [ "$OPPID" != "$NSSID" ]
  do
      OPPID="$(grep '^PPid:[[:space:]]' "/proc/$OPPID/status" \
        | tr -d '[:space:]' | cut -d : -f 2)"
      OPIDS="$OPIDS $OPPID"
  done
  while [ "$SPIDS" = x ] \
    || [ "$(ls -d $(echo "$SPIDS" | sed 's#\([0-9]\+\) #/proc/\1 #g') 2>&1 | grep -i 'no such' | wc -l)" \
      -lt "$(echo "$SPIDS" | wc -w)" ]
  do
    test "$SPIDS" = "x" || kill -13 $SPIDS 2>/dev/null || true
    SPIDS="$(grep '^NSsid:[[:space:]]'"$NSSID"'$' /proc/[0-9]*/status 2>/dev/null \
      | cut -d / -f 3 | grep -v '^'"\($(echo "$OPIDS" | sed 's/ /\\|/g')\)"'$' | tr '\n' ' ')"
  done
  ) || true
}

trap_callback() {
  kill_session_siblings
}

trap_callback_and_exit() {
  trap_callback
  exit "$1"
}

set_trap() {
  trap 'trap_callback_and_exit $?' HUP INT QUIT PIPE TERM ABRT
  trap 'trap_callback $?' EXIT
}
