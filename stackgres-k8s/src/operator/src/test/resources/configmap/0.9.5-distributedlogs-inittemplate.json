{
  "apiVersion": "v1",
  "data": {
    "00000-distributed-logs-template.template1.sql": "BEGIN;\n\nCREATE DOMAIN log_type AS char(2) CHECK (VALUE IN ('pg','pa'));\n\nCREATE SEQUENCE log_postgres_log_time_index_seq INCREMENT 2 MINVALUE 0 MAXVALUE 1000000 CACHE 1000 CYCLE;\n\nCREATE TABLE log_postgres (\n  log_time timestamp(3) with time zone NOT NULL,\n  log_time_index integer NOT NULL DEFAULT nextval('log_postgres_log_time_index_seq'),\n  pod_name text NOT NULL,\n  role text,\n  error_severity text,\n  message text,\n  user_name text,\n  database_name text,\n  process_id integer,\n  connection_from text,\n  session_id text,\n  session_line_num bigint,\n  command_tag text,\n  session_start_time timestamp with time zone,\n  virtual_transaction_id text,\n  transaction_id bigint,\n  sql_state_code text,\n  detail text,\n  hint text,\n  internal_query text,\n  internal_query_pos integer,\n  context text,\n  query text,\n  query_pos integer,\n  location text,\n  application_name text,\n  PRIMARY KEY (log_time, log_time_index)\n);\n\nALTER SEQUENCE log_postgres_log_time_index_seq OWNED BY log_postgres.log_time_index;\n\nCREATE FUNCTION log_postgres_set_log_time_index() RETURNS trigger\nAS\n$$\nBEGIN\n  NEW.log_time_index := nextval('log_postgres_log_time_index_seq');\n  RETURN NEW;\nEND;\n$$\nLANGUAGE plpgsql;\n\nCREATE TRIGGER log_postgres_set_log_time_index\n  BEFORE INSERT ON log_postgres\n  FOR EACH ROW EXECUTE FUNCTION log_postgres_set_log_time_index();\n\nCREATE FUNCTION log_postgres_tsvector(log_postgres) RETURNS tsvector\nAS\n$$\n  SELECT to_tsvector('simple',\n  coalesce($1.message, '')       || ' ' ||\n  coalesce($1.query, '')         || ' ' ||\n  coalesce($1.detail, '')        || ' ' ||\n  coalesce($1.hint, '')          || ' ' ||\n  coalesce($1.database_name, '') || ' ' ||\n  coalesce($1.user_name, '')     || ' ' ||\n  coalesce($1.application_name, ''));\n$$\nLANGUAGE sql\nIMMUTABLE;\n\nCREATE INDEX log_postgres_fts_idx ON log_postgres USING GIN (log_postgres_tsvector(log_postgres));\n\nCREATE SEQUENCE log_patroni_log_time_index_seq INCREMENT 2 MINVALUE 1 MAXVALUE 1000001 CACHE 1000 CYCLE;\n\nCREATE TABLE log_patroni (\n  log_time timestamp(3) with time zone NOT NULL,\n  log_time_index integer NOT NULL DEFAULT nextval('log_patroni_log_time_index_seq'),\n  pod_name text NOT NULL,\n  role text,\n  error_severity text,\n  message text,\n  PRIMARY KEY (log_time, log_time_index)\n);\n\nALTER SEQUENCE log_patroni_log_time_index_seq OWNED BY log_patroni.log_time_index;\n\nCREATE FUNCTION log_patroni_set_log_time_index() RETURNS trigger\nAS\n$$\nBEGIN\n  NEW.log_time_index := nextval('log_patroni_log_time_index_seq');\n  RETURN NEW;\nEND;\n$$\nLANGUAGE plpgsql;\n\nCREATE TRIGGER log_patroni_set_log_time_index\n  BEFORE INSERT ON log_patroni\n  FOR EACH ROW EXECUTE FUNCTION log_patroni_set_log_time_index();\n\nCREATE FUNCTION log_patroni_tsvector(log_patroni) RETURNS tsvector\nAS\n$$\n  SELECT to_tsvector('simple', coalesce($1.message, ''));\n$$\nLANGUAGE sql\nIMMUTABLE;\n\nCREATE INDEX log_patroni_fts_idx ON log_patroni USING GIN (log_patroni_tsvector(log_patroni));\n\nCREATE EXTENSION plpython3u;\n\nCREATE FUNCTION split_csv(\n  line text,\n  delim_char char(1) = ',',\n  quote_char char(1) = '\"',\n  escap_char char(1) = E'\\\\')\nRETURNS SETOF text[]\nAS\n$$\n  import csv\n  return csv.reader(line.splitlines(), quotechar=quote_char, delimiter=delim_char, skipinitialspace=True, escapechar=escap_char)\n$$\nLANGUAGE plpython3u IMMUTABLE;\n\nCREATE FUNCTION log_postgres_extract_fields() RETURNS trigger\nAS\n$$\nDECLARE\n  fields text[];\nBEGIN\n  fields := split_csv(NEW.message);\n  NEW.user_name := nullif(fields[01], '');\n  NEW.database_name := nullif(fields[02], '');\n  NEW.process_id := nullif(fields[03], '')::integer;\n  NEW.connection_from := nullif(fields[04], '');\n  NEW.session_id := nullif(fields[05], '');\n  NEW.session_line_num := nullif(fields[06], '')::bigint;\n  NEW.command_tag := nullif(fields[07], '');\n  NEW.session_start_time := nullif(fields[08], '')::timestamptz;\n  NEW.virtual_transaction_id := nullif(fields[09], '');\n  NEW.transaction_id := nullif(fields[10], '')::bigint;\n  NEW.error_severity := nullif(fields[11], '');\n  NEW.sql_state_code := nullif(fields[12], '');\n  NEW.message := nullif(fields[13], '');\n  NEW.detail := nullif(fields[14], '');\n  NEW.hint := nullif(fields[15], '');\n  NEW.internal_query := nullif(fields[16], '');\n  NEW.internal_query_pos := nullif(fields[17], '')::integer;\n  NEW.context := nullif(fields[18], '');\n  NEW.query := nullif(fields[19], '');\n  NEW.query_pos := nullif(fields[20], '')::integer;\n  NEW.location := nullif(fields[21], '');\n  NEW.application_name := nullif(fields[22], '');\n  RETURN NEW;\nEND;\n$$\nLANGUAGE plpgsql;\n\nCREATE TRIGGER log_postgres_extract_fields\n  BEFORE INSERT ON log_postgres\n  FOR EACH ROW EXECUTE FUNCTION log_postgres_extract_fields();\n\nCOMMIT;\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "creationTimestamp": "2021-06-04T19:51:35Z",
    "labels": {
      "app": "StackGresDistributedLogs",
      "cluster": "true",
      "distributed-logs-name": "distributedlogs",
      "distributed-logs-uid": "194a581e-4f62-486e-8fa7-9b1effca98bf"
    },
    "name": "distributedlogs-00000-distributed-logs-template-template1",
    "namespace": "operator-upgrade-60ba8257",
    "ownerReferences": [
      {
        "apiVersion": "stackgres.io/v1beta1",
        "controller": true,
        "kind": "SGDistributedLogs",
        "name": "distributedlogs",
        "uid": "194a581e-4f62-486e-8fa7-9b1effca98bf"
      }
    ],
    "resourceVersion": "5470",
    "selfLink": "/api/v1/namespaces/operator-upgrade-60ba8257/configmaps/distributedlogs-00000-distributed-logs-template-template1",
    "uid": "13b8eceb-5833-46fe-99b3-dd51d89c7f7d"
  }
}
