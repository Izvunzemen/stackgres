{
  "openapi": "3.0.1",
  "paths": {
    "/stackgres/auth/login": {
      "post": {
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The JWT bearer token that is needed to authenticate a user request.\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Log in a user and returns a JWT token.\n\n### RBAC permissions required\n\nNone\n"
      }
    },
    "/stackgres/auth/rbac/can-i": {
      "get": {
        "operationId": "caniList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Can-i list",
        "description": "Return a list of namespaced and unnamespaced permissions a user has granted.\n\n### RBAC permissions required\n\nNone\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/auth/rbac/can-i/{verb}/{resource}": {
      "get": {
        "operationId": "verb",
        "parameters": [
          {
            "name": "verb",
            "description": "The verb to check authorization against",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource",
            "description": "The resource to check authorization against",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "description": "The namespace to check authorization against",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "description": "The resource group to check authorization against",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectAccessReviewStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Can-i <verb> over <resource>",
        "description": "Check if an user can do specified `<verb>` on specified `<resource>`.\n\n### RBAC permissions required\n\nNone\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/configmaps/{namespace}": {
      "get": {
        "operationId": "list_3",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to list resources from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigMapDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "misc"
        ],
        "summary": "List configmaps",
        "description": "List configmaps.\n\n### RBAC permissions required\n\n* configmaps list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/kubernetes-cluster-info": {
      "get": {
        "operationId": "info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The URL to connect to the kubernetes cluster"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "misc"
        ],
        "summary": "Get kubernetes cluster info",
        "description": "Get kubernetes cluster info.\n\n### RBAC permissions required\n\nNone\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/namespace": {
      "get": {
        "operationId": "get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "A namespace\n"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "misc"
        ],
        "summary": "List namespaces",
        "description": "List namespaces.\n\n### RBAC permissions required\n\n* namespaces list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/secrets/{namespace}": {
      "get": {
        "operationId": "list_9",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to list the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecretDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "misc"
        ],
        "summary": "List secrets",
        "description": "List secrets.\n\n### RBAC permissions required\n\n* secrets list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgbackup": {
      "get": {
        "operationId": "list_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackup"
        ],
        "summary": "List sgbackups",
        "description": "List sgbackups.\n\n### RBAC permissions required\n\n* sgbackups list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackup"
        ],
        "summary": "Update a sgbackup",
        "description": "Update a sgbackup.\n\n### RBAC permissions required\n\n* sgbackup patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackup"
        ],
        "summary": "Create a sgbackup",
        "description": "Create a sgbackup.\n\n### RBAC permissions required\n\n* sgbackup create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackup"
        ],
        "summary": "Delete a sgbackup",
        "description": "Delete a sgbackup.\n\n### RBAC permissions required\n\n* sgbackup delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgbackup/{namespace}/{name}": {
      "get": {
        "operationId": "get_2",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackup"
        ],
        "summary": "Get a sgbackup",
        "description": "Get a sgbackup.\n\n### RBAC permissions required\n\n* sgbackup get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgbackupconfig": {
      "get": {
        "operationId": "list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupConfigDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackupconfig"
        ],
        "summary": "List sgbackupconfigs",
        "description": "List sgbackupconfigs and read values from the referenced secrets.\n\n### RBAC permissions required\n\n* sgbackupconfigs list\n* secrets get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackupconfig"
        ],
        "summary": "Update a sgbackupconfig",
        "description": "Update a sgbackupconfig.\n If values are provided referenced secrets are created/patched or a secret named as\n the sgbackupconfig with `-secrets` suffix is created/patched if no secret is\n referenced.\n\n### RBAC permissions required\n\n* sgbackupconfigs patch\n* secrets get, create, patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackupconfig"
        ],
        "summary": "Create a sgbackupconfig",
        "description": "Create a sgbackupconfig.\n If values are provided referenced secrets are created/patched or a secret named as\n the sgbackupconfig with `-secrets` suffix is created/patched if no secret is\n referenced.\n\n### RBAC permissions required\n\n* sgbackupconfigs create\n* secrets get, create, patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackupconfig"
        ],
        "summary": "Delete a sgbackupconfig",
        "description": "Delete a sgbackupconfig.\n If a secret named as the sgbackupconfig with `-secrets` suffix is found, it will be\n deleted also.\n\n\n### RBAC permissions required\n\n* sgbackupconfigs delete\n* secrets get, delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgbackupconfig/{namespace}/{name}": {
      "get": {
        "operationId": "get_1",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupConfigDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgbackupconfig"
        ],
        "summary": "Get a sgbackupconfig",
        "description": "Get a sgbackupconfig and read values from the referenced secrets.\n\n### RBAC permissions required\n\n* sgbackupconfigs get\n* secrets get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgcluster": {
      "get": {
        "operationId": "list_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClusterDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "List sgclusters",
        "description": "List sgclusters and read values from the referenced secrets and configmaps.\n\n### RBAC permissions required\n\n* sgclusters list\n* pod list\n* secrets get\n* configmaps get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Update a sgcluster",
        "description": "Update a sgcluster.\n\n### RBAC permissions required\n\n* sgclusters patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Create a sgcluster",
        "description": "Create a sgcluster.\nIf values for some script configmap or secret is provided respectively a secret or\n configmap named as the script if name is provided or as the sgcluster with\n `-init-script-<script index>` suffix is created/patched.\n\n### RBAC permissions required\n\n* sgclusters create\n* secrets get, create, patch\n* configmaps get, create, patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Delete a sgcluster",
        "description": "Delete a sgcluster.\n\n### RBAC permissions required\n\n* sgclusters delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgcluster/logs/{namespace}/{name}": {
      "get": {
        "operationId": "logs",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "records",
            "description": "The number of log entries to return",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "description": "The instant in ISO-8601 format (optionally followed by a period and an integer to\n represent a specific `logTimeIndex` value) from which log entries are returned (exclusive).\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "description": "The instant in ISO-8601 format (optionally followed by a period and an integer to\n represent a specific `logTimeIndex` value) up to which log entries are returned (inclusive).\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "The sort order of the returned log entries. Use `asc` for ascending and `desc` for descending.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "description": "A query where all terms are separated from a space (` `) character and only are returned\n if all terms are matching. An exact string can be searched if surrounded by a quotes (`\"`)\n characters.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logType",
            "description": "Filter log entries returned by type: `pa` for Patroni; `pg` for Postgres.\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podName",
            "description": "Filter log entries returned by pod name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "description": "Filter log entries returned by role: `Primary`, `Replica`, `Uninitialized` or `Standby`\n",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorLevel",
            "description": "Filter log entries returned by error level",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "description": "Filter log entries returned by user name. This filter works only for Postgres log entries.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "databaseName",
            "description": "Filter log entries returned by database name. This filter works only for Postgres log entries.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromInclusive",
            "description": "The instant in ISO-8601 format (optionally followed by a period and an integer to\n represent a specific `logTimeIndex` value) from which log entries are returned (exclusive).\n",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClusterLogEntryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Get a sgcluster's logs",
        "description": "Get a sgcluster's logs.\n\n### RBAC permissions required\n\n* sgclusters get\n* pod list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgcluster/stats/{namespace}/{name}": {
      "get": {
        "operationId": "stats",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterStatsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Get a sgcluster's stats",
        "description": "Get a sgcluster's stats.\n\n### RBAC permissions required\n\n* sgclusters get\n* pod list\n* pod/exec create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgcluster/{namespace}/{name}": {
      "get": {
        "operationId": "get_3",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgcluster"
        ],
        "summary": "Get a sgcluster",
        "description": "Get a sgcluster and read values from the referenced secrets and configmaps.\n\n### RBAC permissions required\n\n* sgclusters get\n* pod list\n* secrets get\n* configmaps get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgdbops": {
      "get": {
        "operationId": "list_5",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DbOpsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdbops"
        ],
        "summary": "List sgdbops",
        "description": "List sgdbops.\n\n### RBAC permissions required\n\n* sgdbops list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbOpsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdbops"
        ],
        "summary": "Update a sgdbops",
        "description": "Update a sgdbops.\n\n### RBAC permissions required\n\n* sgdbops patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbOpsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdbops"
        ],
        "summary": "Create a sgdbops",
        "description": "Create a sgdbops.\n\n### RBAC permissions required\n\n* sgdbops create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbOpsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdbops"
        ],
        "summary": "Delete a sgdbops",
        "description": "Delete a sgdbops.\n\n### RBAC permissions required\n\n* sgdbops delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgdbops/{namespace}/{name}": {
      "get": {
        "operationId": "get_5",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbOpsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdbops"
        ],
        "summary": "Get a sgdbops",
        "description": "Get a sgdbops.\n\n### RBAC permissions required\n\n* sgdbops get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgdistributedlogs": {
      "get": {
        "operationId": "list_6",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributedLogsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdistributedlogs"
        ],
        "summary": "List sgdistributedlogs",
        "description": "List sgdistributedlogs.\n\n### RBAC permissions required\n\n* sgdistributedlogs list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistributedLogsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdistributedlogs"
        ],
        "summary": "Update a sgdistributedlogs",
        "description": "Update a sgdistributedlogs.\n\n### RBAC permissions required\n\n* sgdistributedlogs patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistributedLogsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdistributedlogs"
        ],
        "summary": "Create a sgdistributedlogs",
        "description": "Create a sgdistributedlogs.\n\n### RBAC permissions required\n\n* sgdistributedlogs create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistributedLogsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdistributedlogs"
        ],
        "summary": "Delete a sgdistributedlogs",
        "description": "Delete a sgdistributedlogs.\n\n### RBAC permissions required\n\n* sgdistributedlogs delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgdistributedlogs/{namespace}/{name}": {
      "get": {
        "operationId": "get_6",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributedLogsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgdistributedlogs"
        ],
        "summary": "Get a sgdistributedlogs",
        "description": "Get a sgdistributedlogs.\n\n### RBAC permissions required\n\n* sgdistributedlogs get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sginstanceprofile": {
      "get": {
        "operationId": "list_8",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sginstanceprofile"
        ],
        "summary": "List sginstanceprofiles",
        "description": "List sginstanceprofiles.\n\n### RBAC permissions required\n\n* sginstanceprofiles list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_7",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sginstanceprofile"
        ],
        "summary": "Update a sginstanceprofile",
        "description": "Update a sginstanceprofile.\n\n### RBAC permissions required\n\n* sginstanceprofiles patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_7",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sginstanceprofile"
        ],
        "summary": "Create a sginstanceprofile",
        "description": "Create a sginstanceprofile.\n\n### RBAC permissions required\n\n* sginstanceprofiles create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_7",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sginstanceprofile"
        ],
        "summary": "Delete a sginstanceprofile",
        "description": "Delete a sginstanceprofile.\n\n### RBAC permissions required\n\n* sginstanceprofiles delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sginstanceprofile/{namespace}/{name}": {
      "get": {
        "operationId": "get_9",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sginstanceprofile"
        ],
        "summary": "Get a sginstanceprofile",
        "description": "Get a sginstanceprofile.\n\n### RBAC permissions required\n\n* sginstanceprofiles get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgpgconfig": {
      "get": {
        "operationId": "list_7",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostgresConfigDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpgconfig"
        ],
        "summary": "List sgpgconfigs",
        "description": "List sgpgconfigs.\n\n### RBAC permissions required\n\n* sgpgconfigs list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostgresConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpgconfig"
        ],
        "summary": "Update a sgpgconfig",
        "description": "Update a sgpgconfig.\n\n### RBAC permissions required\n\n* sgpgconfigs patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostgresConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpgconfig"
        ],
        "summary": "Create a sgpgconfig",
        "description": "Create a sgpgconfig.\n\n### RBAC permissions required\n\n* sgpgconfigs create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostgresConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpgconfig"
        ],
        "summary": "Delete a sgpgconfig",
        "description": "Delete a sgpgconfig.\n\n### RBAC permissions required\n\n* sgpgconfigs delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgpgconfig/{namespace}/{name}": {
      "get": {
        "operationId": "get_8",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostgresConfigDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpgconfig"
        ],
        "summary": "Get a sgpgconfig",
        "description": "Get a sgpgconfig.\n\n### RBAC permissions required\n\n* sgpgconfigs get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgpoolconfig": {
      "get": {
        "operationId": "list_4",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolingConfigDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpoolconfig"
        ],
        "summary": "List sgpoolconfigs",
        "description": "List sgpoolconfigs.\n\n### RBAC permissions required\n\n* sgpoolconfigs list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "put": {
        "operationId": "update_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolingConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpoolconfig"
        ],
        "summary": "Update a sgpoolconfig",
        "description": "Update a sgpoolconfig.\n\n### RBAC permissions required\n\n* sgpoolconfig patch\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "post": {
        "operationId": "create_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolingConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpoolconfig"
        ],
        "summary": "Create a sgpoolconfig",
        "description": "Create a sgpoolconfig.\n\n### RBAC permissions required\n\n* sgpoolconfig create\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolingConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpoolconfig"
        ],
        "summary": "Delete a sgpoolconfig",
        "description": "Delete a sgpoolconfig.\n\n### RBAC permissions required\n\n* sgpoolconfig delete\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/sgpoolconfig/{namespace}/{name}": {
      "get": {
        "operationId": "get_4",
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace to retrieve the resource from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "description": "The name of the resource to retrieve",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolingConfigDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "sgpoolconfig"
        ],
        "summary": "Get a sgpoolconfig",
        "description": "Get a sgpoolconfig.\n\n### RBAC permissions required\n\n* sgpoolconfig get\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    },
    "/stackgres/storageclass": {
      "get": {
        "operationId": "get_7",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "misc"
        ],
        "summary": "List storageclasss",
        "description": "List storageclasss.\n\n### RBAC permissions required\n\n* storageclasss list\n",
        "security": [
          {
            "JWT": [
              
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BackupConfigDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Backup Configuration. StackGres supports [Continuous Archiving](https://www.postgresql.org/docs/current/continuous-archiving.html)-based backups which are performed automatically, helping achieve near-zero data loss in case of recovery from a backup. An SGBackupConfig contains the necessary configuration to perform these automatic backups and may be referenced by zero or more SGClusters, and if so it would be referenced by its name. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all backup configurations in the same namespace.\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "baseBackups": {
                "type": "object",
                "description": "Back backups configuration.\n",
                "properties": {
                  "cronSchedule": {
                    "type": "string",
                    "description": "Continuous Archiving backups are composed of periodic *base backups* and all the WAL segments produced in between those base backups. This parameter specifies at what time and with what frequency to start performing a new base backup.\n\nUse cron syntax (`m h dom mon dow`) for this parameter, i.e., 5 values separated by spaces:\n*  `m`: minute, 0 to 59.\n*  `h`: hour, 0 to 23.\n*  `dom`: day of month, 1 to 31 (recommended not to set it higher than 28).\n*  `mon`: month, 1 to 12.\n*  `dow`: day of week, 0 to 7 (0 and 7 both represent Sunday).\n\nAlso ranges of values (`start-end`), the symbol `*` (meaning `first-last`) or even `*/N`, where `N` is a number, meaning \"\"every `N`, may be used. All times are UTC. It is recommended to avoid 00:00 as base backup time, to avoid overlapping with any other external operations happening at this time.\n\nIf not set, full backups are performed each day at 05:00 UTC.\n"
                  },
                  "retention": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "When an automatic retention policy is defined to delete old base backups, this parameter specifies the number of base backups to keep, in a sliding window.\n\nConsequently, the time range covered by backups is `periodicity*retention`, where `periodicity` is the separation between backups as specified by the `cronSchedule` property.\n\nDefault is 5.\n"
                  },
                  "compression": {
                    "type": "string",
                    "description": "Specifies the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.\n",
                    "enum": [
                      "lz4",
                      "lzma",
                      "brotli"
                    ]
                  },
                  "performance": {
                    "type": "object",
                    "properties": {
                      "maxNetworkBandwitdh": {
                        "type": "integer",
                        "description": "Maximum storage upload bandwidth used when storing a backup. In bytes (per second).\n"
                      },
                      "maxDiskBandwitdh": {
                        "type": "integer",
                        "description": "Maximum disk read I/O when performing a backup. In bytes (per second).\n"
                      },
                      "uploadDiskConcurrency": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use. By default, it's set to 1 (use one stream).\n"
                      }
                    }
                  }
                }
              },
              "storage": {
                "type": "object",
                "description": "Backup storage configuration.\n",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "s3",
                      "s3Compatible",
                      "gcs",
                      "azureBlob"
                    ],
                    "description": "Determine the type of object storage used for storing the base backups and WAL segments.\nPossible values:\n*  `s3`: Amazon Web Services S3 (Simple Storage Service).\n*  `s3Compatible`: non-AWS services that implement a compatibility API with AWS S3.\n*  `gcs`: Google Cloud Storage.\n*  `azureBlob`: Microsoft Azure Blob Storage.\n"
                  },
                  "s3": {
                    "type": "object",
                    "description": "Amazon Web Services S3 configuration.\n",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "pattern": "^((s3|https?)://)?[^/]+(/[^/]*)*$",
                        "description": "AWS S3 bucket name.\n"
                      },
                      "path": {
                        "type": "string",
                        "pattern": "^(/[^/]*)*$",
                        "description": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                      },
                      "region": {
                        "type": "string",
                        "description": "The AWS S3 region. The Region may be detected using s3:GetBucketLocation, but if you wish to avoid giving permissions to this API call or forbid it from the applicable IAM policy, you must then specify this property.\n"
                      },
                      "storageClass": {
                        "type": "string",
                        "description": "The [Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) to use for the backup object storage. By default, the `STANDARD` storage class is used. Other supported values include `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n"
                      },
                      "awsCredentials": {
                        "type": "object",
                        "description": "The credentials to access AWS S3 for writing and reading.\n",
                        "properties": {
                          "secretKeySelectors": {
                            "type": "object",
                            "description": "Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core)(s) to reference the Secrets that contain the information about the `awsCredentials`. Note that you may use the same or different Secrets for the `accessKeyId` and the `secretAccessKey`. In the former case, the `keys` that identify each must be, obviously, different.\n",
                            "properties": {
                              "accessKeyId": {
                                "type": "object",
                                "description": "AWS [access key ID](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys). For example, `AKIAIOSFODNN7EXAMPLE`.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              },
                              "secretAccessKey": {
                                "type": "object",
                                "description": "AWS [secret access key](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys). For example, `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "accessKeyId",
                              "secretAccessKey"
                            ]
                          }
                        },
                        "required": [
                          "secretKeySelectors"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "awsCredentials"
                    ]
                  },
                  "s3Compatible": {
                    "type": "object",
                    "description": "AWS S3-Compatible API configuration",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "pattern": "^((s3|https?)://)?[^/]+(/[^/]*)*$",
                        "description": "Bucket name.\n"
                      },
                      "path": {
                        "type": "string",
                        "pattern": "^(/[^/]*)*$",
                        "description": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                      },
                      "enablePathStyleAddressing": {
                        "type": "boolean",
                        "description": "Enable path-style addressing (i.e. `http://s3.amazonaws.com/BUCKET/KEY`) when connecting to an S3-compatible service that lacks support for sub-domain style bucket URLs (i.e. `http://BUCKET.s3.amazonaws.com/KEY`).\n\nDefaults to false.\n"
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "Overrides the default url to connect to an S3-compatible service.\nFor example: `http://s3-like-service:9000`.\n"
                      },
                      "region": {
                        "type": "string",
                        "description": "The AWS S3 region. The Region may be detected using s3:GetBucketLocation, but if you wish to avoid giving permissions to this API call or forbid it from the applicable IAM policy, you must then specify this property.\n"
                      },
                      "storageClass": {
                        "type": "string",
                        "description": "The [Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) to use for the backup object storage. By default, the `STANDARD` storage class is used. Other supported values include `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n"
                      },
                      "awsCredentials": {
                        "type": "object",
                        "description": "The credentials to access AWS S3 for writing and reading.\n",
                        "properties": {
                          "secretKeySelectors": {
                            "type": "object",
                            "description": "Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core)(s) to reference the Secret(s) that contain the information about the `awsCredentials`. Note that you may use the same or different Secrets for the `accessKeyId` and the `secretAccessKey`. In the former case, the `keys` that identify each must be, obviously, different.\n",
                            "properties": {
                              "accessKeyId": {
                                "type": "object",
                                "description": "AWS [access key ID](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys). For example, `AKIAIOSFODNN7EXAMPLE`.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              },
                              "secretAccessKey": {
                                "type": "object",
                                "description": "AWS [secret access key](https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys). For example, `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "accessKeyId",
                              "secretAccessKey"
                            ]
                          }
                        },
                        "required": [
                          "secretKeySelectors"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "awsCredentials"
                    ]
                  },
                  "gcs": {
                    "type": "object",
                    "description": "Google Cloud Storage configuration.\n",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "pattern": "^(gs://)?[^/]+(/[^/]*)*$",
                        "description": "GCS bucket name.\n"
                      },
                      "path": {
                        "type": "string",
                        "pattern": "^(/[^/]*)*$",
                        "description": "Optional path within the GCS bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                      },
                      "gcpCredentials": {
                        "type": "object",
                        "description": "The credentials to access GCS for writing and reading.\n",
                        "properties": {
                          "fetchCredentialsFromMetadataService": {
                            "type": "boolean",
                            "description": "If true, the credentials will be fetched from the GCE/GKE metadata service and the field `secretKeySelectors` have to be set to null or omitted.\n\nThis is useful when running StackGres inside a GKE cluster using [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity).\n"
                          },
                          "secretKeySelectors": {
                            "type": "object",
                            "description": "A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) to reference the Secrets that contain the information about the Service Account to access GCS.\n",
                            "properties": {
                              "serviceAccountJSON": {
                                "type": "object",
                                "description": "A service account key from GCP. In JSON format, as downloaded from the GCP Console.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "serviceAccountJSON"
                            ]
                          }
                        },
                        "required": [
                          
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "gcpCredentials"
                    ]
                  },
                  "azureBlob": {
                    "type": "object",
                    "description": "Azure Blob Storage configuration.\n",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "pattern": "^(azure://)?[^/]+(/[^/]*)*$",
                        "description": "Azure Blob Storage bucket name.\n"
                      },
                      "path": {
                        "type": "string",
                        "pattern": "^(/[^/]*)*$",
                        "description": "Optional path within the Azure Blob bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                      },
                      "azureCredentials": {
                        "type": "object",
                        "description": "The credentials to access Azure Blob Storage for writing and reading.\n",
                        "properties": {
                          "secretKeySelectors": {
                            "type": "object",
                            "description": "Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core)(s) to reference the Secret(s) that contain the information about the `azureCredentials`. . Note that you may use the same or different Secrets for the `storageAccount` and the `accessKey`. In the former case, the `keys` that identify each must be, obviously, different.\n",
                            "properties": {
                              "storageAccount": {
                                "type": "object",
                                "description": "The [Storage Account](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview?toc=/azure/storage/blobs/toc.json) that contains the Blob bucket to be used.\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              },
                              "accessKey": {
                                "type": "object",
                                "description": "The [storage account access key](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs=azure-portal).\n",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                  }
                                },
                                "required": [
                                  "key",
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "storageAccount",
                              "accessKey"
                            ]
                          }
                        }
                      }
                    },
                    "required": [
                      "bucket",
                      "azureCredentials"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            },
            "required": [
              "storage"
            ]
          },
          "status": {
            "properties": {
              "clusters": {
                "description": "List of [SGClusters](https://stackgres.io/doc/latest/04-postgres-cluster-management/01-postgres-clusters/) that are using this configuration.\n"
              }
            }
          }
        }
      },
      "BackupDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the backup. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all StackGres backups in the same namespace.\"\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "Unique in time and space value for the object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "sgCluster": {
                "type": "string",
                "description": "The name of the `SGCluster` from which this backup is/will be taken.\n"
              },
              "managedLifecycle": {
                "type": "boolean",
                "description": "Indicate if this backup is permanent and should not be removed by the automated retention policy.\n"
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "internalName": {
                "type": "string",
                "description": "The name of the backup.\n"
              },
              "process": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "Running",
                      "Completed",
                      "Failed"
                    ],
                    "description": "Status of the backup.\n"
                  },
                  "failure": {
                    "type": "string",
                    "description": "If the status is `failed` this field will contain a message indicating the failure reason.\n"
                  },
                  "jobPod": {
                    "type": "string",
                    "description": "Name of the pod assigned to the backup. StackGres utilizes internally a locking mechanism based on the pod name of the job that creates the backup.\n"
                  },
                  "managedLifecycle": {
                    "type": "boolean",
                    "description": "Status (may be transient) until converging to `spec.managedLifecycle`.\n"
                  },
                  "timing": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "description": "Start time of backup.\n"
                      },
                      "end": {
                        "type": "string",
                        "description": "End time of backup.\n"
                      },
                      "stored": {
                        "type": "string",
                        "description": "Time at which the backup is safely stored in the object storage.\n"
                      }
                    }
                  }
                }
              },
              "backupInformation": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string",
                    "description": "Hostname of the instance where the backup is taken from.\n"
                  },
                  "sourcePod": {
                    "type": "string",
                    "description": "Pod where the backup is taken from.\n"
                  },
                  "systemIdentifier": {
                    "type": "string",
                    "description": "Postgres *system identifier* of the cluster this backup is taken from.\n"
                  },
                  "postgresVersion": {
                    "type": "string",
                    "description": "Postgres version of the server where the backup is taken from.\n"
                  },
                  "pgData": {
                    "type": "string",
                    "description": "Data directory where the backup is taken from.\n"
                  },
                  "size": {
                    "type": "object",
                    "properties": {
                      "uncompressed": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Size (in bytes) of the uncompressed backup.\n"
                      },
                      "compressed": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Size (in bytes) of the compressed backup.\n"
                      }
                    }
                  },
                  "lsn": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "description": "LSN of when the backup started.\n"
                      },
                      "end": {
                        "type": "string",
                        "description": "LSN of when the backup finished.\n"
                      }
                    }
                  },
                  "startWalFile": {
                    "type": "string",
                    "description": "WAL segment file name when the backup was started.\n"
                  },
                  "timeline": {
                    "type": "string",
                    "description": "Backup timeline.\n"
                  },
                  "controlData": {
                    "type": "object",
                    "description": "An object containing data from the output of pg_controldata on the backup.\n",
                    "properties": {
                      "pg_control version number": {
                        "type": "string"
                      },
                      "Catalog version number": {
                        "type": "string"
                      },
                      "Database system identifier": {
                        "type": "string"
                      },
                      "Database cluster state": {
                        "type": "string"
                      },
                      "pg_control last modified": {
                        "type": "string"
                      },
                      "Latest checkpoint location": {
                        "type": "string"
                      },
                      "Latest checkpoint's REDO location": {
                        "type": "string"
                      },
                      "Latest checkpoint's REDO WAL file": {
                        "type": "string"
                      },
                      "Latest checkpoint's TimeLineID": {
                        "type": "string"
                      },
                      "Latest checkpoint's PrevTimeLineID": {
                        "type": "string"
                      },
                      "Latest checkpoint's full_page_writes": {
                        "type": "string"
                      },
                      "Latest checkpoint's NextXID": {
                        "type": "string"
                      },
                      "Latest checkpoint's NextOID": {
                        "type": "string"
                      },
                      "Latest checkpoint's NextMultiXactId": {
                        "type": "string"
                      },
                      "Latest checkpoint's NextMultiOffset": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestXID": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestXID's DB": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestActiveXID": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestMultiXid": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestMulti's DB": {
                        "type": "string"
                      },
                      "Latest checkpoint's oldestCommitTsXid": {
                        "type": "string"
                      },
                      "Latest checkpoint's newestCommitTsXid": {
                        "type": "string"
                      },
                      "Time of latest checkpoint": {
                        "type": "string"
                      },
                      "Fake LSN counter for unlogged rels": {
                        "type": "string"
                      },
                      "Minimum recovery ending location": {
                        "type": "string"
                      },
                      "Min recovery ending loc's timeline": {
                        "type": "string"
                      },
                      "Backup start location": {
                        "type": "string"
                      },
                      "Backup end location": {
                        "type": "string"
                      },
                      "End-of-backup record required": {
                        "type": "string"
                      },
                      "wal_level setting": {
                        "type": "string"
                      },
                      "wal_log_hints setting": {
                        "type": "string"
                      },
                      "max_connections setting": {
                        "type": "string"
                      },
                      "max_worker_processes setting": {
                        "type": "string"
                      },
                      "max_wal_senders setting": {
                        "type": "string"
                      },
                      "max_prepared_xacts setting": {
                        "type": "string"
                      },
                      "max_locks_per_xact setting": {
                        "type": "string"
                      },
                      "track_commit_timestamp setting": {
                        "type": "string"
                      },
                      "Maximum data alignment": {
                        "type": "string"
                      },
                      "Database block size": {
                        "type": "string"
                      },
                      "Blocks per segment of large relation": {
                        "type": "string"
                      },
                      "WAL block size": {
                        "type": "string"
                      },
                      "Bytes per WAL segment": {
                        "type": "string"
                      },
                      "Maximum length of identifiers": {
                        "type": "string"
                      },
                      "Maximum columns in an index": {
                        "type": "string"
                      },
                      "Maximum size of a TOAST chunk": {
                        "type": "string"
                      },
                      "Size of a large-object chunk": {
                        "type": "string"
                      },
                      "Date/time type storage": {
                        "type": "string"
                      },
                      "Float4 argument passing": {
                        "type": "string"
                      },
                      "Float8 argument passing": {
                        "type": "string"
                      },
                      "Data page checksum version": {
                        "type": "string"
                      },
                      "Mock authentication nonce": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "sgBackupConfig": {
                "type": "object",
                "description": "The name of the backup configuration used to perform this backup.",
                "properties": {
                  "baseBackups": {
                    "type": "object",
                    "description": "Back backups configuration.\n",
                    "properties": {
                      "cronSchedule": {
                        "type": "string",
                        "description": "Continuous Archiving backups are composed of periodic *base backups* and all the WAL segments produced in between those base backups. This parameter specifies at what time and with what frequency to start performing a new base backup.\n\nUse cron syntax (`m h dom mon dow`) for this parameter, i.e., 5 values separated by spaces:\n*  `m`: minute, 0 to 59\n*  `h`: hour, 0 to 23\n*  `dom`: day of month, 1 to 31 (recommended not to set it higher than 28)\n*  `mon`: month, 1 to 12\n*  `dow`: day of week, 0 to 7 (0 and 7 both represent Sunday)\n\nAlso ranges of values (`start-end`), the symbol `*` (meaning `first-last`) or even `*/N`, where `N` is a number, meaning every `N`, may be used. All times are UTC. It is recommended to avoid 00:00 as base backup time, to avoid overlapping with any other external operations happening at this time.\n\nIf not provided, full backups will be performed each day at 05:00 UTC\n"
                      },
                      "retention": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Based on this parameter, an automatic retention policy is defined to delete old base backups.\nThis parameter specifies the number of base backups to keep, in a sliding window.\nConsequently, the time range covered by backups is `periodicity*retention`, where `periodicity` is the separation between backups as specified by the `cronSchedule` property.\n\nDefault is 5.\n"
                      },
                      "compression": {
                        "type": "string",
                        "description": "Select the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.\n",
                        "enum": [
                          "lz4",
                          "lzma",
                          "brotli"
                        ]
                      },
                      "performance": {
                        "type": "object",
                        "properties": {
                          "maxNetworkBandwitdh": {
                            "type": "integer",
                            "description": "Maximum storage upload bandwidth to be used when storing the backup. In bytes (per second).\n"
                          },
                          "maxDiskBandwitdh": {
                            "type": "integer",
                            "description": "Maximum disk read I/O when performing a backup. In bytes (per second).\n"
                          },
                          "uploadDiskConcurrency": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use. By default, it will use 1 (one stream).\n"
                          }
                        }
                      }
                    }
                  },
                  "compression": {
                    "type": "string",
                    "description": "Select the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.\n",
                    "enum": [
                      "lz4",
                      "lzma",
                      "brotli"
                    ]
                  },
                  "storage": {
                    "type": "object",
                    "description": "Backup storage configuration.\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "s3",
                          "s3Compatible",
                          "gcs",
                          "azureBlob"
                        ],
                        "description": "Specifies the type of object storage used for storing the base backups and WAL segments.\nPossible values:\n*  `s3`: Amazon Web Services S3 (Simple Storage Service).\n*  `s3Compatible`: non-AWS services that implement a compatibility API with AWS S3.\n*  `gcs`: Google Cloud Storage.\n*  `azureBlob`: Microsoft Azure Blob Storage.\n"
                      },
                      "s3": {
                        "type": "object",
                        "description": "Amazon Web Services S3 configuration.\n",
                        "properties": {
                          "bucket": {
                            "type": "string",
                            "pattern": "^[^/]+(/[^/]*)*$",
                            "description": "AWS S3 bucket name.\n"
                          },
                          "path": {
                            "type": "string",
                            "pattern": "^(/[^/]*)*$",
                            "description": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per\nStackGres cluster, using the `SGCluster.metadata.name`.\n"
                          },
                          "region": {
                            "type": "string",
                            "description": "AWS S3 region. The Region may be detected using s3:GetBucketLocation, but to avoid giving permissions to this API call or forbid it from the applicable IAM policy, this property must be explicitely specified.\n"
                          },
                          "storageClass": {
                            "type": "string",
                            "description": "[Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) used for the backup object storage. By default, the `STANDARD` storage class is used. Other supported values include `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n"
                          },
                          "awsCredentials": {
                            "type": "object",
                            "description": "Credentials to access AWS S3 for writing and reading.\n",
                            "properties": {
                              "secretKeySelectors": {
                                "type": "object",
                                "description": "Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core)s to reference the Secrets that contain the information about the `awsCredentials`.\n",
                                "properties": {
                                  "accessKeyId": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the AWS Access Key ID secret.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  },
                                  "secretAccessKey": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the AWS Secret Access Key secret.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "accessKeyId",
                                  "secretAccessKey"
                                ]
                              }
                            },
                            "required": [
                              "secretKeySelectors"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "awsCredentials"
                        ]
                      },
                      "s3Compatible": {
                        "type": "object",
                        "description": "AWS S3-Compatible API configuration",
                        "properties": {
                          "bucket": {
                            "type": "string",
                            "pattern": "^[^/]+(/[^/]*)*$",
                            "description": "Bucket name.\n"
                          },
                          "path": {
                            "type": "string",
                            "pattern": "^(/[^/]*)*$",
                            "description": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                          },
                          "enablePathStyleAddressing": {
                            "type": "boolean",
                            "description": "Enable path-style addressing (i.e. `http://s3.amazonaws.com/BUCKET/KEY`) when connecting to an S3-compatible service that lacks support for sub-domain style bucket URLs (i.e. `http://BUCKET.s3.amazonaws.com/KEY`). Defaults to false.\n"
                          },
                          "endpoint": {
                            "type": "string",
                            "description": "Overrides the default url to connect to an S3-compatible service.\nFor example: `http://s3-like-service:9000`.\n"
                          },
                          "region": {
                            "type": "string",
                            "description": "AWS S3 region. The Region may be detected using s3:GetBucketLocation, but to avoid giving permissions to this API call or forbid it from the applicable IAM policy, this property must be explicitely specified.\n"
                          },
                          "storageClass": {
                            "type": "string",
                            "description": "[Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) used for the backup object storage. By default, the `STANDARD` storage class is used. Other supported values include `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n"
                          },
                          "awsCredentials": {
                            "type": "object",
                            "description": "Credentials to access AWS S3 for writing and reading.\n",
                            "properties": {
                              "secretKeySelectors": {
                                "type": "object",
                                "description": "A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) to reference the Secrets that contain the information about the `awsCredentials`.\n",
                                "properties": {
                                  "accessKeyId": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the AWS Access Key ID secret.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  },
                                  "secretAccessKey": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the AWS Secret Access Key secret.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "accessKeyId",
                                  "secretAccessKey"
                                ]
                              }
                            },
                            "required": [
                              "secretKeySelectors"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "awsCredentials"
                        ]
                      },
                      "gcs": {
                        "type": "object",
                        "description": "Google Cloud Storage configuration.\n",
                        "properties": {
                          "bucket": {
                            "type": "string",
                            "pattern": "^[^/]+(/[^/]*)*$",
                            "description": "GCS bucket name.\n"
                          },
                          "path": {
                            "type": "string",
                            "pattern": "^(/[^/]*)*$",
                            "description": "Optional path within the GCS bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                          },
                          "gcpCredentials": {
                            "type": "object",
                            "description": "Credentials to access GCS for writing and reading.\n",
                            "properties": {
                              "fetchCredentialsFromMetadataService": {
                                "type": "boolean",
                                "description": "If true, the credentials will be fetched from the GCE/GKE metadata service and the credentials from `secretKeySelectors` field will not be used.\n\nThis is useful when running StackGres inside a GKE cluster using [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity).\n"
                              },
                              "secretKeySelectors": {
                                "type": "object",
                                "description": "A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) to reference the Secrets that contain the information about the Service Account to access GCS.\n",
                                "properties": {
                                  "serviceAccountJSON": {
                                    "type": "object",
                                    "description": "A service account key from GCP. In JSON format, as downloaded from the GCP Console.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "serviceAccountJSON"
                                ]
                              }
                            },
                            "required": [
                              
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "gcpCredentials"
                        ]
                      },
                      "azureBlob": {
                        "type": "object",
                        "description": "Azure Blob Storage configuration.\n",
                        "properties": {
                          "bucket": {
                            "type": "string",
                            "pattern": "^[^/]+(/[^/]*)*$",
                            "description": "Azure Blob Storage bucket name.\n"
                          },
                          "path": {
                            "type": "string",
                            "pattern": "^(/[^/]*)*$",
                            "description": "Optional path within the Azure Blobk bucket. Note that StackGres generates in any case a folder per StackGres cluster, using the `SGCluster.metadata.name`.\n"
                          },
                          "azureCredentials": {
                            "type": "object",
                            "description": "Credentials to access Azure Blob Storage for writing and reading.\n",
                            "properties": {
                              "secretKeySelectors": {
                                "type": "object",
                                "description": "Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core)s to reference the Secrets that contain the information about the `azureCredentials`.\n",
                                "properties": {
                                  "storageAccount": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the name of the storage account.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  },
                                  "accessKey": {
                                    "type": "object",
                                    "description": "[SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) containing the primary or secondary access key for the storage account.\n",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "The key of the secret to select from. Must be a valid secret key.\n"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the referent.  [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "storageAccount",
                                  "accessKey"
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "bucket",
                          "azureCredentials"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "required": [
                  "storage"
                ]
              }
            }
          }
        },
        "description": "A manual or automatically generated backup of a SGCluster.\n"
      },
      "ClusterDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "grafanaEmbedded": {
            "type": "boolean",
            "description": "Indicates if grafana is embedded and available for this cluster.\n"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the StackGres cluster. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all StackGres clusters in the same namespace. The full cluster name includes the namespace in which the cluster is created.\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "pods": {
            "type": "array",
            "items": {
              "description": "Pod that holds an instance of a cluster\n",
              "properties": {
                "namespace": {
                  "description": "Namespace of the pod.\n"
                },
                "name": {
                  "description": "Name of the pod.\n"
                },
                "role": {
                  "description": "Role of the instance hold by the pod.\n"
                },
                "ip": {
                  "description": "IP of the pod.\n"
                },
                "status": {
                  "description": "Status of the pod:\n\n* **Available**: The instance hold by the pod is available.\n* **Unavailable**: The instance hold by the pod is unavailable.\n* **Pending**: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while.\n* **Failed**: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system.\n* **Unknown**: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n"
                },
                "containers": {
                  "type": "integer",
                  "description": "Number of total containers in the pod.\n"
                },
                "containersReady": {
                  "type": "integer",
                  "description": "Number of ready containers contained in the pod.\n"
                },
                "cpuRequested": {
                  "description": "CPU requested for the pod.\n"
                },
                "cpuFound": {
                  "description": "CPU actually reserved for the pod.\n"
                },
                "cpuPsiAvg10": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 10 seconds.\n"
                },
                "cpuPsiAvg60": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 60 seconds.\n"
                },
                "cpuPsiAvg300": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 300 seconds.\n"
                },
                "cpuPsiTotal": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU total share of time.\n"
                },
                "cpuPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 10 seconds.\n"
                },
                "cpuPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 60 seconds.\n"
                },
                "cpuPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 300 seconds.\n"
                },
                "cpuPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU total share of time.\n"
                },
                "memoryRequested": {
                  "description": "Memory requested for this pod.\n"
                },
                "memoryFound": {
                  "description": "Memory actually reserved for this pod.\n"
                },
                "memoryUsed": {
                  "description": "The memory used by this pod.\n"
                },
                "memoryPsiAvg10": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiAvg60": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiAvg300": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiTotal": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiFullAvg10": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiFullAvg60": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiFullAvg300": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiFullTotal": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiFullCgroupAvg10": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiFullCgroupAvg60": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiFullCgroupAvg300": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiFullCgroupTotal": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "diskRequested": {
                  "description": "Disk requested for this pod.\n"
                },
                "diskFound": {
                  "description": "Disk actually reserved for this pod.\n"
                },
                "diskUsed": {
                  "description": "Disk used by this pod.\n"
                },
                "diskPsiAvg10": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiAvg60": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiAvg300": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiTotal": {
                  "description": "Global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiFullAvg10": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiFullAvg60": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiFullAvg300": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiFullTotal": {
                  "description": "Global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiFullCgroupAvg10": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiFullCgroupAvg60": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiFullCgroupAvg300": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiFullCgroupTotal": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "averageLoad1m": {
                  "description": "Average load on a window of 1 minute.\n"
                },
                "averageLoad5m": {
                  "description": "Average load on a window of 5 minute.\n"
                },
                "averageLoad10m": {
                  "description": "Average load on a window of 10 minute.\n"
                }
              }
            }
          },
          "podsReady": {
            "type": "integer",
            "format": "int32",
            "description": "Number of pods of the cluster that are ready.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "postgresVersion": {
                "type": "string",
                "description": "Postgres version used on the cluster. It is either of:\n*  The string 'latest', which automatically sets the latest major.minor Postgres version.\n*  A major version, like '12' or '11', which sets that major version and the latest minor version.\n*  A specific major.minor version, like '12.2'.\n"
              },
              "instances": {
                "type": "integer",
                "minimum": 1,
                "maximum": 16,
                "description": "Number of StackGres instances for the cluster. Each instance contains one Postgres server. Out of all of the Postgres servers, one is elected as the master, the rest remain as read-only replicas.\n"
              },
              "sgInstanceProfile": {
                "type": "string",
                "description": "Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/). A SGInstanceProfile defines CPU and memory limits. Must exist before creating a cluster. When no profile is set, a default (currently: 1 core, 2 GiB RAM) one is used.\n"
              },
              "metadata": {
                "type": "object",
                "description": "Metadata information from cluster created resources.",
                "properties": {
                  "annotations": {
                    "type": "object",
                    "description": "Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to resources created and managed by StackGres.",
                    "properties": {
                      "allResources": {
                        "type": "object",
                        "description": "Annotations to attach to any resource created or managed by StackGres.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "pods": {
                        "type": "object",
                        "description": "Annotations to attach to pods created or managed by StackGres.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "services": {
                        "type": "object",
                        "description": "Annotations to attach to services created or managed by StackGres.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "postgresServices": {
                "type": "object",
                "description": "Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/) created or managed by StackGres.",
                "properties": {
                  "primary": {
                    "type": "object",
                    "description": "Configuration for the `-primary` service. It provides a stable connection (regardless of primary failures or switchovers) to the read-write Postgres server of the cluster.",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Specify if the `-primary` service should be created or not."
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ClusterIP",
                          "LoadBalancer",
                          "NodePort"
                        ],
                        "description": "Specifies the type of Kubernetes service."
                      },
                      "annotations": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-primary` service."
                      }
                    }
                  },
                  "replicas": {
                    "type": "object",
                    "description": "Configuration for the `-replicas` service. It provides a stable connection (regardless of replica node failures) to any read-only Postgres server of the cluster. Read-only servers are load-balanced via this service.",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Specify if the `-replicas` service should be created or not."
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ClusterIP",
                          "LoadBalancer",
                          "NodePort"
                        ],
                        "description": "Specifies the type of Kubernetes service."
                      },
                      "annotations": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-replicas` service."
                      }
                    }
                  }
                }
              },
              "pods": {
                "type": "object",
                "description": "Cluster pod's configuration.",
                "properties": {
                  "persistentVolume": {
                    "type": "object",
                    "description": "Pod's persistent volume configuration.",
                    "properties": {
                      "size": {
                        "type": "string",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(Mi|Gi|Ti)$",
                        "description": "Size of the PersistentVolume set for each instance of the cluster. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).\n"
                      },
                      "storageClass": {
                        "type": "string",
                        "description": "Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.\n"
                      }
                    },
                    "required": [
                      "size"
                    ]
                  },
                  "disableConnectionPooling": {
                    "type": "boolean",
                    "description": "If set to `true`, avoids creating a connection pooling (using [PgBouncer](https://www.pgbouncer.org/)) sidecar."
                  },
                  "disableMetricsExporter": {
                    "type": "boolean",
                    "description": "If set to `true`, avoids creating the Prometheus exporter sidecar. Recommended when there's no intention to use Prometheus for monitoring."
                  },
                  "disablePostgresUtil": {
                    "type": "boolean",
                    "description": "If set to `true`, avoids creating the `postgres-util` sidecar. This sidecar contains usual Postgres administration utilities *that are not present in the main (`patroni`) container*, like `psql`. Only disable if you know what you are doing."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Pod custom metadata information.",
                    "properties": {
                      "labels": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Additional labels for StackGres Pods."
                      }
                    }
                  },
                  "scheduling": {
                    "type": "object",
                    "description": "Pod custom scheduling configuration.",
                    "properties": {
                      "nodeSelector": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Pod custom node selector."
                      },
                      "tolerations": {
                        "type": "array",
                        "description": "Pod custom node tolerations",
                        "items": {
                          "type": "object",
                          "description": "Pod custom node toleration",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "Key is the taint key that the toleration applies to. Empty means match all taint\n keys. If the key is empty, operator must be Exists; this combination means to\n match all values and all keys.\n"
                            },
                            "operator": {
                              "type": "string",
                              "description": "Operator represents a key's relationship to the value. Valid operators are Exists\n and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that\n a pod can tolerate all taints of a particular category.\n"
                            },
                            "value": {
                              "type": "string",
                              "description": "Value is the taint value the toleration matches to. If the operator is Exists, the\n value should be empty, otherwise just a regular string.\n"
                            },
                            "effect": {
                              "type": "string",
                              "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\n When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n"
                            },
                            "tolerationSeconds": {
                              "type": "integer",
                              "description": "TolerationSeconds represents the period of time the toleration (which must be of\n effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\n it is not set, which means tolerate the taint forever (do not evict). Zero and\n negative values will be treated as 0 (evict immediately) by the system.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "persistentVolume"
                ]
              },
              "configurations": {
                "type": "object",
                "description": "Cluster custom configurations.\n",
                "properties": {
                  "sgPostgresConfig": {
                    "type": "string",
                    "description": "Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig) used for the cluster. It must exist. When not set, a default Postgres config, for the major version selected, is used.\n"
                  },
                  "sgPoolingConfig": {
                    "type": "string",
                    "description": "Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolconfig) used for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.\n\nIf not set, a default configuration will be used. Disabling connection pooling altogether is possible if the disableConnectionPooling property of the pods object is set to true.\n"
                  },
                  "sgBackupConfig": {
                    "type": "string",
                    "description": "Name of the [SGBackupConfig](https://stackgres.io/doc/latest/reference/crd/sgbackupconfig) to use for the cluster. It defines the backups policy, storage and retention, among others, applied to the cluster. When not set, a default backup config is used.\n"
                  }
                }
              },
              "initialData": {
                "type": "object",
                "description": "Cluster initialization data options. Cluster may be initialized empty, or from a backup restoration. Specifying scripts to run on the database after cluster creation is also possible.",
                "properties": {
                  "restore": {
                    "type": "object",
                    "properties": {
                      "fromBackup": {
                        "type": "string",
                        "description": "When set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. The selected backup must be in the same namespace.\n"
                      },
                      "downloadDiskConcurrency": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "The backup fetch process may fetch several streams in parallel. Parallel fetching is enabled when set to a value larger than one.\n"
                      }
                    }
                  },
                  "scripts": {
                    "type": "array",
                    "description": "A list of SQL scripts executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.\n",
                    "items": {
                      "type": "object",
                      "description": "Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).\n\nFields `script` and `scriptFrom` are mutually exclusive and only one of them is required.\n",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the script. Must be unique across this SGCluster.\n"
                        },
                        "database": {
                          "type": "string",
                          "description": "Database where the script is executed. Defaults to the `postgres` database, if not specified.\n"
                        },
                        "script": {
                          "type": "string",
                          "description": "Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.\n"
                        },
                        "scriptFrom": {
                          "type": "object",
                          "description": "Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.\n\nFields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.\n",
                          "properties": {
                            "secretKeyRef": {
                              "type": "object",
                              "description": "A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.\n",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names)."
                                },
                                "key": {
                                  "type": "string",
                                  "description": "The key of the secret to select from. Must be a valid secret key."
                                }
                              }
                            },
                            "configMapKeyRef": {
                              "type": "object",
                              "description": "A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.\n",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the ConfigMap that contains the SQL script to execute.\n"
                                },
                                "key": {
                                  "type": "string",
                                  "description": "The key name within the ConfigMap that contains the SQL script to execute.\n"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "scripts": {
                  "items": {
                    "properties": {
                      "scriptFrom": {
                        "properties": {
                          "secretScript": {
                            "description": "A script that will be stored in a [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) as specified by `secretKeyRef` field or, if not specified, with same name as the `name` field or, if not specified, with the name of the cluster `.metadata.name` with the suffix `-init-data-<index>`. The secret will be created or patched with specified value.\n"
                          },
                          "configMapScript": {
                            "description": "A script that will be stored in a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) as specified by `configMapKeyRef` field or, if not specified, with same name as the `name` field or, if not specified, with the name of the cluster `.metadata.name` with the suffix `-init-data-<index>`. The config map will be created or patched with specified value.\n"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "prometheusAutobind": {
                "type": "boolean",
                "description": "If enabled, a ServiceMonitor is created for each Prometheus instance found in order to collect metrics.\n"
              },
              "nonProductionOptions": {
                "type": "object",
                "properties": {
                  "disableClusterPodAntiAffinity": {
                    "type": "boolean",
                    "description": "It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.\n\nThe same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given Kubernetes node. Set this property to true to allow more than one StackGres pod per node.\n"
                  }
                }
              },
              "distributedLogs": {
                "type": "object",
                "description": "StackGres features a functionality for all pods to send Postgres, Patroni and PgBouncer logs to a central (distributed) location, which is in turn another Postgres database. Logs can then be accessed via SQL interface or from the web UI. This section controls whether to enable this feature or not. If not enabled, logs are send to the pod's standard output.",
                "properties": {
                  "sgDistributedLogs": {
                    "type": "string",
                    "description": "Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.\n"
                  },
                  "retention": {
                    "type": "string",
                    "pattern": "^[0-9]+ (minutes?|hours?|days?|months?)",
                    "description": "Define a retention window with the syntax `<integer> (minutes|hours|days|months)` in which log entries are kept.\n Log entries will be removed when they get older more than the double of the specified retention window.\n\nWhen this field is changed the retention will be applied only to log entries that are newer than the end of\n the retention window previously specified. If no retention window was previously specified it is considered\n to be of 7 days. This means that if previous retention window is of `7 days` new retention configuration will\n apply after UTC timestamp calculated with: `SELECT date_trunc('days', now() at time zone 'UTC') - INTERVAL '7 days'`.\n"
                  }
                }
              },
              "postgresExtensions": {
                "type": "array",
                "description": "StackGres support deploy of extensions at runtime by simply adding an entry to this array. A deployed extension still\nrequires the creation in a database using the [`CREATE EXTENSION`](https://www.postgresql.org/docs/current/sql-createextension.html)\nstatement. After an extension is deployed correctly it will be present until removed and the cluster restarted.\n\nA cluster restart is required for:\n* Extensions that requires to add an entry to [`shared_preload_libraries`](https://postgresqlco.nf/en/doc/param/shared_preload_libraries/) configuration parameter.\n* Upgrading extensions that overwrite any file that is not the extension''s control file or extension''s script file.\n* Removing extensions. Until the cluster is not restarted a removed extension will still be available.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extension to deploy."
                    },
                    "publisher": {
                      "type": "string",
                      "description": "The id of the publisher of the extension to deploy. If not specified `com.ongres` will be used by default."
                    },
                    "version": {
                      "type": "string",
                      "description": "The version of the extension to deploy. If not specified version of `stable` channel will be used by default."
                    },
                    "repository": {
                      "type": "string",
                      "description": "The repository base URL from where to obtain the extension to deploy. If not specified https://stackgres.io/downloads/postgres/extensions will be used by default (or the value specified during operator deployment)."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            },
            "required": [
              "instances",
              "postgresVersion",
              "pods"
            ]
          },
          "status": {
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of deployment condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "podStatuses": {
                "type": "array",
                "description": "The list of pod statuses.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the pod."
                    },
                    "pendingRestart": {
                      "type": "boolean",
                      "description": "Indicate if the pod requires restart"
                    },
                    "installedPostgresExtensions": {
                      "type": "array",
                      "description": "The list of extensions currently installed.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the installed extension."
                          },
                          "publisher": {
                            "type": "string",
                            "description": "The id of the publisher of the installed extension."
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the installed extension."
                          },
                          "repository": {
                            "type": "string",
                            "description": "The repository base URL from where the extension was installed."
                          },
                          "postgresVersion": {
                            "type": "string",
                            "description": "The postgres major version of the installed extension."
                          },
                          "build": {
                            "type": "string",
                            "description": "The build version of the installed extension."
                          }
                        },
                        "required": [
                          "name",
                          "publisher",
                          "version",
                          "repository",
                          "postgresVersion"
                        ]
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "dbOps": {
                "type": "object",
                "description": "Used by some [SGDbOps](https://stackgres.io/doc/latest/reference/crd/sgdbops) to indicate the operation configuration and status to the operator.\n",
                "properties": {
                  "majorVersionUpgrade": {
                    "type": "object",
                    "description": "The major version upgrade configuration and status\n",
                    "properties": {
                      "initialInstances": {
                        "type": "array",
                        "description": "The instances that this operation is targetting\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "primaryInstance": {
                        "type": "string",
                        "description": "The primary instance that this operation is targetting\n"
                      },
                      "sourcePostgresVersion": {
                        "type": "string",
                        "description": "The source PostgreSQL version\n"
                      },
                      "targetPostgresVersion": {
                        "type": "string",
                        "description": "The target PostgreSQL version\n"
                      },
                      "locale": {
                        "type": "string",
                        "description": "The PostgreSQL locale\n"
                      },
                      "encoding": {
                        "type": "string",
                        "description": "The PostgreSQL encoding\n"
                      },
                      "dataChecksum": {
                        "type": "boolean",
                        "description": "Indicate if PostgreSQL data checksum is enabled\n"
                      },
                      "link": {
                        "type": "boolean",
                        "description": "Use `--link` option when running `pg_upgrade`\n"
                      },
                      "clone": {
                        "type": "boolean",
                        "description": "Use `--clone` option when running `pg_upgrade`\n"
                      },
                      "check": {
                        "type": "boolean",
                        "description": "Run `pg_upgrade` with check option before performing the real upgrade\n"
                      }
                    }
                  },
                  "restart": {
                    "type": "object",
                    "description": "The minor version upgrade configuration and status\n",
                    "properties": {
                      "initialInstances": {
                        "type": "array",
                        "description": "The instances that this operation is targetting\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "primaryInstance": {
                        "type": "string",
                        "description": "The primary instance that this operation is targetting\n"
                      }
                    }
                  },
                  "minorVersionUpgrade": {
                    "type": "object",
                    "description": "The minor version upgrade configuration and status\n",
                    "properties": {
                      "initialInstances": {
                        "type": "array",
                        "description": "The instances that this operation is targetting\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "primaryInstance": {
                        "type": "string",
                        "description": "The primary instance that this operation is targetting\n"
                      }
                    }
                  },
                  "securityUpgrade": {
                    "type": "object",
                    "description": "The minor version upgrade configuration and status\n",
                    "properties": {
                      "initialInstances": {
                        "type": "array",
                        "description": "The instances that this operation is targetting\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "primaryInstance": {
                        "type": "string",
                        "description": "The primary instance that this operation is targetting\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ClusterLogEntryDto": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "Application name associated with the postgres log entry.\n"
          },
          "commandTag": {
            "type": "string",
            "description": "Command tag associated with the Postgres log entry.\n"
          },
          "connectionFrom": {
            "type": "string",
            "description": "Host and port of the client (separated by colon) associated with the Postgres log entry.\n"
          },
          "context": {
            "type": "string",
            "description": "Context associated with the Postgres log entry.\n"
          },
          "databaseName": {
            "type": "string",
            "description": "Database name associated with the Postgres log entry.\n"
          },
          "detail": {
            "type": "string",
            "description": "Detail associated with the Postgres log entry.\n"
          },
          "errorLevel": {
            "type": "string",
            "description": "Error level of the log entry.\n"
          },
          "hint": {
            "type": "string",
            "description": "Hint associated with the Postgres log entry.\n"
          },
          "internalQuery": {
            "type": "string",
            "description": "Internal query associated with the Postgres log entry.\n"
          },
          "internalQueryPos": {
            "type": "integer",
            "format": "int32",
            "description": "Internal query position associated with the Postgres log entry.\n"
          },
          "location": {
            "type": "string",
            "description": "Location associated with the Postgres log entry.\n"
          },
          "logTime": {
            "type": "string",
            "description": "The log entry timestamp in ISO-8601 format.\n"
          },
          "logTimeIndex": {
            "type": "integer",
            "format": "int32",
            "description": "The index to disambiguate logs that has the same `logTime` value.\n"
          },
          "logType": {
            "type": "string",
            "description": "Source of the log entry: `pa` for Patroni; `pg` for Postgres.\n"
          },
          "message": {
            "type": "string",
            "description": "Error message of the log entry.\n"
          },
          "podName": {
            "type": "string",
            "description": "Name of the pod where the log entry was originated.\n"
          },
          "processId": {
            "type": "integer",
            "format": "int32",
            "description": "Process ID associated with the Postgres log entry.\n"
          },
          "query": {
            "type": "string",
            "description": "The query associated with the postgres log entry.\n"
          },
          "queryPos": {
            "type": "integer",
            "format": "int32",
            "description": "The query position associated with the postgres log entry.\n"
          },
          "role": {
            "type": "string",
            "description": "Role of the pod where the log entry was originated. Can be `null`, `Primary`, `Replica`, `Uninitialized` or `Standby`.\n"
          },
          "sessionId": {
            "type": "string",
            "description": "Session ID associated with the Postgres log entry.\n"
          },
          "sessionLineNum": {
            "type": "integer",
            "format": "int32",
            "description": "Session line number associated with the Postgres log entry.\n"
          },
          "sessionStartTime": {
            "type": "string",
            "description": "Session start time associated with the Postgres log entry.\n"
          },
          "sqlStateCode": {
            "type": "string",
            "description": "SQL state code associated with the Postgres log entry.\n"
          },
          "transactionId": {
            "type": "integer",
            "format": "int32",
            "description": "Transaction ID associated with the Postgres log entry.\n"
          },
          "userName": {
            "type": "string",
            "description": "User name associated with the Postgres log entry.\n"
          },
          "virtualTransactionId": {
            "type": "string",
            "description": "Virtual transaction ID associated with the Postgres log entry.\n"
          }
        },
        "description": "Object that represent an entry in the logs collected by distributed logs server.\n"
      },
      "ClusterStatsDto": {
        "type": "object",
        "properties": {
          "averageLoad10m": {
            "type": "string",
            "description": "The average load on a window of 10 minute.\n"
          },
          "averageLoad1m": {
            "type": "string",
            "description": "The average load on a window of 1 minute.\n"
          },
          "averageLoad5m": {
            "type": "string",
            "description": "The average load on a window of 5 minute.\n"
          },
          "cpuFound": {
            "type": "string",
            "description": "The average CPU actually reserved for all pods.\n"
          },
          "cpuPsiAvg10": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 10 seconds.\n"
          },
          "cpuPsiAvg300": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 300 seconds.\n"
          },
          "cpuPsiAvg60": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 60 seconds.\n"
          },
          "cpuPsiTotal": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU total share of time.\n"
          },
          "cpuRequested": {
            "type": "string",
            "description": "The average CPU requested for all pods.\n"
          },
          "diskFound": {
            "type": "string",
            "description": "The average disk actually reserved for all pods.\n"
          },
          "diskPsiAvg10": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
          },
          "diskPsiAvg300": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
          },
          "diskPsiAvg60": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
          },
          "diskPsiFullAvg10": {
            "type": "string"
          },
          "diskPsiFullAvg300": {
            "type": "string"
          },
          "diskPsiFullAvg60": {
            "type": "string"
          },
          "diskPsiFullTotal": {
            "type": "string"
          },
          "diskPsiTotal": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
          },
          "diskRequested": {
            "type": "string",
            "description": "The average disk requested for all pods.\n"
          },
          "diskUsed": {
            "type": "string",
            "description": "The average disk used by all pods.\n"
          },
          "memoryFound": {
            "type": "string",
            "description": "The average memory actually reserved for all pods.\n"
          },
          "memoryPsiAvg10": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
          },
          "memoryPsiAvg300": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
          },
          "memoryPsiAvg60": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
          },
          "memoryPsiFullAvg10": {
            "type": "string"
          },
          "memoryPsiFullAvg300": {
            "type": "string"
          },
          "memoryPsiFullAvg60": {
            "type": "string"
          },
          "memoryPsiFullTotal": {
            "type": "string"
          },
          "memoryPsiTotal": {
            "type": "string",
            "description": "The average [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
          },
          "memoryRequested": {
            "type": "string",
            "description": "The average memory requested for all pods.\n"
          },
          "memoryUsed": {
            "type": "string",
            "description": "The average memory used by all pods.\n"
          },
          "metadata": {
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            }
          },
          "pods": {
            "type": "array",
            "items": {
              "description": "A pod that hold an instance of this cluster\n",
              "properties": {
                "namespace": {
                  "description": "The namespace of the pod.\n"
                },
                "name": {
                  "description": "The name of the pod.\n"
                },
                "role": {
                  "description": "The role of the instance hold by this pod.\n"
                },
                "ip": {
                  "description": "The IP of the pod.\n"
                },
                "status": {
                  "description": "The status of the pod:\n\n* **Available**: The instance hold by this pod is available.\n* **Unavailable**: The instance hold by this pod is unavailable.\n* **Pending**: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while.\n* **Failed**: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system.\n* **Unknown**: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n"
                },
                "containers": {
                  "type": "integer",
                  "description": "The number of containers that are contained in this pod.\n"
                },
                "containersReady": {
                  "type": "integer",
                  "description": "The number of ready containers that are contained in this pod.\n"
                },
                "cpuRequested": {
                  "description": "The CPU requested for this pod.\n"
                },
                "cpuFound": {
                  "description": "The CPU actually reserved for this pod.\n"
                },
                "cpuPsiAvg10": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 10 seconds.\n"
                },
                "cpuPsiAvg60": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 60 seconds.\n"
                },
                "cpuPsiAvg300": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 300 seconds.\n"
                },
                "cpuPsiTotal": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU total share of time.\n"
                },
                "cpuPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 10 seconds.\n"
                },
                "cpuPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 60 seconds.\n"
                },
                "cpuPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU share of time average on a window of 300 seconds.\n"
                },
                "cpuPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) CPU total share of time.\n"
                },
                "memoryRequested": {
                  "description": "The memory requested for this pod.\n"
                },
                "memoryFound": {
                  "description": "The memory actually reserved for this pod.\n"
                },
                "memoryUsed": {
                  "description": "The memory used by this pod.\n"
                },
                "memoryPsiAvg10": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiAvg60": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiAvg300": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiTotal": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiFullAvg10": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiFullAvg60": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiFullAvg300": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiFullTotal": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "memoryPsiFullCgroupAvg10": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 10 seconds.\n"
                },
                "memoryPsiFullCgroupAvg60": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 60 seconds.\n"
                },
                "memoryPsiFullCgroupAvg300": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory share of time average on a window of 300 seconds.\n"
                },
                "memoryPsiFullCgroupTotal": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) memory total share of time.\n"
                },
                "diskRequested": {
                  "description": "The disk requested for this pod.\n"
                },
                "diskFound": {
                  "description": "The disk actually reserved for this pod.\n"
                },
                "diskUsed": {
                  "description": "The disk used by this pod.\n"
                },
                "diskPsiAvg10": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiAvg60": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiAvg300": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiTotal": {
                  "description": "The global [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiCgroupAvg10": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiCgroupAvg60": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiCgroupAvg300": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiCgroupTotal": {
                  "description": "The cgroup [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiFullAvg10": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiFullAvg60": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiFullAvg300": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiFullTotal": {
                  "description": "The global full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "diskPsiFullCgroupAvg10": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 10 seconds.\n"
                },
                "diskPsiFullCgroupAvg60": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 60 seconds.\n"
                },
                "diskPsiFullCgroupAvg300": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk share of time average on a window of 300 seconds.\n"
                },
                "diskPsiFullCgroupTotal": {
                  "description": "The cgroup full [PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html) disk total share of time.\n"
                },
                "averageLoad1m": {
                  "description": "The average load on a window of 1 minute.\n"
                },
                "averageLoad5m": {
                  "description": "The average load on a window of 5 minute.\n"
                },
                "averageLoad10m": {
                  "description": "The average load on a window of 10 minute.\n"
                }
              }
            }
          },
          "podsReady": {
            "type": "integer",
            "format": "int32",
            "description": "The number of pods of this cluster that are ready.\n"
          }
        }
      },
      "ConfigMapDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences are not allowed.\n"
          },
          "metadata": {
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            }
          }
        },
        "description": "ConfigMaps provide text key value pairs injected into the application through environment variables, command line arguments, or files\n"
      },
      "DbOpsDto": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Database Operation. A database operation represents a \"\"kind\"\" of operation on a StackGres cluster, classified by a given name. The operation reference one SGCluster by its name. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all database operations in the same namespace.\"\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "sgCluster": {
                "type": "string",
                "description": "The name of SGCluster on which the operation will be performed\n"
              },
              "op": {
                "type": "string",
                "description": "The kind of operation that will be performed on the SGCluster. Available operations are:\n\n* `benchmark`: run a benchmark on the specified SGCluster and report the results in the status.\n* `vacuum`: perform a [vacuum](https://www.postgresql.org/docs/current/sql-vacuum.html) operation on the specified SGCluster.\n* `repack`: run [`pg_repack`](https://github.com/reorg/pg_repack) command on the specified SGCluster.\n* `majorVersionUpgrade`: perform a major version upgrade of PostgreSQL using [`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html) command.\n* `restart`: perform a restart of the cluster.\n* `minorVersionUpgrade`: perform a minor version upgrade of PostgreSQL.\n* `securityUpgrade`: perform a security upgrade of the cluster.\n"
              },
              "runAt": {
                "type": "string",
                "description": "An ISO 8601 date, that holds UTC scheduled date of the operation execution.\n\nIf not specified or date it’s in the past it will be interpreted as ASAP.\n"
              },
              "timeout": {
                "type": "string",
                "description": "An ISO 8601 duration format `PnDTnHnMn.nS`, that specify a timeout after which the operation execution will not be performed.\n\nIf the operation can not be performed due to timeout expiration the condition `Failed` will have a status of `True` and and the reason will be `TimedOut`.\n\nIf not specified the operation will never fail for timeout expiration.\n"
              },
              "maxRetries": {
                "type": "integer",
                "description": "The maximum number of retries the operation is allowed to do after a failure.\n\nIf not specified this default to `1`. Can not be greater than `10`.\n"
              },
              "benchmark": {
                "type": "object",
                "description": "Configuration of the benchmark\n",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of benchmark that will be performed on the SGCluster. Available benchamrks are:\n\n* `pgbench`: run [pgnech](https://www.postgresql.org/docs/current/pgbench.html) on the specified SGCluster and report the results in the status.\n"
                  },
                  "pgbench": {
                    "type": "object",
                    "description": "Configuration of [pgbench](https://www.postgresql.org/docs/current/pgbench.html) benchmark\n",
                    "properties": {
                      "databaseSize": {
                        "type": "string",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(Mi|Gi|Ti)$",
                        "description": "Size of the database to generate. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).\n"
                      },
                      "duration": {
                        "type": "string",
                        "description": "An ISO 8601 duration format `PnDTnHnMn.nS`, that specify the duration of the benchmark.\n"
                      },
                      "usePreparedStatements": {
                        "type": "boolean",
                        "description": "Use extended query protocol with prepared statements. If not specified is considered `false`.\n"
                      },
                      "concurrentClients": {
                        "type": "integer",
                        "description": "Number of clients simulated, that is, number of concurrent database sessions. Default is 1.\n"
                      },
                      "threads": {
                        "type": "integer",
                        "description": "Number of worker threads within pgbench. Using more than one thread can be helpful on multi-CPU machines. Clients are distributed as evenly as possible among available threads. Default is 1.\n"
                      }
                    },
                    "required": [
                      "databaseSize",
                      "duration"
                    ]
                  },
                  "connectionType": {
                    "type": "string",
                    "description": "Specify where the benchmark connection will be directed:\n\n* `primary-service`: Connect to the primary service\n* `replicas-service`: Connect to the replicas service\n"
                  }
                },
                "required": [
                  "type"
                ]
              },
              "vacuum": {
                "type": "object",
                "description": "Configuration of [vacuum](https://www.postgresql.org/docs/current/sql-vacuum.html) operation\n",
                "properties": {
                  "full": {
                    "type": "boolean",
                    "description": "If true selects \"full\" vacuum, which can reclaim more space, but takes much longer and exclusively locks the table.\nThis method also requires extra disk space, since it writes a new copy of the table and doesn't release the old copy\n until the operation is complete. Usually this should only be used when a significant amount of space needs to be\n reclaimed from within the table. By default false\n"
                  },
                  "freeze": {
                    "type": "boolean",
                    "description": "If true selects aggressive \"freezing\" of tuples. Specifying FREEZE is equivalent to performing VACUUM with the\n vacuum_freeze_min_age and vacuum_freeze_table_age parameters set to zero. Aggressive freezing is always performed\n when the table is rewritten, so this option is redundant when FULL is specified. By default false\n"
                  },
                  "analyze": {
                    "type": "boolean",
                    "description": "If true, updates statistics used by the planner to determine the most efficient way to execute a query. By default true\n"
                  },
                  "disablePageSkipping": {
                    "type": "boolean",
                    "description": "Normally, VACUUM will skip pages based on the visibility map. Pages where all tuples are known to be frozen can always be\n skipped, and those where all tuples are known to be visible to all transactions may be skipped except when performing an\n aggressive vacuum. Furthermore, except when performing an aggressive vacuum, some pages may be skipped in order to avoid\n waiting for other sessions to finish using them. This option disables all page-skipping behavior, and is intended to be\n used only when the contents of the visibility map are suspect, which should happen only if there is a hardware or\n software issue causing database corruption. By default false\n"
                  },
                  "databases": {
                    "type": "array",
                    "description": "List of database to vacuum or repack, don't specify to select all databases\n",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "the name of the database"
                        },
                        "full": {
                          "type": "boolean",
                          "description": "If true selects \"full\" vacuum, which can reclaim more space, but takes much longer and exclusively locks the table.\nThis method also requires extra disk space, since it writes a new copy of the table and doesn't release the old copy\n until the operation is complete. Usually this should only be used when a significant amount of space needs to be\n reclaimed from within the table. By default false\n"
                        },
                        "freeze": {
                          "type": "boolean",
                          "description": "If true selects aggressive \"freezing\" of tuples. Specifying FREEZE is equivalent to performing VACUUM with the\n vacuum_freeze_min_age and vacuum_freeze_table_age parameters set to zero. Aggressive freezing is always performed\n when the table is rewritten, so this option is redundant when FULL is specified. By default false\n"
                        },
                        "analyze": {
                          "type": "boolean",
                          "description": "If true, updates statistics used by the planner to determine the most efficient way to execute a query. By default true\n"
                        },
                        "disablePageSkipping": {
                          "type": "boolean",
                          "description": "Normally, VACUUM will skip pages based on the visibility map. Pages where all tuples are known to be frozen can always be\n skipped, and those where all tuples are known to be visible to all transactions may be skipped except when performing an\n aggressive vacuum. Furthermore, except when performing an aggressive vacuum, some pages may be skipped in order to avoid\n waiting for other sessions to finish using them. This option disables all page-skipping behavior, and is intended to be\n used only when the contents of the visibility map are suspect, which should happen only if there is a hardware or\n software issue causing database corruption. By default false\n"
                        }
                      }
                    }
                  }
                }
              },
              "repack": {
                "type": "object",
                "description": "Configuration of [`pg_repack`](https://github.com/reorg/pg_repack) command\n",
                "properties": {
                  "noOrder": {
                    "type": "boolean",
                    "description": "If true do vacuum full instead of cluster. By default false.\n"
                  },
                  "waitTimeout": {
                    "type": "string",
                    "description": "If specified, an ISO 8601 duration format `PnDTnHnMn.nS` to set a timeout to cancel other backends on conflict.\n"
                  },
                  "noKillBackend": {
                    "type": "boolean",
                    "description": "If true don't kill other backends when timed out. By default false.\n"
                  },
                  "noAnalyze": {
                    "type": "boolean",
                    "description": "If true don't analyze at end. By default false.\n"
                  },
                  "excludeExtension": {
                    "type": "boolean",
                    "description": "If true don't repack tables which belong to specific extension. By default false.\n"
                  },
                  "databases": {
                    "type": "array",
                    "description": "List of database to vacuum or repack, don't specify to select all databases\n",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "the name of the database"
                        },
                        "noOrder": {
                          "type": "boolean",
                          "description": "If true do vacuum full instead of cluster. By default false.\n"
                        },
                        "waitTimeout": {
                          "type": "string",
                          "description": "If specified, an ISO 8601 duration format `PnDTnHnMn.nS` to set a timeout to cancel other backends on conflict.\n"
                        },
                        "noKillBackend": {
                          "type": "boolean",
                          "description": "If true don't kill other backends when timed out. By default false.\n"
                        },
                        "noAnalyze": {
                          "type": "boolean",
                          "description": "If true don't analyze at end. By default false.\n"
                        },
                        "excludeExtension": {
                          "type": "boolean",
                          "description": "If true don't repack tables which belong to specific extension. By default false.\n"
                        }
                      }
                    }
                  }
                }
              },
              "majorVersionUpgrade": {
                "type": "object",
                "description": "Configuration of major version upgrade (see also [`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html) command)\n",
                "properties": {
                  "link": {
                    "type": "boolean",
                    "description": "If true use hard links instead of copying files to the new cluster. This option is mutually exclusive with `clone`. By default false.\n"
                  },
                  "clone": {
                    "type": "boolean",
                    "description": "If true use efficient file cloning (also known as \"reflinks\" on some systems) instead of copying files to the new cluster.\nThis can result in near-instantaneous copying of the data files, giving the speed advantages of `link` while leaving the old\n cluster untouched. This option is mutually exclusive with `link`. By default false.\n\nFile cloning is only supported on some operating systems and file systems. If it is selected but not supported, the pg_upgrade\n run will error. At present, it is supported on Linux (kernel 4.5 or later) with Btrfs and XFS (on file systems created with\n reflink support), and on macOS with APFS.\n"
                  },
                  "check": {
                    "type": "boolean",
                    "description": "If true check clusters before changing any data. By default false.\n"
                  }
                }
              },
              "restart": {
                "type": "object",
                "description": "Configuration of restart\n",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The method used to perform the restart operation. Available methods are:\n\n* `InPlace`: the in-place method does not require more resources than those that are available.\n  In case only an instance of the StackGres cluster is present this mean the service disruption will\n  last longer so we encourage use the reduced impact restart and especially for a production environment.\n* `ReducedImpact`: this procedure is the same as the in-place method but require additional\n  resources in order to spawn a new updated replica that will be removed when the procedure completes.\n"
                  }
                }
              },
              "minorVersionUpgrade": {
                "type": "object",
                "description": "Configuration of restart\n",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The method used to perform the minor version upgrade operation. Available methods are:\n\n* `InPlace`: the in-place method does not require more resources than those that are available.\n  In case only an instance of the StackGres cluster is present this mean the service disruption will\n  last longer so we encourage use the reduced impact restart and especially for a production environment.\n* `ReducedImpact`: this procedure is the same as the in-place method but require additional\n  resources in order to spawn a new updated replica that will be removed when the procedure completes.\n"
                  }
                }
              },
              "securityUpgrade": {
                "type": "object",
                "description": "Configuration of security upgrade\n",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "The method used to perform the security upgrade operation. Available methods are:\n\n* `InPlace`: the in-place method does not require more resources than those that are available.\n  In case only an instance of the StackGres cluster is present this mean the service disruption will\n  last longer so we encourage use the reduced impact restart and especially for a production environment.\n* `ReducedImpact`: this procedure is the same as the in-place method but require additional\n  resources in order to spawn a new updated replica that will be removed when the procedure completes.\n"
                  }
                }
              }
            },
            "required": [
              "sgCluster",
              "op"
            ]
          },
          "status": {
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "description": "Possible conditions are:\n\n* Running: to indicate when the operation is actually running\n* Completed: to indicate when the operation is completed successfully\n* Failed: to indicate when the operation had failed\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of deployment condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "opRetries": {
                "type": "integer",
                "description": "The number of retries performed by the operation\n"
              },
              "opStarted": {
                "type": "string",
                "description": "The ISO 8601 timestamp of when the operation started running\n"
              },
              "benchmark": {
                "type": "object",
                "description": "The results of the benchmark\n",
                "properties": {
                  "pgbench": {
                    "type": "object",
                    "description": "The results of the pgbench benchmark\n",
                    "properties": {
                      "scaleFactor": {
                        "type": "number",
                        "nullable": true,
                        "description": "The scale factor user to run pgbench (`--scale`).\n"
                      },
                      "transactionsProcessed": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The number of transaction processed.\n"
                      },
                      "latencyAverage": {
                        "type": "number",
                        "nullable": true,
                        "description": "Average latency of transactions.\n"
                      },
                      "latencyStddev": {
                        "type": "number",
                        "nullable": true,
                        "description": "Stdandard deviation latency of transactions.\n"
                      },
                      "tpsIncludingConnectionsEstablishing": {
                        "type": "number",
                        "nullable": true,
                        "description": "Number of transaction per second including connection establishing.\n"
                      },
                      "tpsExcludingConnectionsEstablishing": {
                        "type": "number",
                        "nullable": true,
                        "description": "Number of transaction per second excluding connection establishing.\n"
                      }
                    }
                  }
                }
              },
              "majorVersionUpgrade": {
                "type": "object",
                "description": "The results of a major version upgrade\n",
                "properties": {
                  "primaryInstance": {
                    "type": "string",
                    "description": "The primary instance when the operation started\n"
                  },
                  "initialInstances": {
                    "type": "array",
                    "description": "The instances present when the operation started\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pendingToRestartInstances": {
                    "type": "array",
                    "description": "The instances that are pending to be restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "restartedInstances": {
                    "type": "array",
                    "description": "The instances that have been restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "failure": {
                    "type": "string",
                    "description": "A failure message (when available)\n"
                  }
                }
              },
              "restart": {
                "type": "object",
                "description": "The results of a restart\n",
                "properties": {
                  "primaryInstance": {
                    "type": "string",
                    "description": "The primary instance when the operation started\n"
                  },
                  "initialInstances": {
                    "type": "array",
                    "description": "The instances present when the operation started\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pendingToRestartInstances": {
                    "type": "array",
                    "description": "The instances that are pending to be restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "restartedInstances": {
                    "type": "array",
                    "description": "The instances that have been restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "switchoverInitiated": {
                    "type": "string",
                    "description": "An ISO 8601 date indicating if and when the switchover took place\n"
                  },
                  "failure": {
                    "type": "string",
                    "description": "A failure message (when available)\n"
                  }
                }
              },
              "minorVersionUpgrade": {
                "type": "object",
                "description": "The results of a minor version upgrade\n",
                "properties": {
                  "primaryInstance": {
                    "type": "string",
                    "description": "The primary instance when the operation started\n"
                  },
                  "initialInstances": {
                    "type": "array",
                    "description": "The instances present when the operation started\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pendingToRestartInstances": {
                    "type": "array",
                    "description": "The instances that are pending to be restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "restartedInstances": {
                    "type": "array",
                    "description": "The instances that have been restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "switchoverInitiated": {
                    "type": "string",
                    "description": "An ISO 8601 date indicating if and when the switchover took place\n"
                  },
                  "failure": {
                    "type": "string",
                    "description": "A failure message (when available)\n"
                  }
                }
              },
              "securityUpgrade": {
                "type": "object",
                "description": "The results of a security upgrade\n",
                "properties": {
                  "primaryInstance": {
                    "type": "string",
                    "description": "The primary instance when the operation started\n"
                  },
                  "initialInstances": {
                    "type": "array",
                    "description": "The instances present when the operation started\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pendingToRestartInstances": {
                    "type": "array",
                    "description": "The instances that are pending to be restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "restartedInstances": {
                    "type": "array",
                    "description": "The instances that have been restarted\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "switchoverInitiated": {
                    "type": "string",
                    "description": "An ISO 8601 date indicating if and when the switchover took place\n"
                  },
                  "failure": {
                    "type": "string",
                    "description": "A failure message (when available)\n"
                  }
                }
              }
            }
          }
        },
        "required": [
          "metadata",
          "spec"
        ]
      },
      "DistributedLogsDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Distributed Logs cluster. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nA Distributed Logs cluster may store logs for zero or more SGClusters.\n\nThe name must be unique across all Distributed Logs and StackGres clusters in the same namespace. The full cluster name includes the namespace in which the cluster is created.\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "persistentVolume": {
                "type": "object",
                "description": "Pod's persistent volume configuration",
                "properties": {
                  "size": {
                    "type": "string",
                    "pattern": "^[0-9]+(\\.[0-9]+)?(Mi|Gi|Ti)$",
                    "description": "Size of the PersistentVolume set for the pod of the cluster for distributed logs. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).\n"
                  },
                  "storageClass": {
                    "type": "string",
                    "description": "Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.\n"
                  }
                },
                "required": [
                  "size"
                ]
              },
              "nonProductionOptions": {
                "type": "object",
                "properties": {
                  "disableClusterPodAntiAffinity": {
                    "type": "boolean",
                    "description": "It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.\n\nThe same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres or Distributed Logs pod on a given Kubernetes node. If set to `true` it will allow more than one StackGres pod per node.\n"
                  }
                }
              }
            },
            "required": [
              "persistentVolume"
            ]
          },
          "status": {
            "type": "object",
            "properties": {
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of deployment condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "podStatuses": {
                "type": "array",
                "description": "The list of pod statuses.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the pod."
                    },
                    "pendingRestart": {
                      "type": "boolean",
                      "description": "Indicate if the pod requires restart"
                    },
                    "installedPostgresExtensions": {
                      "type": "array",
                      "description": "The list of extensions currently installed.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the installed extension."
                          },
                          "publisher": {
                            "type": "string",
                            "description": "The id of the publisher of the installed extension."
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the installed extension."
                          },
                          "repository": {
                            "type": "string",
                            "description": "The repository base URL from where the extension was installed."
                          },
                          "postgresVersion": {
                            "type": "string",
                            "description": "The postgres major version of the installed extension."
                          },
                          "build": {
                            "type": "string",
                            "description": "The build version of the installed extension."
                          }
                        },
                        "required": [
                          "name",
                          "publisher",
                          "version",
                          "repository",
                          "postgresVersion"
                        ]
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "databases": {
                "type": "array",
                "description": "The list of database status",
                "items": {
                  "type": "object",
                  "description": "A database status",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The database name that has been created"
                    },
                    "retention": {
                      "type": "string",
                      "description": "The retention window that has been applied to tables"
                    }
                  }
                }
              },
              "connectedClusters": {
                "type": "array",
                "description": "The list of connected `sgclusters`",
                "items": {
                  "type": "object",
                  "description": "A connected `sgcluster`",
                  "properties": {
                    "namespace": {
                      "type": "string",
                      "description": "The `sgcluster` namespace"
                    },
                    "name": {
                      "type": "string",
                      "description": "The `sgcluster` name"
                    },
                    "config": {
                      "type": "object",
                      "description": "The configuration for `sgdistributedlgos` of this `sgcluster`",
                      "properties": {
                        "sgDistributedLogs": {
                          "type": "string",
                          "description": "The `sgdistributedlogs` to which this `sgcluster` is connected to"
                        },
                        "retention": {
                          "type": "string",
                          "description": "The retention window that has been applied to tables"
                        }
                      }
                    }
                  }
                }
              },
              "fluentdConfigHash": {
                "type": "string",
                "description": "The hash of the configuration file that is used by fluentd"
              },
              "clusters": {
                "description": "The list of [SGClusters](https://stackgres.io/doc/latest/04-postgres-cluster-management/01-postgres-clusters/) that are using this configuration.\n"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "A human readable description of what is the problem.\n"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If applicable, a list of fields that is causing the issue.\n"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code.\n"
          },
          "title": {
            "type": "string",
            "description": "The title of the error message.\n"
          },
          "type": {
            "type": "string",
            "description": "An URL indicating the type of the error that point to the documentation.\n"
          }
        },
        "description": "Object returned when an error occur.\n"
      },
      "PermissionsListDto": {
        "type": "object",
        "properties": {
          "namespaced": {
            "type": "array",
            "items": {
              "description": "The namespaced permissions an user has been granted with. Each key represent a resource\n type and the value is a list of strings each representing a verb on specified resource.\n"
            },
            "description": "List of namespaced permissions an user has been granted with.\n"
          },
          "unnamespaced": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The unnamespaced permissions an user has been granted with. Each key represent a resource\n type and the value is a list of strings each representing a verb on specified resource.\n"
          }
        },
        "description": "A list of namespaced and unnamespaced permissions an user has been granted with.\n"
      },
      "PoolingConfigDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Connection Pooling Configuration. The configuration may be referenced by zero or more SGClusters, and if so it would be referenced by its name. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all Connection Pooling configurations in the same namespace.\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "pgBouncer": {
                "type": "object",
                "description": "Connection pooling configuration based on PgBouncer.\n",
                "properties": {
                  "pgbouncer.ini": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The `pgbouncer.ini` parameters of this given configuration.\n\nCheck [pgbouncer configuration](https://www.pgbouncer.org/config.html) for more information about supported parameters.\n"
                  }
                }
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "pgBouncer": {
                "type": "object",
                "description": "Connection pooling configuration status based on PgBouncer.\n",
                "properties": {
                  "defaultParameters": {
                    "type": "array",
                    "description": "List of parameters which are set to theirs default value.\n",
                    "items": {
                      "type": "string",
                      "description": "Name of a parameter that is set to his default value.\n"
                    }
                  }
                },
                "required": [
                  "defaultParameters"
                ]
              },
              "clusters": {
                "description": "List of [SGClusters](https://stackgres.io/doc/latest/04-postgres-cluster-management/01-postgres-clusters/) that are using this configuration.\n"
              },
              "pgBoucer": {
                "description": "Connection pooling configuration status based on PgBouncer.\n",
                "properties": {
                  "pgbouncer.ini": {
                    "items": {
                      "description": "The `pgbouncer.ini` parameters of this given configuration. They are represented as an object, where the keys are valid names for the `pgbouncer.ini` configuration file parameters.\n\nCheck [pgbouncer configuration](https://www.pgbouncer.org/config.html) for more information about supported parameters.\n"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostgresConfigDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Postgres Configuration. The configuration may be referenced by zero or more SGClusters, and if so it would be referenced by its name. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all Postgres configurations in the same namespace.\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "postgresVersion": {
                "type": "string",
                "description": "The **major** Postgres version the configuration is for. Postgres major versions contain one number starting with version 10 (`10`, `11`, `12`, etc), and two numbers separated by a dot for previous versions (`9.6`, `9.5`, etc).\n\nNote that Postgres maintains full compatibility across minor versions, and hence a configuration for a given major version will work for any minor version of that same major version.\n\nCheck [StackGres component versions](https://stackgres.io/doc/latest/intro/versions) to see the Postgres versions supported by this version of StackGres.\n"
              },
              "postgresql.conf": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The `postgresql.conf` parameters that this configuration contains.You may check [postgresqlco.nf](https://postgresqlco.nf) as a reference on how to tune and find the valid parameters for a given major version.\n"
              }
            },
            "required": [
              "postgresVersion",
              "postgresql.conf"
            ]
          },
          "status": {
            "type": "object",
            "properties": {
              "defaultParameters": {
                "type": "array",
                "description": "List of parameters which are set to their default value.\n",
                "items": {
                  "type": "string",
                  "description": "Name of a parameter that is set to his default value.\n"
                }
              },
              "clusters": {
                "description": "List of [SGClusters](https://stackgres.io/doc/latest/04-postgres-cluster-management/01-postgres-clusters/) that are using this configuration.\n"
              },
              "postgresql.conf": {
                "items": {
                  "description": "The `postgresql.conf` parameters that this configuration contains.You may check [postgresqlco.nf](https://postgresqlco.nf) as a reference on how to tune and find the valid parameters for a given major version.\n"
                }
              }
            },
            "required": [
              "defaultParameters"
            ]
          }
        }
      },
      "ProfileDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Instance Profile. An instance profile represents a \"\"kind\"\" of server (CPU and RAM) where you may run StackGres, classified by a given name. The profile may be referenced by zero or more SGClusters, and if so it would be referenced by its name. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.\n\nThe name must be unique across all instance profiles in the same namespace.\"\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            },
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n"
          },
          "spec": {
            "type": "object",
            "properties": {
              "cpu": {
                "type": "string",
                "pattern": "^[1-9][0-9]*[m]?$",
                "description": "CPU(s) (cores) used for every instance of a SGCluster. Please note that every StackGres pod contains not only the Patroni+Postgres container, but several other sidecar containers. While the majority of the resources are devoted to the main Postgres container, some CPU is needed for the sidecars.\n\nThe number of cores set is split between all the containers.\n\nA minimum of 2 cores is recommended.\n"
              },
              "memory": {
                "type": "string",
                "pattern": "^[0-9]+(\\.[0-9]+)?(Mi|Gi)$",
                "description": "RAM allocated to every instance of a SGCluster. The suffix `Mi` or `Gi` specifies Mebibytes or Gibibytes, respectively. Please note that every StackGres pod contains not only the Patroni+Postgres container, but several other sidecar containers. While the majority of the resources are devoted to the main Postgres container, some RAM is needed for the sidecars.\n\nThe amount of RAM set is split between all the containers.\n\nA minimum of 2-4Gi is recommended.\n"
              }
            },
            "required": [
              "cpu",
              "memory"
            ]
          },
          "status": {
            "properties": {
              "clusters": {
                "description": "The list of [SGClusters](https://stackgres.io/doc/latest/04-postgres-cluster-management/01-postgres-clusters/) that are using this configuration.\n"
              }
            }
          }
        }
      },
      "SecretDto": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Kyes contains the secret keys. Each key must consist of alphanumeric characters, '-', '_' or '.'.\n"
          },
          "metadata": {
            "description": "Metadata that all persisted resources must have, which includes all objects users must create.\n",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n"
              },
              "uid": {
                "type": "string",
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
              }
            }
          }
        },
        "description": "Secrets provides binary data injected into the application through files\n"
      },
      "SubjectAccessReviewStatus": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "boolean",
            "description": "Allowed is required. True if the action would be allowed, false otherwise.\n"
          },
          "denied": {
            "type": "boolean",
            "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.\n"
          },
          "evaluationError": {
            "type": "string",
            "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\n"
          },
          "reason": {
            "type": "string",
            "description": "Reason is optional. It indicates why a request was allowed or denied.\n"
          }
        },
        "description": "Spec holds information about the request being evaluated.\n"
      },
      "UserPassword": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password of the user to be authneticated.\n"
          },
          "username": {
            "type": "string",
            "description": "Username of the user to be authneticated.\n"
          }
        },
        "description": "Object that authenticate a user.\n"
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "description": "JWT authentication with bearer token",
        "scheme": "bearer",
        "bearerFormat": "Bearer [token]"
      }
    }
  },
  "info": {
    "title": "StackGres REST API",
    "version": "1"
  },
  "tags": [
    {
      "name": "sgcluster"
    },
    {
      "name": "sginstanceprofile"
    },
    {
      "name": "sgpgconfig"
    },
    {
      "name": "sgpoolconfig"
    },
    {
      "name": "sgbackupconfig"
    },
    {
      "name": "sgdistributedlogs"
    },
    {
      "name": "sgbackup"
    },
    {
      "name": "auth"
    },
    {
      "name": "misc"
    }
  ]
}