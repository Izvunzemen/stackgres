apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sgclusters.stackgres.io
spec:
  group: stackgres.io
  scope: Namespaced
  names:
    kind: SGCluster
    listKind: SGClusterList
    plural: sgclusters
    singular: sgcluster
    shortNames:
      - sgclu
  versions:
    - name: v1
      served: true
      storage: true
      additionalPrinterColumns:
      - name: version
        type: string
        jsonPath: .spec.postgres.version
      - name: instances
        type: integer
        jsonPath: .spec.instances 
      - name: Profile
        type: string
        jsonPath: .spec.sgInstanceProfile
      - name: Disk
        type: string
        jsonPath: .spec.pods.persistentVolume.size
      - name: prometheus-Autobind
        type: string
        jsonPath: .spec.prometheusAutobind
        priority: 1
      - name: pool-config
        type: string
        jsonPath: .spec.configurations.sgPoolingConfig
        priority: 1
      - name: postgres-config
        type: string
        jsonPath: .spec.configurations.sgPostgresConfig
        priority: 1
      schema:
        openAPIV3Schema:
          type: object
          required: ["metadata", "spec"]
          properties:
            metadata:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 52
                  pattern: "^[a-z]([-a-z0-9]*[a-z0-9])?$"
                  description: |
                    Name of the StackGres cluster. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.

                    The name must be unique across all StackGres clusters in the same namespace. The full cluster name includes the namespace in which the cluster is created.
            spec:
              type: object
              properties:
                postgres:
                  type: object
                  description: |
                    This section allows to configure Postgres features
                  properties:
                    version:
                      type: string
                      description: |
                        Postgres version used on the cluster. It is either of:
                        *  The string 'latest', which automatically sets the latest major.minor Postgres version.
                        *  A major version, like '14' or '13', which sets that major version and the latest minor version.
                        *  A specific major.minor version, like '14.4'.
                    flavor:
                      type: string
                      description: |
                        Postgres flavor used on the cluster. It is either of:
                        *  `babelfish` will use the [Babelfish for Postgres](https://babelfish-for-postgresql.github.io/babelfish-for-postgresql/).
                        
                        If not specified then the vanilla Postgres will be used for the cluster.
                    extensions:
                      type: array
                      description: |
                        StackGres support deploy of extensions at runtime by simply adding an entry to this array. A deployed extension still
                        requires the creation in a database using the [`CREATE EXTENSION`](https://www.postgresql.org/docs/current/sql-createextension.html)
                        statement. After an extension is deployed correctly it will be present until removed and the cluster restarted.
                        
                        A cluster restart is required for:
                        * Extensions that requires to add an entry to [`shared_preload_libraries`](https://postgresqlco.nf/en/doc/param/shared_preload_libraries/) configuration parameter.
                        * Upgrading extensions that overwrite any file that is not the extension''s control file or extension''s script file.
                        * Removing extensions. Until the cluster is not restarted a removed extension will still be available.
                        * Install of extensions that require extra mount. After installed the cluster will require to be restarted.
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the extension to deploy.
                          publisher:
                            type: string
                            description: The id of the publisher of the extension to deploy. If not specified `com.ongres` will be used by default.
                          version:
                            type: string
                            description: The version of the extension to deploy. If not specified version of `stable` channel will be used by default.
                          repository:
                            type: string
                            description: The repository base URL from where to obtain the extension to deploy. If not specified https://stackgres.io/downloads/postgres/extensions will be used by default (or the value specified during operator deployment).
                        required: ["name"]
                    ssl:
                      type: object
                      description: |
                        This section allows to use SSL when connecting to Postgres
                      properties:
                        enabled:
                          type: boolean
                          description: |
                            Allow to enable SSL for connections to Postgres. By default is `false`.
                            
                            If `true` fields `certificateSecretKeySelector` and `privateKeySecretKeySelector` will be required.
                        certificateSecretKeySelector:
                          type: object
                          description: |
                            Secret key selector for the certificate or certificate chain used for SSL connections.
                          properties:
                            name:
                              type: string
                              description: |
                                The name of Secret that contains the certificate or certificate chain for SSL connections
                            key:
                              type: string
                              description: |
                                The key of Secret that contains the certificate or certificate chain for SSL connections
                          required: [ "name", "key" ]
                        privateKeySecretKeySelector:
                          type: object
                          description: |
                            Secret key selector for the private key used for SSL connections.
                          properties:
                            name:
                              type: string
                              description: |
                                The name of Secret that contains the private key for SSL connections
                            key:
                              type: string
                              description: |
                                The key of Secret that contains the private key for SSL connections
                          required: [ "name", "key" ]
                  required: [ "version" ]
                instances:
                  type: integer
                  minimum: 1
                  maximum: 16
                  description: |
                    Number of StackGres instances for the cluster. Each instance contains one Postgres server.
                     Out of all of the Postgres servers, one is elected as the primary, the rest remain as read-only replicas.
                replication:
                  type: object
                  description: |
                    This section allows to configure Postgres replication mode and HA roles groups.

                    The main replication group is implicit and contains the total number of instances less the sum of all
                     instances in other replication groups.

                    The total number of instances is always specified by `.spec.instances`.
                  properties:
                    mode:
                      type: string
                      description: |
                        The replication mode applied to the whole cluster.
                        Possible values are:
                        * `async` (default)
                        * `sync`
                        * `strict-sync`
                        
                        ### `async` Mode
                        
                        When in asynchronous mode the cluster is allowed to lose some committed transactions.
                         When the primary server fails or becomes unavailable for any other reason a sufficiently healthy standby
                         will automatically be promoted to primary. Any transactions that have not been replicated to that standby
                         remain in a "forked timeline" on the primary, and are effectively unrecoverable (the data is still there,
                         but recovering it requires a manual recovery effort by data recovery specialists).
                        
                        ### `sync` Mode
                        
                        When in synchronous mode a standby will not be promoted unless it is certain that the standby contains all
                         transactions that may have returned a successful commit status to client (clients can change the behavior
                         per transaction using PostgreSQL’s `synchronous_commit` setting. Transactions with `synchronous_commit`
                         values of `off` and `local` may be lost on fail over, but will not be blocked by replication delays). This
                         means that the system may be unavailable for writes even though some servers are available. System
                         administrators can still use manual failover commands to promote a standby even if it results in transaction
                         loss.
                        
                        Synchronous mode does not guarantee multi node durability of commits under all circumstances. When no suitable
                         standby is available, primary server will still accept writes, but does not guarantee their replication. When
                         the primary fails in this mode no standby will be promoted. When the host that used to be the primary comes
                         back it will get promoted automatically, unless system administrator performed a manual failover. This behavior
                         makes synchronous mode usable with 2 node clusters.
                        
                        When synchronous mode is used and a standby crashes, commits will block until the primary is switched to standalone
                         mode. Manually shutting down or restarting a standby will not cause a commit service interruption. Standby will
                         signal the primary to release itself from synchronous standby duties before PostgreSQL shutdown is initiated.
                        
                        ### `strict-sync` Mode
                        
                        When it is absolutely necessary to guarantee that each write is stored durably on at least two nodes, use the strict
                         synchronous mode. This mode prevents synchronous replication to be switched off on the primary when no synchronous
                         standby candidates are available. As a downside, the primary will not be available for writes (unless the Postgres
                         transaction explicitly turns off `synchronous_mode` parameter), blocking all client write requests until at least one
                         synchronous replica comes up.

                        **Note**: Because of the way synchronous replication is implemented in PostgreSQL it is still possible to lose
                         transactions even when using strict synchronous mode. If the PostgreSQL backend is cancelled while waiting to acknowledge
                         replication (as a result of packet cancellation due to client timeout or backend failure) transaction changes become
                         visible for other backends. Such changes are not yet replicated and may be lost in case of standby promotion.
                    role:
                      type: string
                      description: |
                        This role is applied to the instances of the implicit replication group that is composed by `.spec.instances` number of instances.
                        Possible values are:
                        * `ha-read` (default)
                        * `ha`
                        The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
                        Only if the role is set to `ha-read` instances of main replication group will be exposed via the replicas service.
                    syncInstances:
                      type: integer
                      minimum: 1
                      description: |
                        Number of synchronous standby instances. Must be less than the total number of instances. It is set to 1 by default.
                         Only setteable if mode is `sync` or `strict-sync`.
                    groups:
                      type: array
                      description: |
                        StackGres support replication groups where a replication group of a specified number of instances could have different
                         replication role. The main replication group is implicit and contains the total number of instances less the sum of all
                         instances in other replication groups.
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the replication group. If not set will default to the `group-<index>`.
                          role:
                            type: string
                            description: |
                              This role is applied to the instances of this replication group.
                              Possible values are:
                              * `ha-read`
                              * `ha`
                              * `readonly`
                              * `none`
                              The primary instance will be elected among all the replication groups that are either `ha` or `ha-read`.
                              Only if the role is set to `readonly` or `ha-read` instances of such replication group will be exposed via the replicas service.
                          instances:
                            type: integer
                            minimum: 1
                            maximum: 16
                            description: |
                              Number of StackGres instances for this replication group.
                              
                              The total number of instance of a cluster is always `.spec.instances`. The sum of the instances in the replication group must be
                               less than the total number of instances.
                        required: ["role", "instances"]
                sgInstanceProfile:
                  type: string
                  description: |
                    Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/). A SGInstanceProfile defines CPU and memory limits. Must exist before creating a cluster. When no profile is set, a default (currently: 1 core, 2 GiB RAM) one is used.
                metadata:
                  type: object
                  description: Metadata information from cluster created resources.
                  properties:
                    annotations:
                      type: object
                      description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to resources created and managed by StackGres.
                      properties:
                        allResources:
                          type: object
                          description: Annotations to attach to any resource created or managed by StackGres.
                          additionalProperties:
                            type: string
                        clusterPods:
                          type: object
                          description: Annotations to attach to pods created or managed by StackGres.
                          additionalProperties:
                            type: string
                        services:
                          type: object
                          description: Annotations to attach to all services created or managed by StackGres.
                          additionalProperties:
                            type: string
                        primaryService:
                          type: object
                          description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-primary` service.
                          additionalProperties:
                            type: string
                        replicasService:
                          type: object
                          description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-replicas` service.
                          additionalProperties:
                            type: string
                    labels:
                      type: object
                      description: Custom Kubernetes [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) to be passed to resources created and managed by StackGres.
                      properties:
                        clusterPods:
                          type: object
                          description: Labels to attach to pods created or managed by StackGres.
                          additionalProperties:
                            type: string 
                postgresServices:
                  type: object
                  description: Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/) created or managed by StackGres.
                  properties:
                    primary:
                      type: object
                      description: Configuration for the `-primary` service. It provides a stable connection (regardless of primary failures or switchovers) to the read-write Postgres server of the cluster.
                      properties:
                        enabled:
                          type: boolean
                          description: Specify if the `-primary` service should be created or not.
                        type:
                          type: string
                          enum: ["ClusterIP", "LoadBalancer", "NodePort"]
                          description: Specifies the type of Kubernetes service.
                        externalIPs:
                          type: array
                          description: Specify custom external IPs for Postgres primary service
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: Specify loadBalancer IP for Postgres primary service
                    replicas:
                      type: object
                      description: Configuration for the `-replicas` service. It provides a stable connection (regardless of replica node failures) to any read-only Postgres server of the cluster. Read-only servers are load-balanced via this service.
                      properties:
                        enabled:
                          type: boolean
                          description: Specify if the `-replicas` service should be created or not.
                        type:
                          type: string
                          enum: ["ClusterIP", "LoadBalancer", "NodePort"]
                          description: Specifies the type of Kubernetes service.
                        externalIPs:
                          type: array
                          description: Specify the custom external IPs for Postgres replicas service
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: Specify loadBalancer IP for Postgres replica service
                pods:
                  type: object
                  description: Cluster pod's configuration.
                  properties:
                    persistentVolume:
                      type: object
                      description: Pod's persistent volume configuration.
                      properties:
                        size:
                          type: string
                          pattern: '^[0-9]+(\.[0-9]+)?(Mi|Gi|Ti)$'
                          description: |
                            Size of the PersistentVolume set for each instance of the cluster. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).
                        storageClass:
                          type: string
                          description: |
                            Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.
                      required: ["size"]
                    disableConnectionPooling:
                      type: boolean
                      description: If set to `true`, avoids creating a connection pooling (using [PgBouncer](https://www.pgbouncer.org/)) sidecar.
                    disableMetricsExporter:
                      type: boolean
                      description: If set to `true`, avoids creating the Prometheus exporter sidecar. Recommended when there's no intention to use Prometheus for monitoring.
                    disablePostgresUtil:
                      type: boolean
                      description: If set to `true`, avoids creating the `postgres-util` sidecar. This sidecar contains usual Postgres administration utilities *that are not present in the main (`patroni`) container*, like `psql`. Only disable if you know what you are doing.
                    scheduling:
                      type: object
                      description: Pod custom scheduling configuration.
                      properties:
                        nodeSelector:
                          type: object
                          additionalProperties:
                            type: string
                          description: Pod custom node selector.
                        nodeAffinity:
                          type: object
                          description: Node affinity is a group of node affinity scheduling rules.
                          properties:
                            preferredDuringSchedulingIgnoredDuringExecution:
                              type: array
                              description: |
                                The scheduler will prefer to schedule pods to nodes that satisfy
                                the affinity expressions specified by this field, but it may choose a node
                                that violates one or more of the expressions. The node that is most preferred
                                is the one with the greatest sum of weights, i.e. for each node that meets
                                all of the scheduling requirements (resource request, requiredDuringScheduling
                                affinity expressions, etc.), compute a sum by iterating through the elements
                                of this field and adding "weight" to the sum if the node matches the corresponding
                                matchExpressions; the node(s) with the highest sum are the most preferred.
                              items:
                                type: object
                                description: | 
                                  An empty preferred scheduling term matches all objects with
                                  implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term
                                  matches no objects (i.e. is also a no-op).
                                properties:
                                  weight:
                                    type: integer
                                    description: Weight associated with matching the corresponding nodeSelectorTerm,
                                      in the range 1-100.
                                  preference:
                                    type: object
                                    description: |
                                      A null or empty node selector term matches no objects.
                                      The requirements of them are ANDed. The TopologySelectorTerm type
                                      implements a subset of the NodeSelectorTerm.
                                    properties:
                                      matchExpressions:
                                        type: array
                                        description: A list of node selector requirements by node's labels.
                                        items:
                                          type: object
                                          description: A node selector requirement is a selector that contains
                                            values, a key, and an operator that relates the key and values.
                                          properties:
                                            key:
                                              type: string
                                              description: The label key that the selector applies to.
                                            operator: 
                                              type: string
                                              description: |
                                                Represents a key's relationship to a set of values.
                                                Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                and Lt.
                                            values:
                                              type: array
                                              description: An array of string values. If the operator is
                                                In or NotIn, the values array must be non-empty. If the
                                                operator is Exists or DoesNotExist, the values array must
                                                be empty. If the operator is Gt or Lt, the values array
                                                must have a single element, which will be interpreted as
                                                an integer. This array is replaced during a strategic merge
                                                patch.
                                              items:
                                                type: string
                                      matchFields:
                                        type: array
                                        description: A list of node selector requirements by node's labels.
                                        items:
                                          type: object
                                          description: A node selector requirement is a selector that contains
                                            values, a key, and an operator that relates the key and values.
                                          properties:
                                            key:
                                              type: string
                                              description: The label key that the selector applies to.
                                            operator: 
                                              type: string
                                              description: |
                                                Represents a key's relationship to a set of values.
                                                Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                and Lt.
                                            values:
                                              type: array
                                              description: An array of string values. If the operator is
                                                In or NotIn, the values array must be non-empty. If the
                                                operator is Exists or DoesNotExist, the values array must
                                                be empty. If the operator is Gt or Lt, the values array
                                                must have a single element, which will be interpreted as
                                                an integer. This array is replaced during a strategic merge
                                                patch.
                                              items:
                                                type: string
                            requiredDuringSchedulingIgnoredDuringExecution:
                              type: object
                              description: |
                                If the affinity requirements specified by this field are not met at
                                scheduling time, the pod will not be scheduled onto the node.
                                This type of affinity can restrict to only run the pod on specifically
                                nodes like "Intel CPUs".
                              properties:
                                nodeSelectorTerms:
                                  type: array
                                  description: Pod custom node tolerations
                                  items:
                                    type: object
                                    description: Pod custom node toleration
                                    properties:
                                      matchExpressions:
                                        type: array
                                        description: A list of node selector requirements by node's labels.
                                        items:
                                          type: object
                                          description: A node selector requirement is a selector that contains
                                            values, a key, and an operator that relates the key and values.
                                          properties:
                                            key:
                                              type: string
                                              description: The label key that the selector applies to.
                                            operator: 
                                              type: string
                                              description: |
                                                Represents a key's relationship to a set of values.
                                                Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                and Lt.
                                            values:
                                              type: array
                                              description: An array of string values. If the operator is
                                                In or NotIn, the values array must be non-empty. If the
                                                operator is Exists or DoesNotExist, the values array must
                                                be empty. If the operator is Gt or Lt, the values array
                                                must have a single element, which will be interpreted as
                                                an integer. This array is replaced during a strategic merge
                                                patch.
                                              items:
                                                type: string
                                      matchFields:
                                        type: array
                                        description: A list of node selector requirements by node's labels.
                                        items:
                                          type: object
                                          description: A node selector requirement is a selector that contains
                                            values, a key, and an operator that relates the key and values.
                                          properties:
                                            key:
                                              type: string
                                              description: The label key that the selector applies to.
                                            operator: 
                                              type: string
                                              description: |
                                                Represents a key's relationship to a set of values.
                                                Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                and Lt.
                                            values:
                                              type: array
                                              description: An array of string values. If the operator is
                                                In or NotIn, the values array must be non-empty. If the
                                                operator is Exists or DoesNotExist, the values array must
                                                be empty. If the operator is Gt or Lt, the values array
                                                must have a single element, which will be interpreted as
                                                an integer. This array is replaced during a strategic merge
                                                patch.
                                              items:
                                                type: string
                        tolerations:
                          type: array
                          description: Pod custom node tolerations
                          items:
                            type: object
                            description: Pod custom node toleration
                            properties:
                              key:
                                type: string
                                description: |
                                  Key is the taint key that the toleration applies to. Empty means match all taint
                                   keys. If the key is empty, operator must be Exists; this combination means to
                                   match all values and all keys.
                              operator:
                                type: string
                                description: |
                                  Operator represents a key's relationship to the value. Valid operators are Exists
                                   and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that
                                   a pod can tolerate all taints of a particular category.
                              value:
                                type: string
                                description: |
                                  Value is the taint value the toleration matches to. If the operator is Exists, the
                                   value should be empty, otherwise just a regular string.
                              effect:
                                type: string
                                description: |
                                  Effect indicates the taint effect to match. Empty means match all taint effects.
                                   When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              tolerationSeconds:
                                type: integer
                                description: |
                                  TolerationSeconds represents the period of time the toleration (which must be of
                                   effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
                                   it is not set, which means tolerate the taint forever (do not evict). Zero and
                                   negative values will be treated as 0 (evict immediately) by the system.
                        backup:
                          type: object
                          description: Backup Pod custom scheduling configuration.
                          properties:
                            nodeSelector:
                              type: object
                              additionalProperties:
                                type: string
                              description: Pod custom node selector.
                            nodeAffinity:
                              type: object
                              description: Node affinity is a group of node affinity scheduling rules.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  type: array
                                  description: |
                                    The scheduler will prefer to schedule pods to nodes that satisfy
                                    the affinity expressions specified by this field, but it may choose a node
                                    that violates one or more of the expressions. The node that is most preferred
                                    is the one with the greatest sum of weights, i.e. for each node that meets
                                    all of the scheduling requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating through the elements
                                    of this field and adding "weight" to the sum if the node matches the corresponding
                                    matchExpressions; the node(s) with the highest sum are the most preferred.
                                  items:
                                    type: object
                                    description: | 
                                      An empty preferred scheduling term matches all objects with
                                      implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term
                                      matches no objects (i.e. is also a no-op).
                                    properties:
                                      weight:
                                        type: integer
                                        description: Weight associated with matching the corresponding nodeSelectorTerm,
                                          in the range 1-100.
                                      preference:
                                        type: object
                                        description: |
                                          A null or empty node selector term matches no objects.
                                          The requirements of them are ANDed. The TopologySelectorTerm type
                                          implements a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            type: array
                                            description: A list of node selector requirements by node's labels.
                                            items:
                                              type: object
                                              description: A node selector requirement is a selector that contains
                                                values, a key, and an operator that relates the key and values.
                                              properties:
                                                key:
                                                  type: string
                                                  description: The label key that the selector applies to.
                                                operator: 
                                                  type: string
                                                  description: |
                                                    Represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                    and Lt.
                                                values:
                                                  type: array
                                                  description: An array of string values. If the operator is
                                                    In or NotIn, the values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist, the values array must
                                                    be empty. If the operator is Gt or Lt, the values array
                                                    must have a single element, which will be interpreted as
                                                    an integer. This array is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                          matchFields:
                                            type: array
                                            description: A list of node selector requirements by node's labels.
                                            items:
                                              type: object
                                              description: A node selector requirement is a selector that contains
                                                values, a key, and an operator that relates the key and values.
                                              properties:
                                                key:
                                                  type: string
                                                  description: The label key that the selector applies to.
                                                operator: 
                                                  type: string
                                                  description: |
                                                    Represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                    and Lt.
                                                values:
                                                  type: array
                                                  description: An array of string values. If the operator is
                                                    In or NotIn, the values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist, the values array must
                                                    be empty. If the operator is Gt or Lt, the values array
                                                    must have a single element, which will be interpreted as
                                                    an integer. This array is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  type: object
                                  description: |
                                    If the affinity requirements specified by this field are not met at
                                    scheduling time, the pod will not be scheduled onto the node.
                                    This type of affinity can restrict to only run the pod on specifically
                                    nodes like "Intel CPUs".
                                  properties:
                                    nodeSelectorTerms:
                                      type: array
                                      description: Pod custom node tolerations
                                      items:
                                        type: object
                                        description: Pod custom node toleration
                                        properties:
                                          matchExpressions:
                                            type: array
                                            description: A list of node selector requirements by node's labels.
                                            items:
                                              type: object
                                              description: A node selector requirement is a selector that contains
                                                values, a key, and an operator that relates the key and values.
                                              properties:
                                                key:
                                                  type: string
                                                  description: The label key that the selector applies to.
                                                operator: 
                                                  type: string
                                                  description: |
                                                    Represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                    and Lt.
                                                values:
                                                  type: array
                                                  description: An array of string values. If the operator is
                                                    In or NotIn, the values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist, the values array must
                                                    be empty. If the operator is Gt or Lt, the values array
                                                    must have a single element, which will be interpreted as
                                                    an integer. This array is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                          matchFields:
                                            type: array
                                            description: A list of node selector requirements by node's labels.
                                            items:
                                              type: object
                                              description: A node selector requirement is a selector that contains
                                                values, a key, and an operator that relates the key and values.
                                              properties:
                                                key:
                                                  type: string
                                                  description: The label key that the selector applies to.
                                                operator: 
                                                  type: string
                                                  description: |
                                                    Represents a key's relationship to a set of values.
                                                    Valid operators are In, NotIn, Exists, DoesNotExist. Gt,
                                                    and Lt.
                                                values:
                                                  type: array
                                                  description: An array of string values. If the operator is
                                                    In or NotIn, the values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist, the values array must
                                                    be empty. If the operator is Gt or Lt, the values array
                                                    must have a single element, which will be interpreted as
                                                    an integer. This array is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                    managementPolicy:
                      type: string
                      description: |
                        managementPolicy controls how pods are created during initial scale up, when replacing pods
                         on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created
                         in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is
                         ready before continuing. When scaling down, the pods are removed in the opposite order.
                         The alternative policy is `Parallel` which will create pods in parallel to match the desired
                         scale without waiting, and on scale down will delete all pods at once.
                  required: ["persistentVolume"]
                configurations:
                  type: object
                  description: |
                    Cluster custom configurations.
                  properties:
                    sgPostgresConfig:
                      type: string
                      description: |
                        Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig) used for the cluster. It must exist. When not set, a default Postgres config, for the major version selected, is used.
                    sgPoolingConfig:
                      type: string
                      description: |
                        Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolconfig) used for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.

                        If not set, a default configuration will be used. Disabling connection pooling altogether is possible if the disableConnectionPooling property of the pods object is set to true.
                    sgBackupConfig:
                      type: string
                      description: |
                        **Deprecated**: use instead .spec.configurations.backups with sgObjectStorage.

                        Name of the [SGBackupConfig](https://stackgres.io/doc/latest/reference/crd/sgbackupconfig) to use for the cluster. It defines the backups policy, storage and retention, among others, applied to the cluster. When not set, backup configuration will not be used.
                    backupPath:
                      type: string
                      description: |
                        **Deprecated**: use instead .spec.configurations.backups[].path

                        The path were the backup is stored. If not set this field is filled up by the operator.

                        When provided will indicate were the backups and WAL files will be stored.
                    backups:
                      type: array
                      description: |
                        List of backups configurations for this SGCluster
                      items:
                        type: object
                        description: |
                          Backup configuration for this SGCluster
                        properties:
                          compression:
                            type: string
                            description: |
                              Specifies the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method is `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but it compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and compression ratio, being about 3 times better than LZ4.
                            enum: [ "lz4", "lzma", "brotli" ]
                          cronSchedule:
                            type: string
                            description: |
                              Continuous Archiving backups are composed of periodic *base backups* and all the WAL segments produced in between those base backups. This parameter specifies at what time and with what frequency to start performing a new base backup.
                              
                              Use cron syntax (`m h dom mon dow`) for this parameter, i.e., 5 values separated by spaces:
                              *  `m`: minute, 0 to 59.
                              *  `h`: hour, 0 to 23.
                              *  `dom`: day of month, 1 to 31 (recommended not to set it higher than 28).
                              *  `mon`: month, 1 to 12.
                              *  `dow`: day of week, 0 to 7 (0 and 7 both represent Sunday).
                              
                              Also ranges of values (`start-end`), the symbol `*` (meaning `first-last`) or even `*/N`, where `N` is a number, meaning ""every `N`, may be used. All times are UTC. It is recommended to avoid 00:00 as base backup time, to avoid overlapping with any other external operations happening at this time.
                              
                              If not set, full backups are performed each day at 05:00 UTC.
                          performance:
                            type: object
                            description: |
                              Configuration that affects the backup network and disk usage performance.
                            properties:
                              maxNetworkBandwidth:
                                type: integer
                                description: |
                                  Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
                              maxDiskBandwidth:
                                type: integer
                                description: |
                                  Maximum disk read I/O when performing a backup. In bytes (per second).
                              uploadDiskConcurrency:
                                type: integer
                                minimum: 1
                                description: |
                                  Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use to reading from disk. By default, it's set to 1 (use one stream).
                              uploadConcurrency:
                                type: integer
                                minimum: 1
                                description: |
                                  Backup storage may use several concurrent streams to store the data. This parameter configures the number of parallel streams to use. By default, it's set to 1 (use one stream).
                          retention:
                            type: integer
                            minimum: 1
                            description: |
                              When an automatic retention policy is defined to delete old base backups, this parameter specifies the number of base backups to keep, in a sliding window.
                              
                              Consequently, the time range covered by backups is `periodicity*retention`, where `periodicity` is the separation between backups as specified by the `cronSchedule` property.
                              
                              Default is 5.
                          sgObjectStorage:
                            type: string
                            description: |
                              Name of the [SGObjectStorage](https://stackgres.io/doc/latest/reference/crd/sgobjectstorage) to use for the cluster. It defines the location in which the the backups will be stored.
                          path:
                            type: string
                            description: |
                              The path were the backup is stored. If not set this field is filled up by the operator.

                              When provided will indicate were the backups and WAL files will be stored.
                        required: ["sgObjectStorage"]
                managedSql:
                  type: object
                  description: |
                    This section allows to reference SQL scripts that will be applied to the cluster live.
                  properties:
                    continueOnSGScriptError:
                      type: boolean
                      description: If true, when any entry of any `SGScript` fail will not prevent subsequent `SGScript` from being executed. By default is `false`.
                    scripts:
                      type: array
                      description: |
                        A list of script references that will be executed in sequence.
                      items:
                        type: object
                        description: |
                          A script reference. Each version of each entry of the script referenced will be executed exactly once following the sequence defined
                           in the referenced script and skipping any script entry that have already been executed.
                        properties:
                          id:
                            type: integer
                            description: The id is immutable and must be unique across all the `SGScript` entries. It is replaced by the operator and is used to identify the `SGScript` entry.
                          sgScript:
                            type: string
                            description: A reference to an `SGScript`
                initialData:
                  type: object
                  description: Cluster initialization data options. Cluster may be initialized empty, or from a backup restoration. Specifying scripts to run on the database after cluster creation is also possible.
                  properties:
                    restore:
                      type: object
                      properties:
                        fromBackup:
                          type: object
                          description: |
                            From which backup to restore and how the process is configured
                          properties:
                            uid:
                              type: string
                              description: |
                                When set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. This field is deprecated.
                            name:
                              type: string
                              description: |
                                When set to the name of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. The selected backup must be in the same namespace.
                            target:
                              type: string
                              description: |
                                Specify the [recovery_target](https://postgresqlco.nf/doc/en/param/recovery_target/) that specifies that recovery should end as soon as a consistent
                                 state is reached, i.e., as early as possible. When restoring from an online backup, this means the point where taking the backup ended.

                                Technically, this is a string parameter, but 'immediate' is currently the only allowed value.
                            targetTimeline:
                              type: string
                              description: |
                                Specify the [recovery_target_timeline](https://postgresqlco.nf/doc/en/param/recovery_target_timeline/) to recover into a particular timeline.
                                 The default is to recover along the same timeline that was current when the base backup was taken. Setting this to latest recovers to the latest
                                 timeline found in the archive, which is useful in a standby server. Other than that you only need to set this parameter in complex re-recovery
                                 situations, where you need to return to a state that itself was reached after a point-in-time recovery.
                            pointInTimeRecovery:
                              type: object
                              description: |
                                It is possible to restore the database to its state at any time since your backup was taken using Point-in-Time Recovery (PITR) as long as another backup newer than the PITR requested restoration date does not exists.

                                Point In Time Recovery (PITR). PITR allow to restore the database state to an arbitrary point of time in the past, as long as you specify a backup older than the PITR requested restoration date and does not exists a backup newer than the same restoration date.

                                See also: https://www.postgresql.org/docs/current/continuous-archiving.html
                              properties:
                                restoreToTimestamp:
                                  type: string
                                  description: |
                                    An ISO 8601 date, that holds UTC date indicating at which point-in-time the database have to be restored.
                        downloadDiskConcurrency:
                          type: integer
                          minimum: 1
                          description: |
                            The backup fetch process may fetch several streams in parallel. Parallel fetching is enabled when set to a value larger than one.

                            If not specified it will be interpreted as latest.
                    scripts:
                      type: array
                      description: |
                        **Deprecated** use instead .spec.managedSql with SGScript.

                        A list of SQL scripts executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.
                      items:
                        type: object
                        description: |
                          **Deprecated** use instead .spec.managedSql with SGScript.

                          Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).

                          Fields `script` and `scriptFrom` are mutually exclusive and only one of them is required.
                        properties:
                          name:
                            type: string
                            description: |
                              Name of the script. Must be unique across this SGCluster.
                          database:
                            type: string
                            description: |
                              Database where the script is executed. Defaults to the `postgres` database, if not specified.
                          script:
                            type: string
                            description: |
                              Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.
                          scriptFrom:
                            type: object
                            description: |
                              Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.

                              Fields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.
                            properties:
                              secretKeyRef:
                                type: object
                                description: |
                                  A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.
                                properties:
                                  name:
                                    type: string
                                    description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                  key:
                                    type: string
                                    description: The key of the secret to select from. Must be a valid secret key.
                              configMapKeyRef:
                                type: object
                                description: |
                                  A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.
                                properties:
                                  name:
                                    type: string
                                    description: |
                                      The name of the ConfigMap that contains the SQL script to execute.
                                  key:
                                    type: string
                                    description: |
                                      The key name within the ConfigMap that contains the SQL script to execute.
                replicateFrom:
                  type: object
                  description: |
                    Make the cluster a read-only standby replica allowing to replicate from another PostgreSQL instance and acting as a rely.
                    
                    Changing this section is allowed to fix issues or to change the replication source.
                    
                    Removing this section convert the cluster in a normal cluster where the standby leader is converted into the a primary instance.
                  properties:
                    instance:
                      type: object
                      description: |
                        Configure replication from a PostgreSQL instance.
                      properties:
                        sgCluster:
                          type: string
                          description: |
                            Configure replication from an SGCluster.
                        external:
                          type: object
                          description: |
                            Configure replication from an external PostgreSQL instance.
                          properties:
                            host:
                              type: string
                              description: The host of the PostgreSQL to replicate from.
                            port:
                              type: integer
                              description: The port of the PostgreSQL to replicate from.
                          required: ["host", "port"]
                    storage:
                      type: object
                      description: |
                        Configure replication from an SGObjectStorage using WAL shipping.

                        The file structure of the object storage must follow the
                         [WAL-G](https://github.com/wal-g/wal-g) file structure.
                      properties:
                        performance:
                          type: object
                          description: |
                            Configuration that affects the backup network and disk usage performance.
                          properties:
                            maxNetworkBandwidth:
                              type: integer
                              description: |
                                Maximum storage upload bandwidth used when storing a backup. In bytes (per second).
                            maxDiskBandwidth:
                              type: integer
                              description: |
                                Maximum disk read I/O when performing a backup. In bytes (per second).
                            downloadConcurrency:
                              type: integer
                              minimum: 1
                              description: |
                                Backup storage may use several concurrent streams to retrieve the data. This parameter configures the number of parallel streams to use. By default, it's set to 1 (use one stream).
                        sgObjectStorage:
                          type: string
                          description: The SGObjectStorage name to replicate from.
                        path:
                          type: string
                          description: The path in the SGObjectStorage to replicate from.
                      required: ["sgObjectStorage", "path"]
                    users:
                      type: object
                      description: |
                        A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the credentials of the users.
                      properties:
                        superuser:
                          type: object
                          description: |
                            A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the credentials of the superuser (usually the postgres user).
                          properties:
                            username:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the username of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                            password:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the password of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                          required: ["username", "password"]
                        replication:
                          type: object
                          description: |
                            A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the credentials of the replication user used to replicate from the primary cluster and from replicas of this cluster.
                          properties:
                            username:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the username of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                            password:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the password of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                          required: ["username", "password"]
                        authenticator:
                          type: object
                          description: |
                            A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the credentials of the authenticator user used by pgbouncer to authenticate other users.
                          properties:
                            username:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the username of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                            password:
                              type: object
                              description: |
                                A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the password of the user.
                              properties:
                                name:
                                  type: string
                                  description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                key:
                                  type: string
                                  description: The key of the secret to select from. Must be a valid secret key.
                              required: ["name", "key"]
                          required: ["username", "password"]
                      required: ["superuser", "replication", "authenticator"]
                prometheusAutobind:
                  type: boolean
                  description: |
                    If enabled, a ServiceMonitor is created for each Prometheus instance found in order to collect metrics.
                nonProductionOptions:
                  type: object
                  properties:
                    disableClusterPodAntiAffinity:
                      type: boolean
                      description: |
                        It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.

                        The same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given Kubernetes node. Set this property to true to allow more than one StackGres pod per node.
                    disablePatroniResourceRequirements:
                      type: boolean
                      description: |
                        It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.

                        The same best practice applies to databases on containers. By default, StackGres will configure resource requirements for patroni container. Set this property to true to prevent StackGres from setting patroni container's resources requirement.
                    disableClusterResourceRequirements:
                      type: boolean
                      description: |
                        It is a best practice, on containerized environments, when running production workloads, to enforce container's resources requirements.

                        By default, StackGres will configure resource requirements for all the containers. Set this property to true to prevent StackGres from setting container's resources requirements (except for patroni container, see `disablePatroniResourceRequirements`).
                    enableSetPatroniCpuRequests:
                      type: boolean
                      description: |
                        On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                         the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.

                        By default, StackGres will configure cpu requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's cpu requirements request equals to the limit
                         when `.spec.requests.cpu` is configured in the referenced `SGInstanceProfile`.
                    enableSetClusterCpuRequests:
                      type: boolean
                      description: |
                        On containerized environments, when running production workloads, enforcing container's cpu requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                         the workload with less cpu than it requires. It also allow to set [static CPU management policy](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy) that allows to guarantee a pod the usage exclusive CPUs on the node.

                        By default, StackGres will configure cpu requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's cpu requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
                         when `.spec.requests.containers.<container name>.cpu` `.spec.requests.initContainers.<container name>.cpu` is configured in the referenced `SGInstanceProfile`.
                    enableSetPatroniMemoryRequests:
                      type: boolean
                      description: |
                        On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                         the workload with less memory than it requires.

                        By default, StackGres will configure memory requirements to have the same limit and request for the patroni container. Set this property to true to prevent StackGres from setting patroni container's memory requirements request equals to the limit
                         when `.spec.requests.memory` is configured in the referenced `SGInstanceProfile`.
                    enableSetClusterMemoryRequests:
                      type: boolean
                      description: |
                        On containerized environments, when running production workloads, enforcing container's memory requirements request to be equals to the limit allow to achieve the highest level of performance. Doing so, reduces the chances of leaving
                         the workload with less memory than it requires.

                        By default, StackGres will configure memory requirements to have the same limit and request for all the containers. Set this property to true to prevent StackGres from setting container's memory requirements request equals to the limit (except for patroni container, see `enablePatroniCpuRequests`)
                         when `.spec.requests.containers.<container name>.memory` `.spec.requests.initContainers.<container name>.memory` is configured in the referenced `SGInstanceProfile`.
                    enabledFeatureGates:
                      type: array
                      description: |
                        A list of StackGres feature gates to enable (not suitable for a production environment).
                        
                        Available feature gates are:
                        * `babelfish-flavor`: Allow to use `babelfish` flavor.
                      items:
                        type: string
                        description: The name of the fature gate to enable.
                distributedLogs:
                  type: object
                  description: StackGres features a functionality for all pods to send Postgres, Patroni and PgBouncer logs to a central (distributed) location, which is in turn another Postgres database. Logs can then be accessed via SQL interface or from the web UI. This section controls whether to enable this feature or not. If not enabled, logs are send to the pod's standard output.
                  properties:
                    sgDistributedLogs:
                      type: string
                      description: |
                        Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.
                    retention:
                      type: string
                      pattern: '^[0-9]+ (minutes?|hours?|days?|months?)'
                      description: |
                        Define a retention window with the syntax `<integer> (minutes|hours|days|months)` in which log entries are kept.
                         Log entries will be removed when they get older more than the double of the specified retention window.

                        When this field is changed the retention will be applied only to log entries that are newer than the end of
                         the retention window previously specified. If no retention window was previously specified it is considered
                         to be of 7 days. This means that if previous retention window is of `7 days` new retention configuration will
                         apply after UTC timestamp calculated with: `SELECT date_trunc('days', now() at time zone 'UTC') - INTERVAL '7 days'`.
                toInstallPostgresExtensions:
                  type: array
                  description: The list of Postgres extensions to install. This section is filled by the operator.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the extension to install.
                      publisher:
                        type: string
                        description: The id of the publisher of the extension to install.
                      version:
                        type: string
                        description: The version of the extension to install.
                      repository:
                        type: string
                        description: The repository base URL from where the extension will be installed from.
                      postgresVersion:
                        type: string
                        description: The postgres major version of the extension to install.
                      build:
                        type: string
                        description: The build version of the extension to install.
                      extraMounts:
                        type: array
                        description: The extra mounts of the extension to install.
                        items:
                          type: string
                          description: The extra mount of the installed extension.
                    required: ["name", "publisher", "version", "repository", "postgresVersion"]
              required: ["instances", "postgres", "pods"]
            status:
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    type: object
                    properties:
                      lastTransitionTime:
                        description: Last time the condition transitioned from one status to another.
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of deployment condition.
                        type: string
                podStatuses:
                  type: array
                  description: The list of pod statuses.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the pod.
                      replicationGroup:
                        type: integer
                        description: Indicates the replication group this Pod belongs to.
                      primary:
                        type: boolean
                        description: Indicates if the pod is the elected primary
                      pendingRestart:
                        type: boolean
                        description: Indicates if the pod requires restart
                      installedPostgresExtensions:
                        type: array
                        description: The list of Postgres extensions currently installed.
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the installed extension.
                            publisher:
                              type: string
                              description: The id of the publisher of the installed extension.
                            version:
                              type: string
                              description: The version of the installed extension.
                            repository:
                              type: string
                              description: The repository base URL from where the extension was installed from.
                            postgresVersion:
                              type: string
                              description: The postgres major version of the installed extension.
                            build:
                              type: string
                              description: The build version of the installed extension.
                            extraMounts:
                              type: array
                              description: The extra mounts of the installed extension.
                              items:
                                type: string
                                description: The extra mount of the installed extension.
                          required: ["name", "publisher", "version", "repository", "postgresVersion"]
                    required: ["name"]
                dbOps:
                  type: object
                  description: |
                    Used by some [SGDbOps](https://stackgres.io/doc/latest/reference/crd/sgdbops) to indicate the operation configuration and status to the operator.
                  properties:
                    majorVersionUpgrade:
                      type: object
                      description: |
                        The major version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                        sourcePostgresVersion:
                          type: string
                          description: |
                            The source PostgreSQL version
                        sourceSgPostgresConfig:
                          type: string
                          description: |
                            The source SGPostgresConfig reference
                        sourceBackupPath:
                          type: string
                          description: |
                            The source backup path
                        targetPostgresVersion:
                          type: string
                          description: |
                            The target PostgreSQL version
                        locale:
                          type: string
                          description: |
                            The PostgreSQL locale
                        encoding:
                          type: string
                          description: |
                            The PostgreSQL encoding
                        dataChecksum:
                          type: boolean
                          description: |
                            Indicates if PostgreSQL data checksum is enabled
                        link:
                          type: boolean
                          description: |
                            Use `--link` option when running `pg_upgrade`
                        clone:
                          type: boolean
                          description: |
                            Use `--clone` option when running `pg_upgrade`
                        check:
                          type: boolean
                          description: |
                            Run `pg_upgrade` with check option instead of performing the real upgrade
                        rollback:
                          type: boolean
                          description: |
                            Indicates to rollback from a previous major version upgrade
                    restart:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                    minorVersionUpgrade:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                        sourcePostgresVersion:
                          type: string
                          description: |
                            Postgres version that is currently running on the cluster
                        targetPostgresVersion:
                          type: string
                          description: |
                            The desired Postgres version for the cluster
                    securityUpgrade:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                arch:
                  type: string
                  description: The architecture on which the cluster has been initialized.
                os:
                  type: string
                  description: The operative system on which the cluster has been initialized.
                labelPrefix:
                  type: string
                  description: The custom prefix that is prepended to all labels.
                managedSql:
                  type: object
                  description: |
                    This section stores the state of referenced SQL scripts that are applied to the cluster live.
                  properties:
                    scripts:
                      type: array
                      description: A list of statuses for script references.
                      items:
                        type: object
                        description: The status of a script reference.
                        properties:
                          id:
                            type: integer
                            description: Identify the associated `SGScript` entry with the same value in the `id` field.
                          startedAt:
                            type: string
                            description: ISO-8601 datetime of when the script execution has been started.
                          updatedAt:
                            type: string
                            description: ISO-8601 datetime of when the last script execution occurred. Will be reset each time the referenced `SGScripts` entry will be applied.
                          failedAt:
                            type: string
                            description: ISO-8601 datetime of when the script execution had failed (mutually exclusive with `completedAt`).
                          completedAt:
                            type: string
                            description: ISO-8601 datetime of when the script execution had completed (mutually exclusive with `failedAt`).
                          scripts:
                            type: array
                            description: A list of statuses for script entries of referenced script.
                            items:
                              type: object
                              description: The status of a script entry of a referenced script.
                              properties:
                                id:
                                  type: integer
                                  description: Identify the associated script entry with the same value in the `id` field.
                                version:
                                  type: integer
                                  description: The latest version applied
                                intents:
                                  type: integer
                                  description: Indicates the number of intents or failures occurred
                                failureCode:
                                  type: string
                                  description: If failed, the error code of the failure. See also https://www.postgresql.org/docs/current/errcodes-appendix.html
                                failure:
                                  type: string
                                  description: If failed, a message of the failure

