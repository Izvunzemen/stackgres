cert:
  autoapprove: |
    If set to false disable automatic approve of certificate
     used by the operator. If disabled the operator installation will not complete
     until the certificate is approved by the kubernetes cluster administrator.
  key: |
    The private RSA key used to generated the `cert.crt` certificate that uses the
     kubernetes cluster CA.
  crt: |
    The certificate that is generated using the `cert.key` private RSA key and uses the
     kubernetes cluster CA.
  jwtRsaKey: |
    The private RSA key used to generate JWTs used in REST API authentication.
  jwtRsaPub: |
    The public RSA key used to verify JWTs used in REST API authentication.
prometheus:
  allowAutobind: |
    If set to false disable automatic bind to prometheus
     created using the [prometheus operator](https://github.com/prometheus-operator/prometheus-operator).
     If disabled the cluster will not be binded to prometheus automatically and will require manual
     interventin by the kubernetes cluster administrator.
adminui:
  service:
    type: |
      The type used for the service of the UI:
      * Set to LoadBalancer to create a load balancer (if supported by the kubernetes cluster)
       to allow connect from Internet to the UI. Note that enabling this feature will probably incurr in
       some fee that depend on the host of the kubernetes cluster (for example this is true for EKS, GKE
       and AKS).
      * Set to NodePort to expose admin UI from kubernetes nodes.
    loadBalancerIP: |
      LoadBalancer will get created with the IP specified in
       this field. This feature depends on whether the underlying cloud-provider supports specifying
       the loadBalancerIP when a load balancer is created. This field will be ignored if the
       cloud-provider does not support the feature.
    loadBalancerSourceRanges: |
      If specified and supported by the platform,
       this will restrict traffic through the cloud-provider load-balancer will be restricted to the
       specified client IPs. This field will be ignored if the cloud-provider does not support the
       feature.
       More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    nodePort: |
      The port used to expose the service on kubernetes nodes
authentication:
  type: |
    Specify the authentication mechanism to use. By default is jwt, see https://stackgres.io/doc/latest/api/rbac#local-secret-mechanism.
      If oidc is specified then see https://stackgres.io/doc/latest/api/rbac/#openid-connect-provider-mechanism.
  user: |
    Username that will be required to access the UI.
  password: |
    Password that will be required to access the UI.
  resetPassword: |
    Forces the password reset, updating the existing secret.
  secretRef:
    name: |
      Allow to specify the secret name that will be used store the credentials to access the UI.
        It simply prevent creating the secret automatically.
grafana:
  autoEmbed: |
    Embed an existing grafana by setting `grafana.autoEmbed` to true
  schema: |
    The schema to access grafana. By default http. (used to embed manually and
     automatically grafana)
  webHost: |
    The service host name to access grafana (used to embed manually and
     automatically grafana). 
     The parameter value should point to the grafana service following the 
     [DNS reference](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/) `svc_name.namespace`
  user: |
    The username to access grafana. By default admin. (used to embed automatically
     grafana)
  password: |
    The password to access grafana. By default prom-operator (the default in for
     kube-prometheus-stack helm chart). (used to embed automatically grafana)
  secretNamespace: |
    The namespace of secret with credentials to access grafana. (used to
     embed automatically grafana, alternative to use `grafana.user` and `grafana.password`)
  secretName: |
    The name of secret with credentials to access grafana. (used to embed
     automatically grafana, alternative to use `grafana.user` and `grafana.password`)
  secretUserKey: |
    The key of secret with username used to access grafana. (used to embed
     automatically grafana, alternative to use `grafana.user` and `grafana.password`)
  secretPasswordKey: |
    The key of secret with password used to access grafana. (used to
     embed automatically grafana, alternative to use `grafana.user` and `grafana.password`)
  datasourceName: |
    The datasource name used by dashboard that will be created in grafana.
     By default Prometheus. (used to embed automatically grafana)
  dashboardConfigMap: |
    A configMap with the dashboard JSON in the key `grafana-dashboard.json`
    that will be created in grafana. If not set the default
    StackGres dashboard will be created. (used to embed automatically grafana)
  dashboardId: |
    The dashboard id that will be create in grafana
     (see https://grafana.com/grafana/dashboards). By default 9628. (used to embed automatically
     grafana)
  url: |
    The URL of the PostgreSQL dashboard created in grafana (used to embed manually
     grafana)
  token: |
    The grafana API token to access the PostgreSQL dashboard created
     in grafana (used to embed manually grafana)
