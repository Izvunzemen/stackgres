# GraalVM Quarkus image
image: docker.io/ongres/ubi-graalvm-maven:19.3.1-java8

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: |
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: |
    -f stackgres-k8s/src/pom.xml
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true
    -Dsurefire.useFile=false
    -DtrimStackTrace=false
  DISABLE_IT: "true"
  E2E_ENV: kind
  E2E_PARALLELISM: 32
  K8S_VERSION: 1.17.5
  K8S_FROM_DIND: "true"
  K8S_REUSE: "true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - compile
  - package
  - pre test
  - test
  - check-release
  - deploy

compile:
  stage: compile
  variables:
    QUARKUS_PROFILE: "test"
  tags:
    - stackgres-runner
  script:
    - mvn $MAVEN_CLI_OPTS clean verify -P safer
  artifacts:
    paths:
      - stackgres-k8s/src/target
      - stackgres-k8s/src/*/target

native image:
  stage: package
  tags:
    - stackgres-runner
  dependencies:
    - compile
  resource_group: stackgres-build-native
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - flock -w 3600 /tmp/stackgres-build-native mvn $MAVEN_CLI_OPTS package -P native
    - cp $GRAALVM_HOME/jre/lib/amd64/libsunec.so stackgres-k8s/src/operator/target/
    - cp $GRAALVM_HOME/jre/lib/security/cacerts stackgres-k8s/src/operator/target/
  artifacts:
    paths:
      - stackgres-k8s/src/operator/target/libsunec.so
      - stackgres-k8s/src/operator/target/cacerts
      - stackgres-k8s/src/operator/target/stackgres-operator-runner
      - stackgres-k8s/src/operator/target/lib/
      - stackgres-k8s/src/operator/target/stackgres-operator-runner.jar
    expire_in: 1 day
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

enforce release:
  stage: check-release
  tags:
    - stackgres-runner
  dependencies:
    - compile
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests -Dquarkus.skipAugmentation=true"
    - mvn $MAVEN_CLI_OPTS enforcer:enforce@enforce-no-snapshots
  only:
    variables:
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/

build test images:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  retry: 2
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests -Dquarkus.skipAugmentation=true"
    - mvn $MAVEN_CLI_OPTS pre-integration-test -P integration

build jvm image:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  retry: 2
  resource_group: stackgres-build-jvm-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - mvn $MAVEN_CLI_OPTS package -P build-image-jvm

build native image:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
    - native image
  retry: 2
  resource_group: stackgres-build-native-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - mvn $MAVEN_CLI_OPTS package -P build-image-native
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

integration test:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  resource_group: stackgres-integration-test
  script:
    - |
      flock -s -w 3600 /tmp/stackgres-build-native \
      mvn $MAVEN_CLI_OPTS verify -P integration \
        -Dit.skipBuildContainer=true
  only:
    variables:
      - $DO_EXTERNAL

integration test jvm image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: jvm-image
  resource_group: stackgres-integration-test-jvm-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - |
      flock -s -w 3600 /tmp/stackgres-build-native \
      mvn $MAVEN_CLI_OPTS verify -P integration \
        -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
        -Dit.skipBuildContainer=true

integration test native image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: native-image
    SKIP_QUARKUS_TEST: "true"
  resource_group: stackgres-integration-test-native-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - |
      flock -s -w 3600 /tmp/stackgres-build-native \
      mvn $MAVEN_CLI_OPTS verify -P integration \
        -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
        -Dit.skipBuildContainer=true
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

deploy jvm image:
  image: quay.io/buildah/stable:v1.14.8
  stage: deploy
  tags:
    - stackgres-runner
  resource_group: deploy-jvm-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm
    - export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"-jvm
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - export IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"
    - buildah pull docker-daemon:"$IMAGE_NAME"
    - buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $IMAGE_NAME "docker://docker.io/$IMAGE_UPLOAD_NAME"
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY

deploy native image:
  image: quay.io/buildah/stable:v1.14.8
  stage: deploy
  tags:
    - stackgres-runner
  resource_group: deploy-native-image
  script:
    - export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"
    - export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"
    - export IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    - export IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"
    - buildah pull docker-daemon:"$IMAGE_NAME"
    - buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $IMAGE_NAME "docker://docker.io/$IMAGE_UPLOAD_NAME"
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
