# GraalVM Quarkus image
image: docker.io/ongres/ubi-graalvm-maven:19.3.1-java8

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: |
               -Dhttps.protocols=TLSv1.2
               -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
               -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
               -Dorg.slf4j.simpleLogger.showDateTime=true
               -Djava.awt.headless=true
               -XX:+UseParallelOldGC
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: |
                   -f stackgres-k8s/src/pom.xml
                   --batch-mode
                   --errors
                   --fail-at-end
                   --show-version
                   -DinstallAtEnd=true
                   -DdeployAtEnd=true
                   -Dsurefire.useFile=false
                   -Dsurefire.useFile=false
                   -DtrimStackTrace=false
  DISABLE_IT: "true"
  E2E_ENV: kind
  E2E_PARALLELISM: 32
  K8S_VERSION: 1.15.11
  K8S_FROM_DIND: "true"
  K8S_REUSE: "true"
  DOCUMENTATION_BASE_URL: "https://ongresinc.gitlab.io/web/stackgres/doc/latest"
  PRODUCTION_DOCUMENTATION_BASE_URL: "https://stackgres.io/doc/latest"
  SKIP_NATIVE: "false"
  SKIP_E2E: "false"
  SKIP_DEPLOY: "false"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - build
  - native build
  - image build
  - test
  - check-release
  - deploy

build:
  stage: build
  variables:
    QUARKUS_PROFILE: "test"
  tags:
    - stackgres-runner
    - stackgres-quarkus-test-runner
  script:
    - 'mvn $MAVEN_CLI_OPTS clean verify -P safer'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - stackgres-k8s/src/target
      - stackgres-k8s/src/*/target
    reports:
      junit:
        - stackgres-k8s/src/*/target/surefire-reports/TEST-*.xml

build documentation:
  image: monachus/hugo
  stage: build
  script:
  - |
    if [[ ! -z "$CI_COMMIT_TAG" && ! "$CI_COMMIT_TAG" =~ ^latest-.*$ ]]
    then
      DOCUMENTATION_BASE_URL="$PRODUCTION_DOCUMENTATION_BASE_URL"
    fi
  - sh -xe doc/build.sh
  - STACKGRES_VERSION="$(echo 'import xml.etree.ElementTree as ET; print ET.parse("stackgres-k8s/src/pom.xml").getroot().find("{%s}version" % "http://maven.apache.org/POM/4.0.0").text' | python)"
  - mkdir -p "doc/public/$STACKGRES_VERSION"
  - hugo -v --source doc --destination "$(pwd)/doc/public/$STACKGRES_VERSION" --baseURL="$DOCUMENTATION_BASE_URL"
  - cp -a "doc/public/$STACKGRES_VERSION" doc/public/latest
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - doc/public

build helm packages:
  image: dtzar/helm-kubectl:3.1.1
  stage: build
  script:
  - sh -xe stackgres-k8s/install/helm/build-helm-packages.sh
  - |
    if [[ ! -z "$CI_COMMIT_TAG" && ! "$CI_COMMIT_TAG" =~ ^latest-.*$ ]]
    then
      cp -a "stackgres-k8s/install/helm/target/public/downloads/stackgres-k8s/stackgres"/* stackgres-k8s/install/helm/target/public/downloads/stackgres-k8s/stackgres/latest
    fi
  - find stackgres-k8s/install/helm/target/public | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/install/helm/target/public

build helm templates:
  image: dtzar/helm-kubectl:3.1.1
  stage: build
  script:
  - sh -xe stackgres-k8s/install/helm/build-helm-templates.sh
  - |
    if [[ ! -z "$CI_COMMIT_TAG" && ! "$CI_COMMIT_TAG" =~ ^latest-.*$ ]]
    then
      cp -a "stackgres-k8s/install/helm/target/public/downloads/stackgres-k8s/stackgres"/* stackgres-k8s/install/helm/target/public/downloads/stackgres-k8s/stackgres/latest
    fi
  - find stackgres-k8s/install/helm/target/public | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/install/helm/target/public

.build native executable:
  stage: native build
  tags:
    - stackgres-runner
  dependencies:
    - build
  variables:
    NATIVE_IMAGE_EXTRA_PREFIX: ""
    MAVEN_EXTRA_ARGS: ""
  timeout: 12 hour
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - |
      flock "/tmp/stackgres-build$NATIVE_IMAGE_EXTRA_PREFIX-native-executable" \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS package -P native $MAVEN_EXTRA_ARGS
    - 'cp $GRAALVM_HOME/jre/lib/amd64/libsunec.so stackgres-k8s/src/operator/target/'
    - 'cp $GRAALVM_HOME/jre/lib/security/cacerts stackgres-k8s/src/operator/target/'
    - 'cp $GRAALVM_HOME/jre/lib/amd64/libsunec.so stackgres-k8s/src/api-web/target/'
    - 'cp $GRAALVM_HOME/jre/lib/security/cacerts stackgres-k8s/src/api-web/target/'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - stackgres-k8s/src/*/target/libsunec.so
      - stackgres-k8s/src/*/target/cacerts
      - stackgres-k8s/src/*/target/stackgres-*-runner
      - stackgres-k8s/src/*/target/lib/
      - stackgres-k8s/src/*/target/stackgres-*-runner.jar
  only:
    variables:
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "master"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

build operator native executable:
  extends: .build native executable
  variables:
    NATIVE_IMAGE_EXTRA_PREFIX: "-operator"
    MAVEN_EXTRA_ARGS: "-pl .,common,operator-framework,test-util,operator"

build restapi native executable:
  extends: .build native executable
  variables:
    NATIVE_IMAGE_EXTRA_PREFIX: "-restapi"
    MAVEN_EXTRA_ARGS: "-pl .,common,operator-framework,test-util,api-web"

build operator jvm image:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}-jvm"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export TARGET_OPERATOR_IMAGE_NAME="$CI_REGISTRY/ongresinc/stackgres/$OPERATOR_IMAGE_NAME"'
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd stackgres-k8s/src
    - |
      flock /tmp/stackgres-operator-build-jvm-image \
        sh -xe operator/src/main/buildah/build-image-jvm.sh
  only:
    variables:
      - $SKIP_E2E != "true"
      - $DO_DEPLOY

build restapi jvm image:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}-jvm"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export TARGET_RESTAPI_IMAGE_NAME="$CI_REGISTRY/ongresinc/stackgres/$RESTAPI_IMAGE_NAME"'
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd stackgres-k8s/src
    - |
      flock /tmp/stackgres-restapi-build-jvm-image \
        sh -xe api-web/src/main/buildah/build-image-jvm.sh
  only:
    variables:
      - $SKIP_E2E != "true"
      - $DO_DEPLOY

build operator native image:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export TARGET_OPERATOR_IMAGE_NAME="$CI_REGISTRY/ongresinc/stackgres/$OPERATOR_IMAGE_NAME"'
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd stackgres-k8s/src
    - |
      flock /tmp/stackgres-operator-build-native-image \
        sh -xe operator/src/main/buildah/build-image-native.sh
  only:
    variables:
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "master"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

build restapi native image:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export TARGET_RESTAPI_IMAGE_NAME="$CI_REGISTRY/ongresinc/stackgres/$RESTAPI_IMAGE_NAME"'
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd stackgres-k8s/src
    - |
      flock /tmp/stackgres-restapi-build-native-image \
        sh -xe api-web/src/main/buildah/build-image-native.sh
  only:
    variables:
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "master"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

build admin-ui image:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export ADMINUI_IMAGE_NAME="stackgres/admin-ui:$IMAGE_TAG"'
    - 'export TARGET_ADMINUI_IMAGE_NAME="$CI_REGISTRY/ongresinc/stackgres/$ADMINUI_IMAGE_NAME"'
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - cd stackgres-k8s/src
    - |
      flock /tmp/stackgres-adminui-build-image \
        sh -xe admin-ui/buildah/build.sh
  only:
    variables:
      - $SKIP_E2E != "true"
      - $DO_DEPLOY

build test images:
  image: quay.io/buildah/stable:v1.15.0
  stage: image build
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 1 hour
  script:
    - |
      IT_IMAGE="$(STACKGRES_VERSION=$(grep -o '<it\.image>\([^<]\+\)</it\.image>' stackgres-k8s/src/pom.xml \
        | tr '<>' '  ' | cut -d ' ' -f 3))"
    - |
      flock /tmp/stackgres-build-it-image \
        buildah bud -f stackgres-k8s/src/operator/src/test/docker/Dockerfile.it -t "$IT_IMAGE" .
  only:
    variables:
      - $SKIP_E2E != "true"

integration test:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - build
  timeout: 12 hour
  script:
    - |
      flock -s /tmp/stackgres-build-operator-native-executable \
        flock -s /tmp/stackgres-build-restapi-native-executable \
        flock /tmp/stackgres-integration-test \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration -Dit.skipBuildContainer=true
  only:
    variables:
      - $DO_EXTERNAL
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

.e2e tests jvm image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - build
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: jvm-image
    E2E_EXTRA_SUFFIX: ""
    E2E_RUN_ONLY: non_exclusive
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export E2E_OPERATOR_REGISTRY_USER=$CI_REGISTRY_USER'
    - 'export E2E_OPERATOR_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD'
    - 'export E2E_OPERATOR_REGISTRY=$CI_REGISTRY'
    - 'export E2E_OPERATOR_REGISTRY_PATH=/ongresinc/stackgres/'
    - 'export E2E_FORCE_IMAGE_PULL=true'
    - 'export E2E_RUN_ONLY="$E2E_RUN_ONLY:$E2E_RUN_BATCH_INDEX/$E2E_RUN_BATCH_COUNT"'
    - 'export E2E_PULLED_IMAGES_PATH="/tmp/pulled-images-jvm-image$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX"'
    - 'export K8S_SUFFIX="$K8S_SUFFIX$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX"'
    - |
      flock -s /tmp/stackgres-build-operator-native-executable \
        flock -s /tmp/stackgres-build-restapi-native-executable \
        flock "/tmp/stackgres-integration-test-jvm-image$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX" \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  only:
    variables:
      - $SKIP_E2E != "true"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e tests jvm image part 1/2:
  extends: .e2e tests jvm image
  variables:
    E2E_RUN_BATCH_INDEX: 1
    E2E_RUN_BATCH_COUNT: 2

e2e tests jvm image part 2/2:
  extends: .e2e tests jvm image
  variables:
    E2E_RUN_BATCH_INDEX: 2
    E2E_RUN_BATCH_COUNT: 2

e2e exclusive tests jvm image:
  extends: .e2e tests jvm image
  variables:
    E2E_RUN_BATCH_INDEX: 1
    E2E_RUN_BATCH_COUNT: 1
    E2E_EXTRA_SUFFIX: "-exclusive"
    E2E_RUN_ONLY: exclusive

.e2e tests native image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - build
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: native-image
    SKIP_QUARKUS_TEST: "true"
    E2E_EXTRA_SUFFIX: ""
    E2E_RUN_ONLY: non_exclusive
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export E2E_OPERATOR_REGISTRY_USER=$CI_REGISTRY_USER'
    - 'export E2E_OPERATOR_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD'
    - 'export E2E_OPERATOR_REGISTRY=$CI_REGISTRY'
    - 'export E2E_OPERATOR_REGISTRY_PATH=/ongresinc/stackgres/'
    - 'export E2E_FORCE_IMAGE_PULL=true'
    - 'export E2E_RUN_ONLY="$E2E_RUN_ONLY:$E2E_RUN_BATCH_INDEX/$E2E_RUN_BATCH_COUNT"'
    - 'export E2E_PULLED_IMAGES_PATH="/tmp/pulled-images-native-image$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX"'
    - 'export K8S_SUFFIX="$K8S_SUFFIX$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX"'
    - |
      flock -s /tmp/stackgres-build-operator-native-executable \
        flock -s /tmp/stackgres-build-restapi-native-executable \
        flock "/tmp/stackgres-integration-test-native-image$E2E_EXTRA_SUFFIX-$E2E_RUN_BATCH_INDEX" \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  only:
    variables:
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "master"
      - $SKIP_E2E != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e tests native image part 1/2:
  extends: .e2e tests native image
  variables:
    E2E_RUN_BATCH_INDEX: 1
    E2E_RUN_BATCH_COUNT: 2

e2e tests native image part 2/2:
  extends: .e2e tests native image
  variables:
    E2E_RUN_BATCH_INDEX: 2
    E2E_RUN_BATCH_COUNT: 2

e2e exclusive tests native image:
  extends: .e2e tests native image
  variables:
    E2E_RUN_BATCH_INDEX: 1
    E2E_RUN_BATCH_COUNT: 1
    E2E_EXTRA_SUFFIX: "-exclusive"
    E2E_RUN_ONLY: exclusive

enforce release:
  stage: check-release
  tags:
    - stackgres-runner
  dependencies:
    - build
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests -Dquarkus.skipAugmentation=true"
    - 'mvn $MAVEN_CLI_OPTS enforcer:enforce@enforce-no-snapshots'
  only:
    variables:
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/

deploy jvm image:
  image: quay.io/buildah/stable:v1.15.0
  stage: deploy
  tags:
    - stackgres-runner
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"-jvm'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export OPERATOR_IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"'
    - 'export RESTAPI_IMAGE_UPLOAD_NAME="stackgres/restapi:$IMAGE_UPLOAD_TAG"'
    - 'buildah pull docker-daemon:"$OPERATOR_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $OPERATOR_IMAGE_NAME "docker://docker.io/$OPERATOR_IMAGE_UPLOAD_NAME"'
    - 'buildah pull docker-daemon:"$RESTAPI_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $RESTAPI_IMAGE_NAME "docker://docker.io/$RESTAPI_IMAGE_UPLOAD_NAME"'
  only:
    variables:
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY

deploy native image:
  image: quay.io/buildah/stable:v1.15.0
  stage: deploy
  tags:
    - stackgres-runner
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export OPERATOR_IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"'
    - 'export RESTAPI_IMAGE_UPLOAD_NAME="stackgres/restapi:$IMAGE_UPLOAD_TAG"'
    - 'buildah pull docker-daemon:"$OPERATOR_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $OPERATOR_IMAGE_NAME "docker://docker.io/$OPERATOR_IMAGE_UPLOAD_NAME"'
    - 'buildah pull docker-daemon:"$RESTAPI_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $RESTAPI_IMAGE_NAME "docker://docker.io/$RESTAPI_IMAGE_UPLOAD_NAME"'
  only:
    variables:
      - $SKIP_DEPLOY != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_DEPLOY != "true" && $SKIP_NATIVE != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY

deploy adminui image:
  image: quay.io/buildah/stable:v1.15.0
  stage: deploy
  tags:
    - stackgres-runner
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"'
    - 'export ADMINUI_IMAGE_NAME="stackgres/admin-ui:$IMAGE_TAG"'
    - 'export ADMINUI_IMAGE_UPLOAD_NAME="stackgres/admin-ui:$IMAGE_UPLOAD_TAG"'
    - 'buildah pull docker-daemon:"$ADMINUI_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $ADMINUI_IMAGE_NAME "docker://docker.io/$ADMINUI_IMAGE_UPLOAD_NAME"'
  only:
    variables:
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY

deploy helm packages and templates:
  image: mikesir87/aws-cli:latest
  stage: deploy
  dependencies:
    - build helm packages
    - build helm templates
  script:
    - aws s3 sync ./stackgres-k8s/install/helm/target/public/ s3://$S3_BUCKET_NAME/
    - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths '/*'
  only:
    variables:
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_REF_NAME == "development"
      - $SKIP_DEPLOY != "true" && $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
